// Ph·∫ßn t·∫°o CV 
const contentCV = document.querySelector('.content_CV');
const paper = document.querySelector('.paper');
const heading_paper = document.querySelector('.heading_paper');
const content_left = document.querySelector('.content-left');
let partsBig_in_CV = document.querySelectorAll('.part_ct');
let textElements = document.querySelectorAll('.possible_Part'); // ph·∫ßn c√≥ th·ªÉ ch·ªânh s·ª≠a textcontent
let content_headingCV = document.querySelectorAll(".introduce b,.introduce p");
let part_content = document.querySelectorAll(".content-left .paragraph"); // nh·ªØng ph·∫ßn ƒë·ªÉ ch·ªânh s·ª≠a l√™n xu·ªëng d√≤ng gi·ªØa c√°c t·ªù gi·∫•y
let Item_in_each_Part = document.querySelectorAll(".item_in_part"); // ph·∫ßn ƒë·ªÉ t√≠nh to√°n chia gi·∫•y 
let instruct = document.querySelector(".instruct");

// khi chuy·ªÉn m·∫´u th√¨ ti·∫øn h√†nh chuy·ªÉn h·∫øt n·ªôi dung c·ªßa ph·∫ßn contentCV v√†o ph·∫ßn half-left hoƒÉc two , 
// sao ƒë√≥ ti·∫øn h√†nh lu√¥n ƒëo gi·∫•y v√† redistribute ph·∫ßn t·ª≠
let total_paper = document.querySelectorAll('.paper'); // l·∫•y ra all s·ªë gi·∫•y 

// Ph·∫ßn g·ª£i √Ω CV 
let suggest = [
    // ----------- Ph·∫ßn overview --------------
    {
        heading: {
            title: "overview",  
            describe : "Ph·∫ßn gi·ªõi thi·ªáu b·∫£n th√¢n th∆∞·ªùng ƒë∆∞·ª£c vi·∫øt m·ªôt c√°ch ng·∫Øn g·ªçn, linh ho·∫°t nh·∫±m l√†m n·ªïi b·∫≠t ti·∫øn tr√¨nh ngh·ªÅ nghi·ªáp, th√†nh t√≠ch v√† c√°c k·ªπ nƒÉng c·ªßa b·∫°n.",
            rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "2"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [{
                titleContent : "B·∫Øt ƒë·∫ßu v·ªõi m·ªôt v·ªã tr√≠ c√¥ng vi·ªác chuy√™n nghi·ªáp",
                text: "B·∫Øt ƒë·∫ßu ph·∫ßn gi·ªõi thi·ªáu b·∫£n th√¢n v·ªõi v·ªã tr√≠ c√¥ng vi·ªác t·ª´ng l√†m c√≥ li√™n quan t·ªõi v·ªã tr√≠ ƒëang ·ª©ng tuy·ªÉn g√≥p ph·∫ßn thu h√∫t nh√† tuy·ªÉn d·ª•ng v√† cho h·ªç th·∫•y r·∫±ng CV c·ªßa b·∫°n ƒëang h∆∞·ªõng t·ªõi m·ªôt c√¥ng vi·ªác c·ª• th·ªÉ."
            },
            {
                titleContent : "Th√™m hai ho·∫∑c ba th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c",
                text: "B·ªï sung s·ªë li·ªáu v√† c√°c th√¥ng tin chi ti·∫øt. T·∫≠p trung v√†o k·∫øt qu·∫£ gi√∫p b·∫°n n·ªïi b·∫≠t v√† kh·∫≥ng ƒë·ªãnh v·ªõi nh√† tuy·ªÉn d·ª•ng r·∫±ng b·∫°n l√† m·ªôt ·ª©ng c·ª≠ vi√™n ph√π h·ª£p."
            },
            {
                titleContent : "ƒêi·ªÅu ch·ªânh cho ph√π h·ª£p v·ªõi JD",
                text: "T√¨m t·ª´ kh√≥a trong m√¥ t·∫£ c√¥ng vi·ªác m√† nh√† tuy·ªÉn d·ª•ng cung c·∫•p, bao g·ªìm c√°c k·ªπ nƒÉng v√† ph·∫©m ch·∫•t c·∫ßn thi·∫øt (t·∫≠n t√¢m, chƒÉm ch·ªâ) v√† th√™m ch√∫ng v√†o ph·∫ßn gi·ªõi thi·ªáu b·∫£n th√¢n trong CV."
            }],
            // Ph·∫ßn v√≠ d·ª•
            [
                    {
                        titleExample1: "‚ú® CV ·ª©ng tuy·ªÉn v·ªã tr√≠ K·∫ø to√°n",
                        company: "V·ªõi h∆°n 10 nƒÉm kinh nghi·ªám l√†m vi·ªác trong lƒ©nh v·ª±c k·∫ø to√°n v√† t√†i ch√≠nh c≈©ng nh∆∞ kinh nghi·ªám chuy√™n m√¥n v·ªõi nhi·ªÅu ch∆∞∆°ng tr√¨nh k·∫ø to√°n ph·ªï bi·∫øn nh·∫•t (MISA, FAST), t√¥i mong mu·ªën t√¨m ki·∫øm c∆° h·ªôi l√†m vi·ªác trong m√¥i tr∆∞·ªùng chuy√™n nghi·ªáp v√† g√≥p ph·∫ßn c·∫£i thi·ªán t√†i ch√≠nh c·ªßa t·ªï ch·ª©c.",
                        time: "",
                        describe: {
                            describe_ti : "",
                            content : [
                            ]
                        },
                        results: {
                            results_ti : "",
                            content : [
                            ]
                        }
                    },
                    {
                        titleExample1: "‚ú® CV ·ª©ng tuy·ªÉn v·ªã tr√≠ Designer",
                        company: "L√† m·ªôt graphic designer tr·∫ª ƒë·∫ßy ƒëam m√™ v√† nhi·ªát huy·∫øt, v·ªõi nh·ªØng ki·∫øn th·ª©c h·ªçc ƒë∆∞·ª£c c√πng s·ª± s√°ng t·∫°o, gu th·∫©m m·ªπ v√† h∆°n 2 nƒÉm kinh nghi·ªám l√†m vi·ªác, t√¥i hi v·ªçng c√≥ th·ªÉ ƒë√≥ng g√≥p v√†o s·ª± ph√°t tri·ªÉn c·ªßa c√¥ng ty.",
                        time: "",
                        describe: {
                            describe_ti : "",
                            content : [
                            ]
                        },
                        results: {
                            results_ti : "",
                            content : [
                            ]
                        }
                    }
            ],
            [{
                attention: ""
            }]
        ]
    },
     // ----------- Ph·∫ßn Work Experience --------------
    {
        heading: {
            title: "workexperience",
            describe : "Li·ªát k√™ kinh nghi·ªám l√†m vi·ªác c·ªßa b·∫°n, th√™m c√°c v·ªã tr√≠ c√¥ng vi·ªác kh√°c nhau m√† b·∫°n ƒë√£ n·∫Øm gi·ªØ v√† m√¥ t·∫£ tr√°ch nhi·ªám c·ªßa b·∫°n. ƒê·ª´ng qu√™n l√†m n·ªïi b·∫≠t nh·ªØng th√†nh t·ª±u l·ªõn nh·∫•t c·ªßa b·∫£n th√¢n!"
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "5"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "S·ª≠ d·ª•ng th·ª© t·ª± th·ªùi gian ƒë·∫£o ng∆∞·ª£c",
                text: "B·∫Øt ƒë·∫ßu v·ªõi v·ªã tr√≠ c√¥ng vi·ªác hi·ªán t·∫°i (ho·∫∑c g·∫ßn ƒë√¢y nh·∫•t) c·ªßa b·∫°n, sau ƒë√≥ li·ªát k√™ t·∫•t c·∫£ c√°c v·ªã tr√≠ tr∆∞·ªõc ƒë√≥ ƒë√£ ƒë·∫£m nhi·ªám."
            },
            {
                titleContent : "S·ª≠ d·ª•ng g·∫°ch ƒë·∫ßu d√≤ng (ho·∫∑c c√°c d·∫•u ƒë·∫ßu d√≤ng kh√°c",
                text: "ƒêi·ªÅu n√†y gi√∫p b·∫°n li·ªát k√™ c√°c √Ω m·ªôt c√°ch r√µ r√†ng v√† r√†nh m·∫°ch h∆°n. Ngo√†i ra, khi m√¥ t·∫£ tr√°nh vi·∫øt d√†i v√† nhi·ªÅu ch·ªØ, b·∫°n n√™n vi·∫øt kho·∫£ng 6 - 8 √Ω."
            },
            {
                titleContent : "Th√™m th√†nh t√≠ch",
                text: "Khi m√¥ t·∫£ v·ªÅ m·ªôt v·ªã tr√≠ c√¥ng vi·ªác ƒë√£ ƒë·∫£m nh·∫≠n, b·∫°n n√™n li·ªát k√™ th√™m c√°c th√†nh t√≠ch ƒë√£ ƒë·∫°t ƒë∆∞·ª£c nh·∫±m thu h√∫t nh√† tuy·ªÉn d·ª•ng. H∆°n n·ªØa, b·∫°n n√™n th√™m s·ªë li·ªáu c·ª• th·ªÉ v√† kh√¥ng ƒë∆∞a ra th√¥ng tin nh·∫°y c·∫£m."
            },
            {
                titleContent : "T√≠nh ph√π h·ª£p",
                text: "T√≠nh ph√π h·ª£p th·ªÉ hi·ªán ·ªü vi·ªác b·∫°n ch·ªçn kinh nghi·ªám ph√π h·ª£p v·ªõi v·ªã tr√≠ c√¥ng vi·ªác ƒëang ·ª©ng tuy·ªÉn v√† x√≥a b·ªè m·ªçi th√¥ng tin kh√¥ng c·∫ßn thi·∫øt.Ch√∫ √Ω: S·ª≠ d·ª•ng ƒë·ªông t·ª´ ƒë·ªÉ b·∫Øt ƒë·∫ßu m√¥ t·∫£ m·ªôt kinh nghi·ªám. S·ª≠ d·ª•ng c√°c t·ª´ c√≥ t√°c ƒë·ªông m·∫°nh nh·∫±m l√†m n·ªïi b·∫≠t c√°c ∆∞u ƒëi·ªÉm c·ªßa b·∫°n."
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "üë®‚Äçüíº FULLSTACK .NET DEVELOPER",
                    company: "L·∫≠p Tr√¨nh vi√™n v·ªõi h∆°n 4 nƒÉm kinh nghi·ªám , trong ƒë√≥ c√≥ h∆°n 2 nƒÉm l√†m vi·ªác v·ªõi vai tr√≤ Full-Stack Devoloper, chuy√™n s√¢u v·ªÅ ph√°t tri·ªÉn web v·ªõi c√°c c√¥ng ngh·ªá nh∆∞ .NET core,ReactJS v√† SQL Sever. C√≥ kinh nghi·ªám l√£nh ƒë·∫°o nh√≥m, thi·∫øt k·∫ø h·ªá th·ªëng v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t ph·∫ßn m·ªÅm. ƒêam me t·∫°o ra c√°c gi·∫£i ph√°p ph·∫ßn m·ªÅm s√°ng t·∫°o, ƒë√°p ·ª©ng y√™u c·∫ßu kh√°ch h√†ng v√† ng∆∞·ªùi dung cu·ªëi. M·ª•c ti√™u tr·ªü th√†nh Senior Developer, x√¢y d·ª±ng c√°c d·ª± √°n l·ªõn v√† ƒë√≥ng g√≥p v√† mang l·∫°i gi√° tr·ªã cho doanh nghi·ªáp",
                    time: "10/2016 - Nay",
                    describe: {
                        describe_ti : "M√¥ t·∫£ c√¥ng vi·ªác",
                        content : [
                        "X√¢y d·ª±ng v√† th·ª±c hi·ªán c√°c k·∫ø ho·∫°ch Marketing nh·∫±m ph√°t tri·ªÉn th∆∞∆°ng hi·ªáu, d·ªãch v·ª• cho C√¥ng ty",
                        "B√°o c√°o, ƒë·ªÅ xu·∫•t c√°c ph∆∞∆°ng √°n m·ªõi, hi·ªáu qu·∫£ ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u doanh thu",
                        "L·∫≠p k·∫ø ho·∫°ch ch∆∞∆°ng tr√¨nh qu·∫£ng c√°o, khuy·∫øn m√£i PR... cho h√†ng h√≥a v√† th∆∞∆°ng hi·ªáu C√¥ng ty",
                        "Ch·ªãu tr√°ch nhi·ªám v√† tham m∆∞u cho Gi√°m ƒë·ªëc Marketing m·ªçi ho·∫°t ƒë·ªông li√™n quan ƒë·∫øn ho·∫°t ƒë·ªông Marketing ph√π h·ª£p v·ªõi ƒë·ªãnh h∆∞·ªõng c·ªßa C√¥ng ty"
                        ]
                    },
                    results: {
                        results_ti : "üèÖ Th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c",
                        content : [
                        "Ho√†n th√†nh k·∫ø ho·∫°ch ƒë·∫°t doanh s·ªë KPI ƒë·ªÅ ra, tƒÉng 25% doanh s·ªë so v·ªõi nƒÉm ngo√°i",
                        "G√≥p ph·∫ßn l√™n k·∫ø ho·∫°ch d√†i h·∫°n cho qu√° tr√¨nh ph√°t tri·ªÉn th∆∞∆°ng hi·ªáu c·ªßa C√¥ng ty"
                        ]
                    },
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
    // ----------- Ph·∫ßn Education --------------
    {
        heading: {
            title: "education",
            describe : "Li·ªát k√™ c√°c tr∆∞·ªùng, cao ƒë·∫≥ng v√† ƒë·∫°i h·ªçc m√† b·∫°n ƒë√£ theo h·ªçc. M√¥ t·∫£ tr√¨nh ƒë·ªô h·ªçc v·∫•n b·∫±ng c√°ch th√™m th√¥ng tin v·ªÅ chuy√™n ng√†nh ho·∫∑c c√°c ho·∫°t ƒë·ªông ngo·∫°i kh√≥a m√† b·∫°n ƒë√£ tham gia trong qu√° tr√¨nh h·ªçc."
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "7"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "Tr∆∞·ªùng H·ª£p ∆Øu Ti√™n",
                text: "N·∫øu b·∫°n ƒë√£ c√≥ h∆°n hai nƒÉm kinh nghi·ªám l√†m vi·ªác, ph·∫ßn tr√¨nh ƒë·ªô h·ªçc v·∫•n n√™n ƒë·∫∑t sau kinh nghi·ªám l√†m vi·ªác."
            },
            {
                titleContent : "H·ªçc V·∫•n B·∫£n Th√¢n",
                text: "Th√™m th√¥ng tin v·ªÅ chuy√™n ng√†nh, t√™n tr∆∞·ªùng ƒë·∫°i h·ªçc, th·ªùi gian v√† x·∫øp lo·∫°i b·∫±ng t·ªët nghi·ªáp c·ªßa b·∫°n."
            },
            {
                titleContent : "M·ªôt s·ªë b·∫±ng c·∫•p Kh√≥a h·ªçc c√≥ li√™n quan",
                text: "B·∫°n C≈©ng c√≥ th·ªÉ ƒë∆∞a ra 1 v√†i B·∫±ng C·∫•p li√™n quan ho·∫∑c kh√≥a h·ªçc m√† b·∫°n b·∫°n ƒë√£ ƒë∆∞·ª£c ti·∫øp c·∫≠n. Kh√¥ng qu√° l·∫°m d·ª•ng v√† vi·∫øt qu√° nhi·ªÅu n·∫øu kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt v√† li√™n quan"
            },
            {
                titleContent : "Th√†nh T√≠ch N·ªïi B·∫≠t ",
                text: "B·∫°n c√≥ th·ªÉ th√™m th√†nh t√≠ch h·ªçc t·∫≠p n·∫øu mu·ªën. C√°c th√†nh t√≠ch c√≥ th·ªÉ bao g·ªìm b·∫£ng ƒëi·ªÉm, h·ªçc b·ªïng, gi·∫£i th∆∞·ªüng, ..."
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "Tr∆∞·ªùng ƒê·∫°i h·ªçc FBU",
                    time: "10/2016 - Nay",
                    describe : {
                        describe_ti : "üß© Chuy√™n ng√†nh Qu·∫£n tr·ªã kinh doanh",
                        content : [
                        "X·∫øp lo·∫°i t·ªët nghi·ªáp: Gi·ªèi",
                        "ƒêi·ªÉm t√≠ch l≈©y: 3.2/4",
                        "H·ªá ch√≠nh quy"
                        ]
                    },
                    results : {
                        results_ti : "üèÖ Th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c",
                        content : [
                        "ƒê·∫°t h·ªçc b·ªïng d√†nh cho sinh vi√™n xu·∫•t s·∫Øc t·∫°i t·∫•t c·∫£ 8 k·ª≥ h·ªçc t·∫°i tr∆∞·ªùng",
                        "Nh·∫≠n b·∫±ng khen c·ªßa tr∆∞·ªùng d√†nh cho sinh vi√™n ƒë·∫°t k·∫øt qu·∫£ xu·∫•t s·∫Øc trong h·ªçc t·∫≠p"
                        ]
                    },
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
    // ----------- Ph·∫ßn Skill --------------
    {
        heading: {
            title: "skill",
            describe : "Ph·∫ßn n√†y cho nh√† tuy·ªÉn d·ª•ng bi·∫øt ƒë∆∞·ª£c nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m. C√°c k·ªπ nƒÉng kh√°c nhau nh∆∞ 'Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ' ho·∫∑c 'Tin h·ªçc vƒÉn ph√≤ng' n√™n ƒë∆∞·ª£c th√™m v√†o ƒë·ªÉ th·ªÉ hi·ªán kh·∫£ nƒÉng c·ªßa b·∫°n."
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "4"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "Tr∆∞·ªùng h·ª£p ∆∞u ti√™n",
                text: "N·∫øu CV c·ªßa b·∫°n d√†i h∆°n 1 trang th√¨ b·∫°n n√™n ƒë·∫∑t ph·∫ßn n√†y t·∫°i trang ƒë·∫ßu ti√™n."
            },
            {
                titleContent : "ƒê·∫£m b·∫£o t√≠nh ph√π h·ª£p v√† r√µ r√†ng",
                text: "N√™n l·ª±a ch·ªçn c√°c k·ªπ nƒÉng ph√π h·ª£p v·ªõi c√¥ng vi·ªác ƒëang ·ª©ng tuy·ªÉn,li·ªát k√™ t·ª´ 4-6 k·ªπ nƒÉng quan tr·ªçng nh·∫•t v√† ƒë·∫∑t c√°c k·ªπ nƒÉng quan tr·ªçng nh·∫•t l√™n ƒë·∫ßu danh s√°ch v√† gi·∫£i th√≠ch c√°ch b·∫°n ƒë√£ s·ª≠ d·ª•ng ch√∫ng trong d·ª± √°n th·ª±c t·∫ø c√πng k·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c, ∆Øu ti√™n k·ªπ nƒÉng c√≥ th·ªÉ ch·ª©ng minh qua kinh nghi·ªám l√†m vi·ªác"
            },
            {
                titleContent : "K·ªπ nƒÉng M·ªÅm & K·ªπ nƒÉng chuy√™n m√¥n",
                text: "kƒ© nƒÉng n√™n chia th√†nh 2 ph·∫ßn l√† kƒ© nƒÉng chuy√™n m√¥n v√† kƒ© nƒÉng m·ªÅm ( team work, gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ , l√†m vi·ªác nh√≥m , th√°i ƒë·ªô l√†m vi·ªác , t∆∞ duy ph·∫£n bi·ªán , t∆∞ duy logic , t∆∞ duy tranh lu·∫≠n ,ham h·ªçc h·ªèi  ... )"
            },
            {
                titleContent : "L√†m n·ªïi b·∫≠t CV ƒë·ªÉ g√¢y ·∫•n t∆∞·ª£ng ƒë·ªëi v·ªõi HR",
                text: "Trong m·ªôt v√†i tr∆∞·ªùng h·ª£p c·ª• th·ªÉ, h√£y suy nghƒ© v·ªÅ c√°ch vi·∫øt l√†m cho b·∫°n n·ªïi b·∫≠t h∆°n. V√≠ d·ª•, thay v√¨ li·ªát k√™ k·ªπ nƒÉng Tin h·ªçc vƒÉn ph√≤ng, b·∫°n c√≥ th·ªÉ ƒë·ªÅ c·∫≠p t·ªõi c√°c ki·∫øn th·ª©c n√¢ng cao v·ªÅ Microsoft Excel nh∆∞ Macro hay Pivot table ƒë·ªÉ l·∫≠p b√°o c√°o, th·ªëng k√™."
            }
            ,
            {
                titleContent : "T∆∞ Duy L√Ω T√≠nh",
                text: "t∆∞ duy ph·∫£n bi·ªán , t∆∞ duy logic , t∆∞ duy tranh lu·∫≠n, t∆∞ duy chi·∫øn l∆∞·ª£c v√† ph√¢n t√≠ch , ... "
            }
            ,
            {
                titleContent : "L∆∞u √ù",
                text: "Kh√¥ng N√™n di·ªÖn t·∫£ m·ª©c ƒë·ªô th√†nh th·∫°o c·ªßa 1 ng√¥n ng·ªØ ho·∫∑c kƒ© nƒÉng n√†o ƒë√≥ b·∫±ng c·ªôt ho·∫∑c thang ƒëi·ªÉm ho·∫∑c t∆∞∆°ng t·ª± nh∆∞ v·∫≠y ƒë·ªÉ ƒëo l∆∞·ªùng n√≥ s·∫Ω t·∫°o c·∫£m gi√°c ƒë·∫°i kh√°i v√† ∆∞·ªõc ch·ª´ng kh√¥ng thi·ªán c·∫£m ƒë·ªëi v·ªõi nh√† tuy·ªÉn d·ª•ng"
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "üöÄ K·ªπ NƒÉng Chuy√™n M√¥n",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "M√¥ t·∫£",
                        content : [
                        "HTML, CSS, JavaScript (ReactJS, React-Native, Lit)",
                        "Server (Apache, Nginx, Redis, Memcached, Queue, Log, Crontjob...), Rancher, K8S, Docker",
                        "RESTful API, GraphQL",
                        "Python"
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [                
                        ]
                    },
                },
                {
                    titleExample1: "üöÄ K·ªπ NƒÉng M·ªÅm",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "M√¥ t·∫£",
                        content : [
                        "K·ªπ nƒÉng giao ti·∫øp",
                        "Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ",
                        "T·ª± H·ªçc v√† Nghi√™n C·ª©u",
                        "Qu·∫£n l√Ω th·ªùi gian v√† L√†m Vi·ªác nh√≥m"
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [                
                        ]
                    },
                }
            ],
            [{
                attention: "Ch√∫ √Ω: B·∫°n kh√¥ng n√™n s·ª≠ d·ª•ng thang ƒëi·ªÉm ƒë√°nh gi√° hay bi·ªÉu t∆∞·ª£ng (h√¨nh h·ªçc ho·∫∑c thanh k√©o) ƒë·ªÉ th·ªÉ hi·ªán c√°c c·∫•p ƒë·ªô cho t·ª´ng k·ªπ nƒÉng. ƒêi·ªÅu n√†y kh√¥ng ƒë·ªÉ l·∫°i ·∫•n t∆∞·ª£ng t·ªët cho nh√† tuy·ªÉn d·ª•ng."
            }]
        ]
    },
    // ----------- Ph·∫ßn Project --------------
    {
        heading: {
            title: "project",
            describe : "Ph·∫ßn Project gi√∫p b·∫°n ch·ª©ng minh cho nh√† tuy·ªÉn d·ª•ng r·∫±ng b·∫°n kh√¥ng ch·ªâ h·ªçc l√Ω thuy·∫øt m√† c√≤n bi·∫øt c√°ch √°p d·ª•ng n√≥ v√†o th·ª±c t·∫ø.  Nh√† tuy·ªÉn d·ª•ng c√≥ th·ªÉ nh√¨n v√†o d·ª± √°n ƒë·ªÉ ƒë√°nh gi√° kh·∫£ nƒÉng l√†m vi·ªác v·ªõi c√°c c√¥ng ngh·ªá m√† b·∫°n ƒëang s·ª≠ d·ª•ng"
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "6"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "T·∫ßm quan tr·ªçng c·ªßa d·ª± √°n trong CV",
                text: "Lu√¥n c·ªë g·∫Øng li·ªát k√™ h·∫øt t·∫•t c·∫£ nh·ªØng d·ª± √°n ph√π h·ª£p nh·∫•t m√† b·∫°n ƒë√£ th·ª±c hi·ªán v√† ƒë∆∞a nh·ªØng d·ª± √°n g·∫ßn ƒë√¢y nh·∫•t l√™n tr√™n ƒë·∫ßu. V·ªõi sinh vi√™n, vi·ªác c√≥ c√°c d·ª± √°n c√° nh√¢n ho·∫∑c nh√≥m l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ b√π ƒë·∫Øp cho s·ª± thi·∫øu kinh nghi·ªám l√†m vi·ªác trong ng√†nh"
            },
            {
                titleContent : "C√°ch tr√¨nh b√†y d·ª± √°n trong CV",
                text: "H√£y li·ªát k√™ t√™n c·ªßa d·ª± √°n v√† m·ªôt ƒëo·∫°n m√¥ t·∫£ ng·∫Øn v·ªÅ n·ªôi dung c·ªßa d·ª± √°n c≈©ng nh∆∞ c√°c k·ªπ nƒÉng b·∫°n ƒë√£ ph√°t tri·ªÉn/c√≥ ƒë∆∞·ª£c trong qu√° tr√¨nh th·ª±c hi·ªán."
            },
            {
                titleContent : "L∆∞u √Ω khi m√¥ t·∫£ d·ª± √°n",
                text: "L∆∞u √Ω: ƒê·ª´ng ch·ªâ vi·∫øt t√™n d·ª± √°n - thay v√†o ƒë√≥, h√£y c·ªë g·∫Øng ƒë∆∞a ra m·ªôt b·∫£n t√≥m t·∫Øt v·ªÅ d·ª± √°n, nh·ªØng ki·∫øn th·ª©c b·∫°n ƒë√£ √°p d·ª•ng v√† nh·ªØng k·ªπ nƒÉng b·∫°n ƒë√£ ph√°t tri·ªÉn c√πng d·ª± √°n ƒë√≥."
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "D·ª± √°n MyCV.vn (06/2018 - Nay)",
                    company: "·ª®ng d·ª•ng t·∫°o CV nhanh ch√≥ng, d·ªÖ d√†ng v√† t·∫£i xu·ªëng mi·ªÖn ph√≠ PDF",
                    time: "10/2016 - Nay",
                    describe : {
                        describe_ti : "M√¥ t·∫£ c√¥ng vi·ªác",
                        content : [
                        "Kh√°ch h√†ng: C√¥ng ty CP MyCV",
                        "M√¥ t·∫£ d·ª± √°n: T·∫°o CV nhanh ch√≥ng, d·ªÖ d√†ng v√† t·∫£i xu·ªëng mi·ªÖn ph√≠ PDF",
                        "S·ªë th√†nh vi√™n: 10",
                        "Ch·ª©c v·ª•: Project manager",
                        "Ch·ªãu tr√°ch nhi·ªám: Qu·∫£n l√Ω d·ª± √°n, l√™n quy tr√¨nh d·ª± √°n, giao vi·ªác cho c√°c th√†nh vi√™n",
                        "C√¥ng ngh·ªá s·ª≠ d·ª•ng: Frontend: HTML, CSS, Jquery. Backend: C#, MySQL Server",
                        "..."
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        
                        ]
                    },
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
    // ----------- Ph·∫ßn Awards --------------
    {
        heading: {
            title: "awards",
            describe : "ƒê√¢y c≈©ng l√† m·ªôt ph·∫ßn n·ªôi dung kh√¥ng b·∫Øt bu·ªôc. Li·ªát K√™ C√°c gi·∫£i th∆∞·ªüng th∆∞·ªùng ph·∫£n √°nh nh·ªØng k·ªπ nƒÉng quan tr·ªçng m√† nh√† tuy·ªÉn d·ª•ng t√¨m ki·∫øm, nh∆∞ k·ªπ nƒÉng l·∫≠p tr√¨nh, t∆∞ duy logic, l√†m vi·ªác nh√≥m, ho·∫∑c kh·∫£ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ."
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "9"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "Khi n√†o n√™n th√™m ph·∫ßn Awards v√†o CV?",
                text: "b·∫°n ch·ªâ n√™n th√™m ph·∫ßn n√†y n·∫øu th√†nh t√≠ch/gi·∫£i th∆∞·ªüng kh√¥ng ƒë·ªÅ c·∫≠p ƒë∆∞·ª£c c√πng v·ªõi n·ªôi dung v·ªÅ tr√¨nh ƒë·ªô h·ªçc v·∫•n hay kinh nghi·ªám l√†m vi·ªác."
            },
            {
                titleContent : "C√°ch ph√¢n lo·∫°i v√† tr√¨nh b√†y gi·∫£i th∆∞·ªüng",
                text: "H·ªçc b·ªïng c√≥ th·ªÉ ƒë∆∞·ª£c th√™m v√†o trong ph·∫ßn tr√¨nh ƒë·ªô h·ªçc v·∫•n. Gi·∫£i th∆∞·ªüng b·∫°n nh·∫≠n ƒë∆∞·ª£c cho nh·ªØng n·ªó l·ª±c c·ªßa b·∫°n trong c√¥ng vi·ªác s·∫Ω ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p t·ªõi trong ph·∫ßn kinh nghi·ªám. Tuy nhi√™n, n·∫øu b·∫°n ƒë∆∞·ª£c trao gi·∫£i v√¨ ƒë√£ l√†m m·ªôt ƒëi·ªÅu g√¨ ƒë√≥ ngo√†i ph·∫°m vi c√¥ng vi·ªác th√¥ng th∆∞·ªùng c·ªßa b·∫°n, h√£y nh·∫Øc t·ªõi m·ªôt c√°ch t·ª± h√†o trong ph·∫ßn n·ªôi dung n√†y."
            },
            {
                titleContent : "M√¥ t·∫£ c·ª• th·ªÉ n·ªôi dung gi·∫£i th∆∞·ªüng",
                text: "N·ªôi dung chi ti·∫øt cho t·ª´ng gi·∫£i th∆∞·ªüng bao g·ªìm: Th·ªùi gian (ng√†y nh·∫≠n), quy m√¥ (khu v·ª±c, qu·ªëc gia hay qu·ªëc t·∫ø...), m·ª•c ƒë√≠ch c·ªßa gi·∫£i th∆∞·ªüng, c√°c th√†nh t·ª±u ƒë∆∞·ª£c c√¥ng nh·∫≠n v√† √Ω nghƒ©a c·ªßa ch√∫ng. Ngo√†i ra, h√£y cho m·ªôt nh√† tuy·ªÉn d·ª•ng bi·∫øt r·∫±ng hi·ªán t·∫°i, b·∫°n v·∫´n c√≤n t·∫•t c·∫£ c√°c k·ªπ nƒÉng ƒë√£ mang l·∫°i cho b·∫°n gi·∫£i th∆∞·ªüng ƒë√≥."
            },
            {
                titleContent : "Ch·ªâ li·ªát k√™ c√°c gi·∫£i th∆∞·ªüng li√™n quan",
                text: "H√£y t·∫≠p trung v√†o c√°c gi·∫£i th∆∞·ªüng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn ng√†nh m√† b·∫°n ƒëang mu·ªën xin vi·ªác"
            },
            {
                titleContent : "Ch√∫ √Ω",
                text: "Ch·ªâ li·ªát k√™ c√°c th√†nh t√≠ch trong m·ªôt ph·∫ßn ri√™ng bi·ªát n·∫øu ch√∫ng ƒë·ªß ƒë√°ng ch√∫ √Ω."
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "",
                    company: "",
                    time: "10/2016",
                    describe : {
                        describe_ti : "M√¥ t·∫£ c√¥ng vi·ªác",
                        content : [
                            "Nh√¢n vi√™n c√≥ th√†nh t√≠ch xu·∫•t s·∫Øc trong c√¥ng t√°c thi ƒëua nƒÉm (12/2017)"
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        
                        ]   
                    },
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
     // ----------- Ph·∫ßn M·ª•c Ti√™u C√¥ng Vi·ªác --------------
    {
        heading: {
            title: "goals",
            describe : "M·ª•c ti√™u ngh·ªÅ nghi·ªáp l√† m·ªôt trong nh·ªØng ph·∫ßn quan tr·ªçng nh·∫•t trong CV. ƒê√¢y l√† ph·∫ßn th√¥ng tin b·ªï tr·ª£ cho kinh nghi·ªám v√† k·ªπ nƒÉng c·ªßa b·∫°n c≈©ng nh∆∞ cho nh√† tuy·ªÉn d·ª•ng th·∫•y ƒë∆∞·ª£c tham v·ªçng c·ªßa b·∫°n ƒë·ªëi v·ªõi c√¥ng vi·ªác ƒëang ·ª©ng tuy·ªÉn."
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "3"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "ƒê·∫∑t m·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n ·ªü ƒë√¢u",
                text: "M·ª•c ti√™u ngh·ªÅ nghi·ªáp n√™n ƒë∆∞·ª£c tr√¨nh b√†y ng·∫Øn g·ªçn v√† h·∫•p d·∫´n. ƒêi·ªÅu n√†y khi·∫øn nh√† tuy·ªÉn d·ª•ng th·∫•y ƒë∆∞·ª£c l√Ω do t·∫°i sao h·ªç n√™n nh·∫≠n b·∫°n h∆°n b·∫•t k·ª≥ ai kh√°c.",
                text2 : "Th√¥ng th∆∞·ªùng, c√°c m·ª•c ti√™u n√†y ƒë∆∞·ª£c ƒë·∫∑t d∆∞·ªõi ph·∫ßn t√™n v√† th√¥ng tin c√° nh√¢n c·ªßa b·∫°n trong CV, tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu c√°c n·ªôi dung chi ti·∫øt v·ªÅ tr√¨nh ƒë·ªô h·ªçc v·∫•n, k·ªπ nƒÉng v√† kinh nghi·ªám c·ªßa b·∫°n."
            },
            {
                titleContent : "Ng·∫Øn g·ªçn",
                text: "M·ªôt CV th∆∞·ªùng ƒë∆∞·ª£c tr√¨nh b√†y trong kho·∫£ng 1-2 trang, v√¨ v·∫≠y m·ªói ph·∫ßn tr√¨nh b√†y n√™n x√∫c t√≠ch v√† ƒëi th·∫≥ng v√†o tr·ªçng t√¢m. M·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n th·∫≠m ch√≠ c√≤n c√≥ vai tr√≤ quan tr·ªçng h∆°n, v√¨ n√≥ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc t·∫•t c·∫£ c√°c th√¥ng tin kh√°c, v√† ƒë√≥ l√† ph·∫ßn ƒë·∫ßu ti√™n c√°c nh√† tuy·ªÉn d·ª•ng ƒë·ªçc khi c·∫ßm CV c·ªßa b·∫°n.",
                text2 : "M·ªôt m·ª•c ti√™u ngh·ªÅ nghi·ªáp ng·∫Øn g·ªçn nh∆∞ng h·∫•p d·∫´n s·∫Ω th√¥i th√∫c nh√† tuy·ªÉn d·ª•ng t√¨m hi·ªÉu nh·ªØng n·ªôi dung c√≤n l·∫°i trong CV. V√¨ v·∫≠y, b·∫°n n√™n tr√¨nh b√†y trong ph·∫°m vi kh√¥ng qu√° nƒÉm d√≤ng."            
            },
            {
                titleContent : "H∆∞·ªõng ƒë·∫øn s·ª± ph√°t tri·ªÉn d√†i h·∫°n",
                text: "S·ª± r√µ r√†ng v√† trung th·ª±c v·ªÅ tham v·ªçng c·ªßa b·∫£n th√¢n mang l·∫°i l·ª£i √≠ch cho c·∫£ b·∫°n v√† c√°c nh√† tuy·ªÉn d·ª•ng. B·∫°n kh√¥ng ch·ªâ c√≥ th·ªÉ tr√°nh c√°c cu·ªôc tr√≤ chuy·ªán kh√≥ x·ª≠ ti·ªÅm ·∫©n v·ªõi c√°c ƒë·ªìng nghi·ªáp v√† nh√† tuy·ªÉn d·ª•ng trong t∆∞∆°ng lai, m√† c√°c nh√† tuy·ªÉn d·ª•ng c≈©ng bi·∫øt c√°ch l√†m th·∫ø n√†o ƒë·ªÉ gi√∫p b·∫°n ph√π h·ª£p h∆°n v·ªõi v·ªã tr√≠ c√¥ng vi·ªác, ch·∫≥ng h·∫°n nh∆∞ cung c·∫•p c√°c c∆° h·ªôi h·ªçc t·∫≠p v√† ph√°t tri·ªÉn ph√π h·ª£p h∆°n v√† ƒë∆∞a ra nh·ªØng l·ªùi khuy√™n thi·∫øt th·ª±c nh·∫•t cho b·∫°n."
                ,text2 : "Cho th·∫•y b·∫°n c√≥ tinh th·∫ßn c·∫ßu ti·∫øn, mu·ªën h·ªçc h·ªèi v√† g·∫Øn b√≥ v·ªõi c√¥ng ty."
            },
            {
                titleContent : "C·ª• th·ªÉ h√≥a m·ª•c ti√™u ngh·ªÅ nghi·ªáp cho t·ª´ng v·ªã tr√≠ c√¥ng vi·ªác",
                text: "Gi·ªëng nh∆∞ b·∫°n c·∫ßn ƒëi·ªÅu ch·ªânh s∆° y·∫øu l√Ω l·ªãch c·ªßa m√¨nh sao cho ph√π h·ª£p v·ªõi t·ª´ng c√¥ng ty v√† v·ªã tr√≠ ·ª©ng tuy·ªÉn, b·∫°n c≈©ng s·∫Ω c·∫ßn c·ª• th·ªÉ h√≥a m·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa m√¨nh cho t·ª´ng v·ªã tr√≠ kh√°c nhau.",
                text2: "M·ªôt n·ªôi dung chung chung s·∫Ω kh√¥ng gi√∫p b·∫°n th√†nh c√¥ng trong vi·ªác thu h√∫t nh√† tuy·ªÉn d·ª•ng, th·∫≠m ch√≠ kh√¥ng ph√π h·ª£p ƒë·ªÉ √°p d·ª•ng trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p c·ª• th·ªÉ."
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "üìÖ Ng·∫Øn H·∫°n",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "M√¥ t·∫£ c√¥ng vi·ªác",
                        content : [
                            "√Åp d·ª•ng nh·ªØng kinh nghi·ªám v·ªÅ k·ªπ nƒÉng giao ti·∫øp v√† b√°n h√†ng, s·ª± hi·ªÉu bi·∫øt v·ªÅ t√¢m l√Ω v√† nhu c·∫ßu kh√°ch h√†ng ƒë·ªÉ tr·ªü th√†nh m·ªôt nh√¢n vi√™n kinh doanh xu·∫•t s·∫Øc t·∫°i c√¥ng ty."
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        ]
                    },
                },
                {
                    titleExample1: "üìÖ D√†i H·∫°n",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "M√¥ t·∫£ c√¥ng vi·ªác",
                        content : [
                            "Tr·ªü th√†nh tr∆∞·ªüng ph√≤ng kinh doanh/gi√°m ƒë·ªëc kinh doanh. S·∫µn s√†ng d·∫´n, chia s·∫ª ki·∫øn th·ª©c, kinh nghi·ªám cho c√°c th√†nh vi√™n nh·∫±m h∆∞·ªõng t·ªõi m·ª•c ti√™u v√† hi·ªáu qu·∫£ cao nh·∫•t cho c√¥ng ty."
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        ]
                    },
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
    // ----------- Ph·∫ßn Ch·ª©ng Ch·ªâ --------------
    {
        heading: {
            title: "certificate",
            describe : "N·∫øu ƒë·∫°t ƒë∆∞·ª£c b·∫•t k·ª≥ ch·ª©ng ch·ªâ n√†o, h√£y ch·∫Øc ch·∫Øn b·∫°n li·ªát k√™ trong ph·∫ßn n·ªôi dung n√†y. ƒê√¢y l√† m·ªôt c√°ch tuy·ªát v·ªùi ƒë·ªÉ x√¢y d·ª±ng ni·ªÅm tin cho nh√† tuy·ªÉn d·ª•ng, gi√∫p nh√† tuy·ªÉn d·ª•ng ƒë√°nh gi√° tr√¨nh ƒë·ªô h·ªçc v·∫•n v√† nƒÉng l·ª±c chuy√™n m√¥n c·ªßa b·∫°n"
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "8"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "ƒê∆∞a ch·ª©ng ch·ªâ quan tr·ªçng nh·∫•t l√™n tr√™n ƒë·∫ßu",
                text: "Tuy nhi√™n, l∆∞u √Ω r·∫±ng b·∫°n ch·ªâ n√™n th√™m c√°c ch·ª©ng ch·ªâ c√≥ li√™n quan t·ªõi v·ªã tr√≠ m√† b·∫°n ƒëang ·ª©ng tuy·ªÉn. ƒê·∫∑t ch·ª©ng ch·ªâ quan tr·ªçng nh·∫•t ·ªü ƒë·∫ßu danh s√°ch. v√† ƒë·∫∑c bi·ªát l∆∞u √Ω Kh√¥ng li·ªát k√™ ch·ª©ng ch·ªâ kh√¥ng li√™n quan, thi·∫øu uy t√≠n"
            },
            {
                titleContent : "Li·ªát K√™ v√† Th√¥ng Tin ƒë·∫ßy ƒë·ªß v·ªÅ ch·ª©ng ch·ªâ & b·∫±ng c·∫•p",
                text: "Trong m·ªôt s·ªë ng√†nh ngh·ªÅ, ch·ª©ng ch·ªâ c√≥ t·∫ßm quan tr·ªçng nh∆∞ b·∫±ng c·∫•p h·ªçc thu·∫≠t. Ch·∫≥ng h·∫°n nh∆∞ ch·ª©ng ch·ªâ ACCA cho vi·ªác chuy√™n gia trong lƒ©nh v·ª±c k·∫ø to√°n ‚Äì t√†i ch√≠nh ƒë∆∞·ª£c c·∫£ th·∫ø gi·ªõi c√¥ng nh·∫≠n v·ªÅ tr√¨nh ƒë·ªô, nghi·ªáp v·ª• chuy√™n ng√†nh.",
                text2: "ƒê·ªëi v·ªõi m·ªói ch·ª©ng nh·∫≠n, b·∫°n c·∫ßn li·ªát k√™ t·ªï ch·ª©c ch·ª©ng nh·∫≠n, lo·∫°i h√¨nh v√† lƒ©nh v·ª±c chuy√™n m√¥n c≈©ng nh∆∞ ng√†y nh·∫≠n ch·ª©ng ch·ªâ."
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "üéì Ch·ª©ng ch·ªâ ti·∫øng Anh (07/2018)",
                    company: "",
                    time: "10/2016",
                    describe : {
                        describe_ti : "M√¥ t·∫£ c√¥ng vi·ªác",
                        content : [
                            "C1 / IELTS 7.5 / TOEIC 900 / ..."
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        
                        ]   
                    },
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
    // ----------- Ph·∫ßn Ng√¥n Ng·ªØ --------------
    {
        heading: {
            title: "language",
            describe : "N·∫øu b·∫°n bi·∫øt ngo·∫°i ng·ªØ, h√£y ƒë∆∞a ch√∫ng v√†o ph·∫ßn n√†y v√¨ n√≥ s·∫Ω l√† l·ª£i th·∫ø cho b·∫°n. B·∫°n c√≥ th·ªÉ ƒë√°nh gi√° tr√¨nh ƒë·ªô ngo·∫°i ng·ªØ b·∫±ng c√°ch chia c·∫•p ƒë·ªô ho·∫∑c th√™m m·ªôt m√¥ t·∫£ ng·∫Øn (v√≠ d·ª•: c·∫•p ƒë·ªô B2 ho·∫∑c th√¥ng th·∫°o)."
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "9"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "Ch·ªâ li·ªát k√™ nh·ªØng ng√¥n ng·ªØ th·ª±c s·ª± c√≥ th·ªÉ s·ª≠ d·ª•ng",
                text: "Kh√¥ng th√™m ngo·∫°i ng·ªØ n·∫øu b·∫°n ch∆∞a ƒë·ªß ki·∫øn th·ª©c ƒë·ªÉ giao ti·∫øp."
            },
            {
                titleContent : "M√¥ t·∫£ b·∫±ng nh·ªØng con s·ªë c·ª• th·ªÉ",
                text: "Kh√¥ng n√™n ƒë√°nh gi√° tr√¨nh ƒë·ªô ngo·∫°i ng·ªØ theo thang ƒëi·ªÉm t·ª´ 1 - 5. H√£y n√≥i c·ª• th·ªÉ s·ªë ƒëi·ªÉm b·∫°n ƒë·∫°t ƒë∆∞·ª£c (800 ielts) ho·∫∑c kh·∫£ nƒÉng c·ªßa b·∫°n (nghe - n√≥i - ƒë·ªçc - vi·∫øt t·ªët, giao ti·∫øp th√†nh t·∫°o, ...)",
                text2 : "B·∫°n c√≥ th·ªÉ m√¥ t·∫£ m·ª©c ƒë·ªô th√¥ng th·∫°o c·ªßa b·∫°n trong t·ª´ng ng√¥n ng·ªØ"
            },
            {
                titleContent : "L∆∞u √ù",
                text: "Kh√¥ng nh·∫ßm l·∫´n gi·ªØa ng√¥n ng·ªØ l·∫≠p tr√¨nh & ng√¥n ng·ªØ giao ti·∫øp ( chuy√™n ng√†nh CNTT )"
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "Ti·∫øng Anh",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "M√¥ t·∫£",
                        content : [
                            "TOEIC 770 ,Th√†nh th·∫°o 4 k·ªπ nƒÉng: Nghe, n√≥i, ƒë·ªçc, vi·∫øt"
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        
                        ]   
                    }
                }
            ],
            [{
                attention: ""
            }]
        ]
    },
    // ----------- Ph·∫ßn Kh√°c ----------------
    {
        heading: {
            title: "another",
            describe : "Ngo√†i C√°c ph·∫ßn ƒë√£ ƒë∆∞·ª£c x√°c ƒëinh b·∫°n c≈©ng c√≥ th·ªÉ th√™m 1 ph·∫ßn ho√†n to√†n m·ªõi c·ªßa ri√™ng b·∫°n"
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "10"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "L∆∞u √Ω Quan Tr·ªçng",
                text: "N·∫øu CV c·ªßa b·∫°n ƒë√£ qu√° d√†i th√¨ b·∫°n kh√¥ng n√™n th√™m ph·∫ßn n√†y n·ªØa n·∫øu kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt"
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "",
                        content : [
                            ""
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        
                        ]   
                    }
                }
            ],
            [
            {
                attention: ""
            }
            ]
        ]
    },
    // ----------- Ph·∫ßn in4 ------------------
    {
        heading: {
            title: "information",
            describe : "Ch·ªâ ƒëi·ªÅn c√°c th√¥ng tin b·∫°n mu·ªën th·ªÉ hi·ªán tr√™n CV. Kh√¥ng th√™m v√†o nh·ªØng n·ªôi dung kh√¥ng li√™n quan t·ªõi v·ªã tr√≠ c√¥ng vi·ªác ƒëang ·ª©ng tuy·∫øn."
            ,rank : {
                title : "M·ª©c ƒë·ªô ∆Øu Ti√™n",
                top : "1"
            }
        },
        content: [
            // Ph·∫ßn n·ªôi dung 
            [
            {
                titleContent : "V·ªã tr√≠ ·ª©ng tuy·ªÉn",
                text: "V·ªã tr√≠ ·ª©ng tuy·ªÉn th∆∞·ªùng ƒë∆∞·ª£c th√™m v√†o d∆∞·ªõi ph·∫ßn t√™n c·ªßa b·∫°n gi√∫p t·∫°o ·∫•n t∆∞·ª£ng ban ƒë·∫ßu v·ªõi nh√† tuy·ªÉn d·ª•ng v·ªÅ m·ªôt CV chuy√™n nghi·ªáp."
            },
            {
                titleContent : "·∫¢nh c√° nh√¢n",
                text: "B·∫°n n√™n ch·ªçn h√¨nh ·∫£nh c√≥ n·ªÅn s√°ng, tr·ª±c di·ªán, nghi√™m t√∫c. N√™n m·∫∑c trang ph·ª•c c√¥ng s·ªü v·ªõi c√°c ng√†nh ngh·ªÅ nh∆∞: ng√¢n h√†ng, lu·∫≠t, c∆° quan nh√† n∆∞·ªõc, ... v√† trang ph·ª•c l·ªãch s·ª± v·ªõi c√°c ng√†nh ngh·ªÅ kh√°c. N√™n m·ªâm c∆∞·ªùi nh·∫π khi ch·ª•p ·∫£nh ƒë·ªÉ c√≥ thi·ªán c·∫£m h∆°n."
            },
            {
                titleContent : "Th√¥ng tin li√™n h·ªá",
                text: "S·ªë ƒëi·ªán tho·∫°i v√† ƒë·ªãa ch·ªâ th∆∞ ƒëi·ªán t·ª≠ l√† c√°c th√¥ng tin c·∫ßn thi·∫øt trong ph·∫ßn n·ªôi dung n√†y. B·∫°n kh√¥ng c·∫ßn cung c·∫•p ƒë·ªãa ch·ªâ nh√† ri√™ng n·∫øu nh√† tuy·ªÉn d·ª•ng kh√¥ng y√™u c·∫ßu. (B·∫°n n√™n s·ª≠ d·ª•ng ƒë·ªãa ch·ªâ th∆∞ ƒëi·ªán t·ª≠ mang t√≠nh chuy√™n nghi·ªáp, n√™n ch·ª©a h·ªç v√† t√™n c·ªßa b·∫°n)"
            },
            {
                titleContent : "M·∫°ng x√£ h·ªôi",
                text: "B·∫°n c√≥ th·ªÉ th√™m ƒë∆∞·ªùng d·∫´n t·ªõi website c√° nh√¢n c≈©ng nh∆∞ c√°c t√†i kho·∫£n m·∫°ng x√£ h·ªôi vi·ªác l√†m nh∆∞ Linkedin,Github,... m√† b·∫°n ƒëang s·ª≠ d·ª•ng. (Kh√¥ng n√™n s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi c√° nh√¢n nh∆∞ Facebook v√¨ c√≥ th·ªÉ trang c√° nh√¢n c·ªßa b·∫°n s·∫Ω ch·ª©a nh·ªØng th√¥ng tin ƒë·ªùi t∆∞ kh√¥ng li√™n quan t·ªõi c√¥ng vi·ªác)"
            }
            ],
            // Ph·∫ßn v√≠ d·ª•
            [
                {
                    titleExample1: "M·∫°ng x√£ h·ªôi",
                    company: "",
                    time: "",
                    describe : {
                        describe_ti : "",
                        content : [
                            "http://www.linkedin.com/in/name-surname/",
                            "http://www.linkedin.com/in/name-surname-5x551234/"
                        ]
                    },
                    results : {
                        results_ti : "",
                        content : [
                        
                        ]   
                    }
                }
            ],
            [
            {
                attention: "Ch√∫ √Ω: N·∫øu b·∫°n ƒëang ·ª©ng tuy·ªÉn v√†o c√°c c√¥ng ty c√≥ li√™n quan t·ªõi c√°c qu·ªëc gia nh∆∞ M·ªπ, Anh, b·∫°n kh√¥ng n√™n th√™m h√¨nh ·∫£nh c√° nh√¢n v√¨ ƒë√¢y kh√¥ng ph·∫£i l√† th√≥i quen c·ªßa khu v·ª±c n√†y (ch·ªâ th√™m khi c√≥ s·ª± y√™u c·∫ßu)."
            }
            ]
        ]
    }
]

function suggest_CV(ele_in_suggest){
    instruct.innerHTML = `<div class="heading_suggest">
        <h2> ${ele_in_suggest.heading.title}</h2>
    </div>
    <div>
        <p style="margin-bottom: 20px"> üóùÔ∏è ${ele_in_suggest.heading.describe}</p>
    </div>
    <div class="rank" style="display: flex;justify-content: space-between;">
        <p> <i class="fa-solid fa-trophy"></i> ${ele_in_suggest.heading.rank.title}</p>
        <span> ${ele_in_suggest.heading.rank.top}</span>
    </div>
    `
        ele_in_suggest.content[0].forEach(elem=>{
            instruct.innerHTML += `
                <div class="box_progress">
                    <span><i class="fa-solid fa-star"></i></span>
                    <h3>${elem.titleContent}</h3>
                </div>
                <div style="margin-bottom: 20px;"> <p> ‚ú® ${elem.text}</p></div>
                <div style="margin-bottom: 20px;"> <p> ${elem.text2 ? "‚ú® " + elem.text2 : ""}</p></div>
            `
        })
        if(ele_in_suggest.heading.title == "another"){
            return;
        }
        else{
            instruct.innerHTML += `
                    <h2 class="heading_suggest" style="margin-bottom: 20px;"> V√≠ D·ª• </h2>
            `
            ele_in_suggest.content[1].forEach(elem=>{
                console.log(elem);
                instruct.innerHTML += `
                    <div style="margin-bottom: 12px;"> <b>${elem.titleExample1}</b> </div>
                    <div style="margin-bottom: 12px;"> <p>${elem.company || ""}</p> </div>
                    <div style="margin-bottom: 12px;"> <p> ${elem.time !== "" ? "<b>üïê Time : </b>" + elem.time : ""}</p> </div>
                    <div style="margin-bottom: 12px;"> <b>${elem.describe.describe_ti || ""}</b> </div>
                `
                if(elem.describe.content.length > 0){
                    elem.describe.content.forEach(ele_in_describe=>{
                        instruct.innerHTML += `
                            <div style="margin-bottom: 12px;"> <p>${ele_in_describe}</p></div>
                        `
                    })
                }
                instruct.innerHTML += `
                    <div style="margin-bottom: 12px;"> <b>${elem.results.results_ti || "" }</b></div>
                `
                if(elem.results.content.length > 0){
                    elem.results.content.forEach(ele_in_results=>{
                        instruct.innerHTML += `
                            <div style="margin-bottom: 12px;"> <p>${ele_in_results}</p></div>
                        `
                    })
                }
            })
            instruct.innerHTML += `${ele_in_suggest.content[2].attention || ""}`
        }
    }
// khi click v√†o th√¨ hi·ªán lu√¥n vi·ªÅn xanh v√† sao xanh

function getTemplateCV_Now(){
    let first_paper_now = document.querySelector(".paper");
    // console.log(first_paper_now.getAttribute("class").split(" "));
    if(first_paper_now.getAttribute("class").split(" ").length <= 1){
        // console.log("L·ªçt V√†o m·∫´u 0 r·ªìi !!");
        return "paper_mau0";
    }
    else{
        // console.log("L·ªçt V√†o m·∫´u kh√°c 0 r·ªìi !!");
        return first_paper_now.getAttribute("class").split(" ")[1];
    }
}
// ch√≠nh l√≥ 
function getRemainingHeight(section_measuring) {
    let paper = section_measuring.closest(".paper");
    if(section_measuring.classList.contains("paper")){
        paper = section_measuring;
    }
    const paperHeight = paper.offsetHeight;
    const headingHeight = paper.querySelector('.heading_paper')?.offsetHeight || 0;
    const titleHeading = paper.querySelector('.title_HD')?.offsetHeight || 0;
    const phanPhu = paper.querySelector('.phan_phu')?.offsetHeight || 0;
    // l·∫•y ra ph√†n padding bottom c·ªßa m·ªói gi·∫•y 
    const styles_ctCV = window.getComputedStyle(paper);
    let paddingBottom = parseInt(styles_ctCV.getPropertyValue("padding-bottom")); // 32px  
    let content_CV = paper.querySelector(".content_CV");
    let part_ct_inCv = paper.querySelectorAll(".part_ct");
    let bug_length = [];

    // m·∫´u 0; m·∫´u 1; m·∫´u 2 ; m·∫´u 3 ; 

    paddingBottom = parseInt(styles_ctCV.getPropertyValue("padding-bottom")); // 32px 
    margin_part_ct_inCv = part_ct_inCv.length * 12;
    let check;
    // l·∫•y ra ph·∫ßn margin bottom c·ªßa ph·∫ßn heading 
    if(getTemplateCV_Now() == "paper_mau1" || getTemplateCV_Now() == "paper_mau8"){ 
        const get_styles_hdCV = window.getComputedStyle(document.querySelector(".title_HD")) || 0;
        const styles_hdCV = parseInt(get_styles_hdCV.getPropertyValue("margin-bottom")) || 0;

        bug_length = content_CV.querySelectorAll(".title");
        if(getTemplateCV_Now() == "paper_mau8"){
            if(!paper.previousElementSibling.classList.contains("paper")){
                return paperHeight - titleHeading - paddingBottom * 2 - styles_hdCV - bug_length.length * 12 - 24 - margin_part_ct_inCv;
            }
        }
        return paperHeight - titleHeading - paddingBottom * 2 - styles_hdCV - margin_part_ct_inCv - bug_length.length * 10;
    }
    else if(getTemplateCV_Now() == "paper_mau3"){ 
        bug_length = content_CV.querySelectorAll(".title");
        return paperHeight - phanPhu - paddingBottom * 2 - bug_length.length*12 - margin_part_ct_inCv - margin_part_ct_inCv;
    }
    else if(getTemplateCV_Now() == "paper_mau10" ){
        console.log("ƒêang ·ªü m·∫´u 10 ƒë√¢y !");
        let title_hd = paper.querySelector(".title_HD");
        let in4_in_ct = paper.querySelector(".information");
        const get_styles_ctCV = window.getComputedStyle(document.querySelector(".content_CV"));
        let height_pdt = parseInt(get_styles_ctCV.getPropertyValue("padding-top"));
        if(title_hd && in4_in_ct){
            let h_title_hd = title_hd.offsetHeight || 0;
            let h_in4_in_ct = in4_in_ct.offsetHeight || 0;
            console.log("V√†o ƒë√¢y");
            return paperHeight - h_title_hd - h_in4_in_ct - paddingBottom - bug_length.length * 12 - height_pdt - 50 - margin_part_ct_inCv;
        }
        else{
            return paperHeight - paddingBottom - bug_length.length * 12 - height_pdt - margin_part_ct_inCv - 100;
        }
    }
    else if(getTemplateCV_Now() == "paper_mau6"){
        const get_styles_hdCV = window.getComputedStyle(document.querySelector(".heading_paper"));
        let height_mgbt = parseInt(get_styles_hdCV.getPropertyValue("margin-bottom"));
        const get_styles_ctCV = window.getComputedStyle(document.querySelector(".content_CV"));
        let height_pdt = parseInt(get_styles_ctCV.getPropertyValue("padding-top"));
        bug_length = content_CV.querySelectorAll(".title");

        return paperHeight - headingHeight - paddingBottom - height_mgbt - bug_length.length*16 - height_pdt - margin_part_ct_inCv;
    }
    else if(getTemplateCV_Now() == "paper_mau7"){
        const get_styles_hdCV = window.getComputedStyle(document.querySelector(".heading_paper"));
        let height_mgbt = parseInt(get_styles_hdCV.getPropertyValue("margin-bottom"));
        const get_styles_ctCV = window.getComputedStyle(document.querySelector(".content_CV"));
        let height_pdt = parseInt(get_styles_ctCV.getPropertyValue("padding-top"));
        bug_length = content_CV.querySelectorAll(".title");
        if(paper.querySelector(".introduce")){
            return paperHeight - headingHeight - paddingBottom - height_mgbt - bug_length.length*16 - height_pdt - margin_part_ct_inCv;
        }
        return paperHeight - headingHeight - paddingBottom - height_mgbt - bug_length.length*16 - height_pdt - margin_part_ct_inCv - 160;
    }
    else if(getTemplateCV_Now() == "paper_mau9"){
        const get_styles_hdCV = window.getComputedStyle(document.querySelector(".heading_paper"));
        let height_mgbt = parseInt(get_styles_hdCV.getPropertyValue("margin-bottom"));

        const get_styles_ctCV = window.getComputedStyle(document.querySelector(".content_CV"));
        let height_pdt = parseInt(get_styles_ctCV.getPropertyValue("padding-top"));
        bug_length = content_CV.querySelectorAll(".title");

        if(paper.querySelector(".introduce ")){
            return paperHeight - headingHeight - paddingBottom - height_mgbt - bug_length.length*8 - height_pdt - margin_part_ct_inCv;
        }
        return paperHeight - headingHeight - paddingBottom - height_mgbt - bug_length.length*16 - height_pdt - margin_part_ct_inCv;
    }
    else{
        const get_styles_hdCV = window.getComputedStyle(document.querySelector(".heading_paper"));
        const styles_hdCV = parseInt(get_styles_hdCV.getPropertyValue("margin-bottom"));
        const get_styles_ctCV = window.getComputedStyle(document.querySelector(".content_CV"));
        let height_pdt = parseInt(get_styles_ctCV.getPropertyValue("padding-top"));
        check = styles_hdCV;
        
        bug_length = content_CV.querySelectorAll(".title");
        part_ct_mgt =  section_measuring.querySelectorAll(".part_ct");
        if(getTemplateCV_Now() == "paper_mau11"){
            let hei_anh_CV = 0
            if(section_measuring.classList.contains("haft-left")){
                hei_anh_CV = paper.querySelector(".anh_CV").offsetHeight;
            }
            return paperHeight - headingHeight - paddingBottom - (bug_length.length * 12) - (part_ct_mgt.length * 12) - height_pdt - hei_anh_CV - margin_part_ct_inCv;
        }
        if(getTemplateCV_Now() == "paper_mau12"){
            let hei_anh_CV = 0
            if(section_measuring.classList.contains("haft-left")){
                hei_anh_CV = paper.querySelector(".anh_CV").offsetHeight;
            }
            return paperHeight - headingHeight - paddingBottom - (bug_length.length * 12) - (part_ct_mgt.length * 12) - height_pdt - hei_anh_CV - margin_part_ct_inCv;
        }
        if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
            let getalltagLi = paper.querySelectorAll("p");
            return paperHeight - headingHeight - paddingBottom - check - (bug_length.length * 12) - margin_part_ct_inCv;
        }
        else return paperHeight - headingHeight - paddingBottom - check - (bug_length.length * 12) - margin_part_ct_inCv;
    } 
}

const LAYOUT_CONFIG = {
    paperHeight: 1072,
    headerWidth: 210,
    padding: {
        top: 32,
        bottom: 32,
        left: 16,
        right: 16
    }
}; 

function getColorCVNow(){
    let getMauCvnow,colorNow;
    getMauCvnow = getTemplateCV_Now();

    if(getMauCvnow == "paper_mau1"){
        getMauCvnow = paper.querySelector(".half-left").style.backgroundColor;
        return getMauCvnow;
    }
    else if(getMauCvnow == "paper_mau5" || getMauCvnow == "paper_mau8" || getMauCvnow == "paper_mau10" || getMauCvnow == "paper_mau2"){
        if(getMauCvnow == "paper_mau5" || getMauCvnow == "paper_mau2"){
            getMauCvnow = paper.querySelector(".title_HD").style.color;
            return getMauCvnow;
        }
        else{
            getMauCvnow = paper.querySelector(".title_HD").style.backgroundColor;
            return getMauCvnow;
        }
    }
    else if(getMauCvnow == "paper_mau7"){
        getMauCvnow = paper.querySelector(".anh_CV").style.backgroundColor;
        return getMauCvnow;
    }
    else{
        getMauCvnow = paper.querySelector(".introduce").style.backgroundColor;
        return getMauCvnow;
    }
}
function getFont_n_fontSize(newpaper){
    if(paper.style.fontFamily){
        newpaper.style.fontFamily = paper.style.fontFamily;
    }
    else{
        newpaper.style.fontFamily = "'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif";
    }
    if(paper.style.fontSize){
        newpaper.style.fontSize = paper.style.fontSize;
    }
    else{
        newpaper.style.fontSize = "13.5px";
    }
}
// h√†m t·∫°o gi·∫•y 
function createNewPaper() {
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper');
    // newPaper.style.marginTop = '32px';
    // newPaper.style.padding = '32px';

    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','half-left');
    // newHeading.style.display = "none";

    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);

    const newContent = document.createElement('div');

    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left");
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");

    newContent.classList.add('content_CV','part_in_paper','part_two');
    newContent.style.padding = `${LAYOUT_CONFIG.padding.top}px 0`;
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);

    newPaper.appendChild(newHeading);
    newPaper.appendChild(newContent);
    newHeading.style.display = "none";
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper1() {
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau1');
    newPaper.style.marginTop = '32px';
    
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','half-left');
    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);

    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper','part_two');

    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");

    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newHeading.style.backgroundColor = getColorCVNow();
    newPaper.appendChild(newHeading);
    newPaper.appendChild(newContent);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper2() {
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau2');
    newPaper.style.marginTop = '32px';
    newPaper.style.padding = '32px';
    
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','half-left');
            const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);

    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper','part_two');

    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");

    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);

    newPaper.appendChild(newHeading);
    newPaper.appendChild(newContent);
    newHeading.style.display = "none";
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper3(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau3');
    newPaper.style.marginTop = '32px';
    
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','half-left','hd_mau3');
            const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);

    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper','part_two');
    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    
    newPaper.appendChild(newHeading);
    newPaper.appendChild(newContent);
    newHeading.style.backgroundColor = getColorCVNow();
    newHeading.style.opacity = "0.42";
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper4(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau4');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','half-left','heading_paper_mau4');
        const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";
    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('half-left');
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper5(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau4');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','half-left','heading_paper_mau5');
    const halfLeft = document.createElement('section');

    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('part_one');
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper6(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau6');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        // paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one','heading_paper_mau6');
        const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";
    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('part_one');
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper7(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau7');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one','heading_paper_mau7');
    const halfLeft = document.createElement('section');
    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('part_one');
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper8() {
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau8');
    newPaper.style.marginTop = '32px';
    
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one','half-left');
    Object.assign(newHeading.style, {
        width: `${LAYOUT_CONFIG.headerWidth}px`,
        height: `${LAYOUT_CONFIG.paperHeight}px`,
        display : "block"
    });
    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper','part_two');
    Object.assign(newContent.style, {
        width: `calc(100% - ${LAYOUT_CONFIG.headerWidth}px)`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });
    const halfLeft = document.createElement('section');
    // halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);  
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper9(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau9');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one','half-left');
        const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";
    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('part_one');
    Object.assign(halfLeft.style, {
        width: `40%`,
        height: `${LAYOUT_CONFIG.paperHeight - 64}px`,
        paddingRight: `12px`,
        display : "block",
        borderRight : `1px solid rgb(221, 221, 221)`,
        left: "0"
    });
    
    halfRight.classList.add('part_two');
    Object.assign(halfRight.style, {
        width: `calc(100% - ${LAYOUT_CONFIG.headerWidth}px)`,
        paddingLeft: `12px`,
        width: `60%`
    });
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper10() {
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau10');
    newPaper.style.marginTop = '32px';
    
    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one');
    Object.assign(newHeading.style, {
        width: `30%`,
        height: `${LAYOUT_CONFIG.paperHeight}px`,
        paddingLeft: `${LAYOUT_CONFIG.padding.left}px`,
        paddingRight: `12px`,
        display : "block"
    });

    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper','part_two');
    Object.assign(newContent.style, {
        width: `calc(100% - 30%)`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });

    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);

    const newAnhCV = document.createElement('div');
    newAnhCV.classList.add('anh_CV');
    Object.assign(newAnhCV.style, {
        left: `50%`,
        transform: `translateX(-50%)`,
        height: `100%`
    });
    
    newHeading.appendChild(newAnhCV);
    newPaper.appendChild(newHeading);
    newPaper.appendChild(newContent);
    
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper11(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau11');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });

    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one','heading_paper_mau11');
    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";


    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('part_one');
    Object.assign(halfLeft.style, {
        width: `40%`,
        height: `${LAYOUT_CONFIG.paperHeight - 64}px`,
        paddingRight: `12px`,
        display : "block",
        left: "0"
    });
    
    halfRight.classList.add('part_two');
    Object.assign(halfRight.style, {
        width: `calc(100% - ${LAYOUT_CONFIG.headerWidth}px)`,
        paddingLeft: `12px`,
        width: `60%`
    });
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
function createNewPaper12(){
    const newPaper = document.createElement('div');
    newPaper.classList.add('paper','paper_mau12');
    newPaper.style.marginTop = '32px';
    
    const newContent = document.createElement('div');
    newContent.classList.add('content_CV','part_in_paper');
    Object.assign(newContent.style, {
        width: `100%`,
        paddingTop: `${LAYOUT_CONFIG.padding.top}px`
    });

    const newHeading = document.createElement('div');
    newHeading.classList.add('heading_paper','part_in_paper','part_one','heading_paper_mau12');
    const anhcv = document.createElement('section');
    anhcv.classList.add("anh_CV");
    newHeading.appendChild(anhcv);
    newHeading.style.display = "none";
    const halfLeft = document.createElement('section');
    halfLeft.classList.add("half-left")
    const halfRight = document.createElement('section');
    halfRight.classList.add("half-right");
    halfLeft.classList.add('part_one');
    Object.assign(halfLeft.style, {
        width: `50%`,
        height: `${LAYOUT_CONFIG.paperHeight - 64}px`,
        paddingRight: `12px`,
        display : "block",
        left: "0"
    });
    
    halfRight.classList.add('part_two');
    Object.assign(halfRight.style, {
        width: `calc(100% - ${LAYOUT_CONFIG.headerWidth}px)`,
        paddingLeft: `12px`,
        width: `50%`
    });
    
    newContent.appendChild(halfLeft);
    newContent.appendChild(halfRight);
    newPaper.appendChild(newContent);
    newPaper.appendChild(newHeading);
    getFont_n_fontSize(newPaper);
    
    return newPaper;
}
// s·∫Øp x·∫øp tr·∫≠t t·ª± khi ch·ªânh s·ª≠a c√°c ph·∫ßn trong CV

// 1- ƒë·ªëi v·ªõi nh·ªØng ph·∫ßn l√† ph·∫ßn ƒë·∫ßu ti√™n qua gi·∫•y m·ªõi 
function checkLength_if_NewPaper(part,currentPaper){
    if(part.closest(".ct_in_sectionSM") === null){
        currentPaper.querySelector(".half-right").appendChild(part);
        return;
    }
    else if(part.closest(".ct_in_sectionSM").children.length <= 1){
        // n·∫øu part_ct m√† ch·ªâ c√≤n 1 ptu con th√¨ cho c·∫£ part-ct qua gi·∫•y m·ªõi lu√¥n
        currentPaper.querySelector(".half-right").appendChild(part.closest(".part_ct"));
    }
    else{
        currentPaper.querySelector(".half-right").appendChild(part);
    }
}
// ƒë·ªëi v·ªõi nh·ªØng ph·∫ßn l√† ph·∫ßn > 1;
function checkLength_if_notNewPaper(part,currentPaper){
    // xem x√©t l·∫°i khi add newPart 
    if(part.closest(".ct_in_sectionSM") === null){
        currentPaper.nextElementSibling.querySelector(".half-right").insertAdjacentElement("afterbegin",part);
        return;
    }
    else if(part.closest(".ct_in_sectionSM").children.length <= 1){
        currentPaper.nextElementSibling.querySelector(".half-right").insertAdjacentElement("afterbegin",part.closest(".part_ct"));
    }
    else{
        currentPaper.nextElementSibling.querySelector(".half-right").insertAdjacentElement("afterbegin",part);
    }
}

function checkLength_if_NewPaper_2col(part,currentPaper,type){
    if(part.closest(".ct_in_sectionSM") === null){
        currentPaper.querySelector(`.${type}`).appendChild(part);
        return;
    }
    else if(part.closest(".ct_in_sectionSM").children.length <= 1){
        if(type == "half-left"){
            currentPaper.querySelector(".half-left").appendChild(part.closest(".part_ct"));
        }else{
            currentPaper.querySelector(".half-right").appendChild(part.closest(".part_ct"));
        }
    }
    else{
        if(type == "half-left"){
            currentPaper.querySelector(".half-left").appendChild(part);
        }else{
            currentPaper.querySelector(".half-right").appendChild(part);
        }
    }
}

function checkLength_if_notNewPaper_2col(part,currentPaper,type){ 
    // xem x√©t l·∫°i khi add newPart 
    if(part.closest(".ct_in_sectionSM") === null){
        if(type == "half-left"){
            currentPaper.nextElementSibling.querySelector(".half-left").insertAdjacentElement("afterbegin",part);
        }
        else{
            currentPaper.nextElementSibling.querySelector(".half-right").insertAdjacentElement("afterbegin",part);
        }
        return;
    }
    else if(part.closest(".ct_in_sectionSM").children.length <= 1){
        if(type == "half-left"){
            currentPaper.nextElementSibling.querySelector(".half-left").insertAdjacentElement("afterbegin",part.closest(".part_ct"));
        }
        else{
            currentPaper.nextElementSibling.querySelector(".half-right").insertAdjacentElement("afterbegin",part.closest(".part_ct"));
        }
    }
    else{
        if(type == "half-left"){
            currentPaper.nextElementSibling.querySelector(".half-left").insertAdjacentElement("afterbegin",part);
        }
        else{
            currentPaper.nextElementSibling.querySelector(".half-right").insertAdjacentElement("afterbegin",part);
        }
    }
}

// x·ª≠ l√Ω chia gi·∫•y v·ªõi paper c√≥ 2 ph·∫ßn ( 2 c·ªôt )

function redistributeContent_2col(part_in_paper){
    //  ƒë∆∞·ª£c d√πng ƒë·ªÉ t√≠nh to√°n ph·∫ßn heading c·ªßa m·ªói lo·∫°i gi·∫•y 
    if(part_in_paper){
        console.log("M·∫´u 2 c·ªôt");
        console.log(part_in_paper);
        let currentPaper = part_in_paper.closest(".paper");
        console.log(currentPaper);
        let currentHeight = 0;
        let paperIndex = 1;
        let type = part_in_paper.getAttribute("class").split(' ')[0];
        console.log(type);
        let loaiCV = getTemplateCV_Now().substring(9);
        console.log("Loai Cv ·ªü h√†m redistributeContent_2col :",loaiCV);
        // let qal = part_in_paper.querySelector(".half-right");
        // console.log(qal.querySelectorAll(".item_in_part"));
        const maxHeight = getRemainingHeight(part_in_paper); // t√πy thu·ªôc v√†o ƒë·ªô d√†i t·ª´ng m·∫´u Cv 
        part_in_paper.querySelectorAll(".item_in_part").forEach((part, index) => {
            const partHeight = part.offsetHeight; // ƒë·ªô d√†i t·ª´g ph·∫ßn 
            console.log("Chi·ªÅu d√†i ph·∫ßn t·ª≠ hi·ªán t·∫°i : ",partHeight);
            console.log(maxHeight);
            if (currentHeight + partHeight > maxHeight) {
                if(currentPaper.nextElementSibling){
                    checkLength_if_notNewPaper_2col(part,currentPaper,type);
                }
                else{
                    switch(loaiCV){
                        case "1":
                            currentPaper = createNewPaper1();
                            break;
                        case "3":
                            currentPaper = createNewPaper3();
                            break;
                        case "4":
                            currentPaper = createNewPaper4();                              
                            break;
                        case "5":
                            currentPaper = createNewPaper5();                              
                            break;
                        case "6":
                            currentPaper = createNewPaper6();                             
                            break;
                        case "7":
                            currentPaper = createNewPaper7();                              
                            break;
                        case "8":
                            currentPaper = createNewPaper8();                             
                            break;
                        case "9":
                            currentPaper = createNewPaper9();
                            break;
                        case "11":
                            currentPaper = createNewPaper11();
                            break
                        case "10":
                            currentPaper = createNewPaper10();
                            break;
                        case "12":
                            currentPaper = createNewPaper12();                           
                            break;
                        default:
                            console.log("M·∫´u Kh√¥ng H·ª£p L·ªá !");
                    }
                    content_left.appendChild(currentPaper);
                    console.log("lo·∫°i cv :",type," c·ªôt");
                    console.log(type);
    
                    checkLength_if_NewPaper_2col(part,currentPaper,type);
                    // part.focus();
                    currentHeight = 0; // g√°n l·∫°i chi·ªÅu d√†i htai = 0
                    paperIndex++; // tƒÉng ƒë·∫øm
                }
            }
            currentHeight += partHeight;
        });
        updatePageNumbers();
    }
}

// function redistributeContent_2col(paper){
//     //  ƒë∆∞·ª£c d√πng ƒë·ªÉ t√≠nh to√°n ph·∫ßn heading c·ªßa m·ªói lo·∫°i gi·∫•y 
//     if(paper){
//         console.log("M·∫´u 2 c·ªôt");
//         console.log(part_in_paper);

//         let currentPaper = paper;
//         console.log(currentPaper);
//         let currentHeight = 0;
//         let paperIndex = 1;

//         let type = part_in_paper.getAttribute("class").split(' ')[0];
//         console.log(type);
//         let loaiCV = getTemplateCV_Now().substring(9);
//         console.log("Loai Cv ·ªü h√†m redistributeContent_2col :",loaiCV);

//         // let qal = part_in_paper.querySelector(".half-right");
//         // console.log(qal.querySelectorAll(".item_in_part"));
//         const maxHeight = getRemainingHeight(part_in_paper); // t√πy thu·ªôc v√†o ƒë·ªô d√†i t·ª´ng m·∫´u Cv 
//         part_in_paper.querySelectorAll(".item_in_part").forEach((part, index) => {
//             const partHeight = part.offsetHeight; // ƒë·ªô d√†i t·ª´g ph·∫ßn 
//             console.log("Chi·ªÅu d√†i ph·∫ßn t·ª≠ hi·ªán t·∫°i : ",partHeight);
//             console.log(maxHeight);
//             if (currentHeight + partHeight > maxHeight) {
//                 if(currentPaper.nextElementSibling){
//                     checkLength_if_notNewPaper_2col(part,currentPaper,type);
//                 }
//                 else{
//                     switch(loaiCV){
//                         case "1":
//                             currentPaper = createNewPaper1();
//                             break;
//                         case "3":
//                             currentPaper = createNewPaper3();
//                             break;
//                         case "4":
//                             currentPaper = createNewPaper4();                              
//                             break;
//                         case "5":
//                             currentPaper = createNewPaper5();                              
//                             break;
//                         case "6":
//                             currentPaper = createNewPaper6();                             
//                             break;
//                         case "7":
//                             currentPaper = createNewPaper7();                              
//                             break;
//                         case "8":
//                             currentPaper = createNewPaper8();                             
//                             break;
//                         case "9":
//                             currentPaper = createNewPaper9();
//                             break;
//                         case "11":
//                             currentPaper = createNewPaper11();
//                             break
//                         case "10":
//                             currentPaper = createNewPaper10();
//                             break;
//                         case "12":
//                             currentPaper = createNewPaper12();                           
//                             break;
//                         default:
//                             console.log("M·∫´u Kh√¥ng H·ª£p L·ªá !");
//                     }
//                     content_left.appendChild(currentPaper);
//                     console.log("lo·∫°i cv :",type," c·ªôt");
//                     console.log(type);
    
//                     checkLength_if_NewPaper_2col(part,currentPaper,type);
//                     // part.focus();
//                     currentHeight = 0; // g√°n l·∫°i chi·ªÅu d√†i htai = 0
//                     paperIndex++; // tƒÉng ƒë·∫øm
//                 }
//             }
//             currentHeight += partHeight;
//         });
//         updatePageNumbers();
//     }
// }

// x·ª≠ l√Ω chia gi·∫•y m·∫∑c ƒë·ªãnh 

function redistributeContent_1col(paper1){;
    let currentPaper = paper1;
    let currentHeight = 0;
    let paperIndex = 1;

    console.log(currentPaper.querySelectorAll(".item_in_part"));
    console.log(getRemainingHeight(currentPaper));

    let loaiCV = getTemplateCV_Now().substring(9);
    // console.log("Loai Cv ·ªü h√†m redistributeContent_1col :",loaiCV);
    console.log("ƒëang ·ªü h√†m redistributeContent_1col");
    paper1.querySelectorAll(".item_in_part").forEach((part, index) => {
        console.log(part);
        const partHeight = part.offsetHeight; // ƒë·ªô d√†i t·ª´g ph·∫ßn 
        const maxHeight = getRemainingHeight(currentPaper); // l·∫•y ra chi·ªÅu d√†i t·ªëi ƒëa 
        // ki·ªÉm tra n·∫øu chi·ªÅu d√†i c·ªßa ph·∫ßn content trong kh·ªï gi·∫•y ƒë√£ d√†i qu√° m·ª©c
        console.log("chi·ªÅu d√†i hi·ªán T·∫°i :",currentHeight);
        if (currentHeight + partHeight > maxHeight) {
            console.log("D√†i Qu√° R·ªìi !");

            if(currentPaper.nextElementSibling){
                checkLength_if_notNewPaper(part,currentPaper);
            }
            else{
                if(loaiCV == "0" ){
                    currentPaper = createNewPaper();
                }
                else if(loaiCV == "2"){
                    currentPaper = createNewPaper2();
                }
                else{
                    console.log("M·∫´u kh√¥ng t·ªìn t·∫°i");
                }
                content_left.appendChild(currentPaper);
                checkLength_if_NewPaper(part,currentPaper);
                part.focus();
                currentHeight = 0; // g√°n l·∫°i chi·ªÅu d√†i htai = 0
                paperIndex++; // tƒÉng ƒë·∫øm
            }
        }
        currentHeight += partHeight;
    });
    updatePageNumbers();
}

function fixbug0103(){
    let partCTs = content_left.querySelectorAll(".part_ct:not(.information):not(.title_HD)");
    console.log(partCTs);
    partCTs.forEach(ele=>{
        if(ele.querySelector(".title") == null || ele.querySelector(".title") == undefined){
            console.error("----------------");  
            let pre = ele.previousElementSibling;
            let next = ele.nextElementSibling;
            if(pre){
                while(!pre.classList.contains("part_ct")){
                    if(pre.getAttribute("fatherpart") == ele.getAttribute("class").split(" ")[0]){
                        ele.insertAdjacentElement("beforeend",pre);
                    }
                    if(pre.classList.contains("title")){
                        ele.insertAdjacentElement("afterbegin",pre);
                    }
                    pre = pre.previousElementSibling;
                }
            }
            if(next){
                console.log("<><><> 1");
                console.log(next);
                while(!next.classList.contains("part_ct")){
                    console.log("<><><> 2");
                    
                    if(next.getAttribute("fatherpart") == ele.getAttribute("class").split(" ")[0]){
                        console.log("<><><> 3");
                        ele.insertAdjacentElement("beforeend",next);
                    }
                    else if(next.classList.contains("title")){
                        console.log("<><><> 4");
                        ele.insertAdjacentElement("afterbegin",next);
                    }
                    else{
                        break;
                    }
                    next = ele.nextElementSibling;
                }
            }
        }
    })
}
//x√≥a modal
function redistributeContent_when_Addele_2col(part_in_paper) {
    let papers = Array.from(content_left.querySelectorAll('.paper'));  
    let type;
    if(part_in_paper.closest(".phan_phu")){
        return;
    }
    console.log(part_in_paper);
    type = part_in_paper.getAttribute("class").split(' ')[0];   
    console.log("type o h√†m redistributeContent_2col : ",type);
    console.log(type);
    let loaiCV = getTemplateCV_Now().substring(9);
    console.log("Loai Cv ·ªü h√†m redistributeContent_when_Addele_2col :",loaiCV);

    papers.forEach(paper=>{
        let currentHeight = 0;
        let currentPaper = paper;
        let itemsInPart;
            itemsInPart = Array.from(paper.querySelector(`.${type}`).querySelectorAll(".item_in_part"));
        let excessParts = [];
        const maxHeight = getRemainingHeight(currentPaper) // l·∫•y ra chi·ªÅu d√†i t·ªëi ƒëa 
        console.log("chi·ªÅu d√†i t·ªëi ƒëa ·ªü gi·∫•y hi·ªán t·∫°i:",maxHeight);
        console.log(itemsInPart);
        
        for(let i = 0 ; i < itemsInPart.length ; i++){
            const partHeight = itemsInPart[i].offsetHeight; 
                if (currentHeight + partHeight >= maxHeight) {
                    for(let j = i ; j < itemsInPart.length ; j++){
                        console.log(itemsInPart[j]);
                        if(itemsInPart[j].closest(".ct_in_sectionSM") === null ){ // n·∫øu nh∆∞ v·∫≠y th√¨ th√™m h·∫øt ch√∫ng v√†o ph·∫ßn t·ª≠ part_ct cu·ªëi c√πng ·ªü gi·∫•y tr√™n 
                            if(itemsInPart[j].classList.contains("title")){
                                excessParts.push(itemsInPart[j].closest(".part_ct"));
                            }
                            else{
                                excessParts.push(itemsInPart[j]);
                            }
                        }
                        else if(itemsInPart[j].closest(".ct_in_sectionSM").children.length <= 1 ){
                            excessParts.push(itemsInPart[j].closest(".part_ct"));
                        }
                        else{
                            excessParts.push(itemsInPart[j]);
                        }
                    }
                    console.log("Ph·∫ßn t·ª≠ b·ªã th·ª´a ra",excessParts);
                    if(currentPaper.nextElementSibling){
                        excessParts.forEach(part=>{
                            checkLength_if_notNewPaper_2col(part,currentPaper,type);
                        })
                    }
                    else{
                        switch(loaiCV) {
                            case "1":
                                currentPaper = createNewPaper1();
                                break;
                            case "3":
                                currentPaper = createNewPaper3();
                                break;
                            case "4":
                                currentPaper = createNewPaper4();                              
                                break;
                            case "5":
                                currentPaper = createNewPaper5();                              
                                break;
                            case "6":
                                currentPaper = createNewPaper6();                             
                                break;
                            case "7":
                                currentPaper = createNewPaper7();                              
                                break;
                            case "8":
                                currentPaper = createNewPaper8();                             
                                break;
                            case "9":
                                currentPaper = createNewPaper9();
                                break;
                            case "11":
                                currentPaper = createNewPaper11();
                                break
                            case "10":
                                currentPaper = createNewPaper10();
                                break;
                            case "12":
                                currentPaper = createNewPaper12();                           
                                break;
                            default:
                                console.log("M·∫´u Kh√¥ng H·ª£p L·ªá ·ªü M·∫´u 2 c·ªôt!");
                        }
                        content_left.appendChild(currentPaper);
                        excessParts.forEach(part=>{
                            checkLength_if_NewPaper_2col(part,currentPaper,type);
                        })
                    }
                    itemsInPart[i].focus();
                    break;
                }
                currentHeight += partHeight;
        }
        updatePageNumbers();
    })      
}

// x√≥a modal
function redistributeContent_when_Addele() {
    let papers = Array.from(content_left.querySelectorAll('.paper'));
    // B·∫Øt ƒë·∫ßu t·ª´ trang hi·ªán t·∫°i
    let loaiCV = getTemplateCV_Now().substring(9);
    console.log("Loai Cv ·ªü h√†m redistributeContent_when_Addele :",loaiCV);
    console.log("ƒëang ·ªü h√†m redistributeContent_when_Addele");
    papers.forEach(paper=>{
        let currentPaper = paper;
        let currentHeight = 0;
        let itemsInPart = Array.from(currentPaper.querySelectorAll(".item_in_part"));
        
        let excessParts = [];
        for(let i = 0 ; i < itemsInPart.length ; i++){
            console.log(itemsInPart[i]);
            const partHeight = itemsInPart[i].offsetHeight; 
            const maxHeight = getRemainingHeight(currentPaper); // l·∫•y ra chi·ªÅu d√†i t·ªëi ƒëa 
            console.log("Chi·ªÅu D√†i T·ªëi ƒêa :",maxHeight);
            currentHeight += partHeight;
            console.log(currentHeight);
            if (currentHeight > maxHeight) {
                for(let j = i ; j < itemsInPart.length ; j++){
                    if(itemsInPart[j].closest(".ct_in_sectionSM") === null ){ // n·∫øu nh∆∞ v·∫≠y th√¨ th√™m h·∫øt ch√∫ng v√†o ph·∫ßn t·ª≠ part_ct cu·ªëi c√πng ·ªü gi·∫•y tr√™n 
                        if(itemsInPart[j].classList.contains("title")){
                            excessParts.push(itemsInPart[j].closest(".part_ct"));
                        }
                        else{
                            excessParts.push(itemsInPart[j]);
                        }
                    }
                    else if(itemsInPart[j].closest(".ct_in_sectionSM").children.length <= 1 ){
                        excessParts.push(itemsInPart[j].closest(".part_ct"));
                    }
                    else{
                        excessParts.push(itemsInPart[j]);
                    }
                }
                console.log(excessParts);
                if(currentPaper.nextElementSibling){
                    excessParts.forEach(part=>{
                        checkLength_if_notNewPaper(part,currentPaper);
                    })
                }
                else{
                    if(loaiCV == "0" ){
                        currentPaper = createNewPaper();
                    }
                    else if(loaiCV == "2"){
                        currentPaper = createNewPaper2();
                    }
                    else{
                        console.log("M·∫´u kh√¥ng t·ªìn t·∫°i ·ªü m·∫´u 1 c·ªôt");
                    }
                    content_left.appendChild(currentPaper);
                    excessParts.forEach(part=>{
                        checkLength_if_NewPaper(part,currentPaper);
                    })
                    itemsInPart[i].focus();
                }
                break;
            }
        }
        updatePageNumbers();
    })  
}
// t·ª± ƒë·ªông theo d√µi thay ƒë·ªïi trong DOM khi ch√®n th√™m ph·∫ßn t·ª≠

function updatePageNumbers() {
    const papers = document.querySelectorAll('.paper');
    // t√¥ng s·ªë gi·∫•y 
    const totalPages = papers.length;

    papers.forEach((paper, index) => {
        // l·∫•y ra ƒë√°nh s·ªë c·ªßa m·ªói trang 
        let pageNumber = paper.querySelector('.quantity_page');
        if (!pageNumber) {
            pageNumber = document.createElement('div');
            pageNumber.classList.add('quantity_page');
            paper.appendChild(pageNumber);
        }
        pageNumber.textContent = `Trang ${index + 1}/${totalPages}`;
    });
}

// ----------------------------------------------------- logic ph√¢n chia n·ªôi dung v√† th√™m gi·∫•y 

// H√†m x·ª≠ l√Ω l·∫•p ƒë·∫ßy ch·ªó tr·ªëng khi x√≥a ph·∫ßn t·ª≠
function check_4_fn_Fill_processing(ele_remove){
    if(ele_remove.closest(".half-right")){
        console.log("half-right");
        return "half-right";
    }
    else{
        console.log("half-left");
        return "half-left";
    }
}

function fixbug0603(haft){
    let List_paper = document.querySelectorAll(".paper");
    part_have_ele_deleted = haft;
    List_paper.forEach(paper=>{
        // let currentpaper = ele_remove.closest(".paper");
        let currentpaper = paper;
        let maxH = getRemainingHeight(currentpaper);
        let currentHei = 0;
        let halfLeft = currentpaper.querySelector(".half-left");
        let halfRight = currentpaper.querySelector(".half-right");

        if(part_have_ele_deleted == "half-right"){           
            let remains_part = halfRight.querySelectorAll(".item_in_part");
            console.log("remains_part : ",remains_part)
            remains_part.forEach(ele=>{
                currentHei += ele.offsetHeight;
            })
            console.log("currentHei : ",currentHei)

            if(currentpaper.nextElementSibling){
                let partCT = currentpaper.nextElementSibling.querySelector(".half-right").querySelector("section");
                console.log(partCT); 

                while(maxH > currentHei){                  
                    if(!partCT){
                        break;
                    }
                    console.log("L·ªçt v√†o ƒê√¢y");
                    halfRight.insertAdjacentElement("beforeend",partCT);
                    console.log("---------------------");
                    console.log("partCT c√≥ n·∫±m trong halfRight kh√¥ng?", halfRight.contains(partCT));

                    console.log("partCT hi·ªán t·∫°i trong while",partCT);
                    currentHei += partCT.offsetHeight;
                    console.log("currentHei sau khi th√™m ph·∫ßn t·ª≠",currentHei,maxH);
                    if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2" || getTemplateCV_Now() == "paper_mau3" || getTemplateCV_Now() == "paper_mau10"){
                        redistributeContent_when_Addele();
                    }
                    else{
                        redistributeContent_when_Addele_2col(halfRight);
                    }
                    partCT = currentpaper.nextElementSibling.querySelector(".half-right").querySelector("section");
                }
                if(partCT == null){
                    currentpaper.nextElementSibling.remove();
                } 
            }
        }
        else{
            let remains_part = halfLeft.querySelectorAll(".item_in_part");
            console.log(remains_part)
            remains_part.forEach(ele=>{
                currentHei += ele.offsetHeight;
            })
            console.log(currentHei);
            if(currentpaper.nextElementSibling){
                let partCT = currentpaper.nextElementSibling.querySelector(".half-left").querySelector("section");
                console.log(partCT);   
                console.log(maxH); 
                
                while(maxH > currentHei){
                    console.log(currentHei);
                    if(!partCT){
                        break;
                    }
                    
                    halfLeft.insertAdjacentElement("beforeend",partCT);
                    currentHei += partCT.offsetHeight;
                    if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2" || getTemplateCV_Now() == "paper_mau3" || getTemplateCV_Now() == "paper_mau10"){
                        redistributeContent_when_Addele();
                    }
                    else{
                        redistributeContent_when_Addele_2col(halfLeft);
                    }
                    partCT = currentpaper.nextElementSibling.querySelector(".half-left").querySelector("section");
                }
            }
        }
        
    })
}
function Fill_processing(ele_remove){
    let List_paper = document.querySelectorAll(".paper");
    let part_have_ele_deleted = check_4_fn_Fill_processing(ele_remove);
    let ktra;
    if(ele_remove.closest(".ct_in_sectionSM")){
        ktra = ele_remove.closest(".ct_in_sectionSM").querySelectorAll("section[fatherpart]");
        if(ktra.length < 2){
            console.log("V√†o ƒë√¢y");
            ele_remove.closest(".part_ct").remove();
        }
        else{
            ele_remove.remove();
        }
    }
    else{
        ele_remove.remove();
    }
    check_4_fn_Fill_processing(ele_remove);
    List_paper.forEach(paper=>{
        // let currentpaper = ele_remove.closest(".paper");
        let currentpaper = paper;
        let maxH = getRemainingHeight(currentpaper);
        let currentHei = 0;
        let halfLeft = currentpaper.querySelector(".half-left");
        let halfRight = currentpaper.querySelector(".half-right");

        if(part_have_ele_deleted == "half-right"){           
            let remains_part = halfRight.querySelectorAll(".item_in_part");
            console.log("remains_part : ",remains_part)
            remains_part.forEach(ele=>{
                currentHei += ele.offsetHeight;
            })
            console.log("currentHei : ",currentHei)

            if(currentpaper.nextElementSibling){
                let partCT = currentpaper.nextElementSibling.querySelector(".half-right").querySelector("section");
                console.log(partCT); 

                while(maxH > currentHei){                  
                    if(!partCT){
                        break;
                    }
                    console.log("L·ªçt v√†o ƒê√¢y");
                    halfRight.insertAdjacentElement("beforeend",partCT);
                    console.log("---------------------");
                    console.log("partCT c√≥ n·∫±m trong halfRight kh√¥ng?", halfRight.contains(partCT));

                    console.log("partCT hi·ªán t·∫°i trong while",partCT);
                    currentHei += partCT.offsetHeight;
                    console.log("currentHei sau khi th√™m ph·∫ßn t·ª≠",currentHei,maxH);
                    if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2" || getTemplateCV_Now() == "paper_mau3" || getTemplateCV_Now() == "paper_mau10"){
                        redistributeContent_when_Addele();
                    }
                    else{
                        redistributeContent_when_Addele_2col(halfRight);
                    }
                    partCT = currentpaper.nextElementSibling.querySelector(".half-right").querySelector("section");
                }
                if(partCT == null){
                    currentpaper.nextElementSibling.remove();
                } 
            }
        }
        else{
            let remains_part = halfLeft.querySelectorAll(".item_in_part");
            console.log(remains_part)
            remains_part.forEach(ele=>{
                currentHei += ele.offsetHeight;
            })
            console.log(currentHei);
            if(currentpaper.nextElementSibling){
                let partCT = currentpaper.nextElementSibling.querySelector(".half-left").querySelector("section");
                console.log(partCT);   
                console.log(maxH); 
                
                while(maxH > currentHei){
                    console.log(currentHei);
                    if(!partCT){
                        break;
                    }
                    
                    halfLeft.insertAdjacentElement("beforeend",partCT);
                    currentHei += partCT.offsetHeight;
                    if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2" || getTemplateCV_Now() == "paper_mau3" || getTemplateCV_Now() == "paper_mau10"){
                        redistributeContent_when_Addele();
                    }
                    else{
                        redistributeContent_when_Addele_2col(halfLeft);
                    }
                    partCT = currentpaper.nextElementSibling.querySelector(".half-left").querySelector("section");
                }
            }
        }
        
    })
}
function contentEditable(ele){
    ele.setAttribute('contentEditable', 'true');
    ele.focus();
}
function antiEnter(ele){
    let childElements = ele.children;
    Array.from(childElements).forEach(child => {
        if (child.querySelector("br")) {
            child.remove();
        }
    });
}

const observer2 = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
    //   if (mutation.type === 'childList') {
        // C·∫≠p nh·∫≠t l·∫°i NodeList khi c√≥ ph·∫ßn t·ª≠ m·ªõi
        textElements = document.querySelectorAll('.possible_Part');
        // console.log(textElements);
        textElements.forEach(function(ele){
            ele.onclick = function(e){
                if(ele.closest(`section[fatherpart="overview"]`)){
                    contentEditable(ele);
                }
                else contentEditable(e.target);
                // ti·∫øn h√†nh x√≥a h·∫øt trc khi chuy·ªÉn sang c√°i m·ªõi 
                instruct.innerHTML = "";
                console.log(ele.closest(".part_ct"));
                if(ele.closest(".part_ct")){
                    if(ele.closest(".part_ct").getAttribute("class")){
                        suggest.forEach((e)=>{
                            if(ele.closest(".part_ct").getAttribute("class").split(" ")[0] == e.heading.title ){
                                suggest_CV(e);
                            }
                        })
                        let list_box_progress = document.querySelectorAll(".box_progress");
                        list_box_progress.forEach(elem=>{
                        elem.onclick = (e)=>{
                            elem.classList.toggle("border_blue");
                            }
                        })
                    }
                }
            }
            ele.onblur = function(e){
                antiEnter(ele);
            }
        })      
    //   }
    });
});
observer2.observe(content_left, { childList: true, subtree: true });

textElements.forEach(function(ele){
    ele.onclick = function(e){
        contentEditable(e.target);
    }
    ele.onblur = function(e){
        antiEnter(ele);
    }
})   

//  ------------------------------------------------   th√™m thanh c√¥ng c·ª• v√† th√™m x√≥a , ch√®n , di chuy·ªÉn  
// s·ª≠a l·ªói chia gi·∫•y khi ch√®n them part_ct m·ªõi v√†o 

let activeElement = null;
let activeToolbars = [];

// ƒë·ªïi v·ªã tr√≠ 2 ph·∫ßn t·ª≠ 
function swapElements(elementA, elementB) {
    const placeholder = document.createElement('div');
    elementA.parentNode.insertBefore(placeholder, elementA);
    elementA.replaceWith(elementB);
    placeholder.replaceWith(elementA);
}
function swapElements1(elementA, elementB) {
    const placeholder = document.createElement('div');
    elementA.parentNode.insertBefore(placeholder, elementA);
    elementB.replaceWith(elementA);
    placeholder.replaceWith(elementB);
}
function removeToolbars(element) {
    const toolbars = element.querySelectorAll('.edit_ContentCV');
    toolbars.forEach(toolbar => toolbar.remove());
    element.style.border = 'none';
}

// th·∫ª div ch·ª©a c√°c th·∫ª ph·∫ßn CV ƒë·ªÉ th√™m m·ªõi 
let select_list_item = document.querySelectorAll(".list_partItem")

// b·∫£ng ch·ª©a c√°c ph·∫ßn kh√°c c·ªßa CV khi mu·ªën th√™m 
let addNewItem = document.querySelector(".addNewItem");

let partSkill = document.createElement("section");
let partProject = document.createElement("section");
let partAwards = document.createElement("section");
let partworkGoals = document.createElement("section");
let partCertificate = document.createElement("section");
let partLanguage = document.createElement("section");
let partAnother = document.createElement("section");
let partOverview = document.createElement("section");
let partworkExp = document.createElement("section");
let partEducation = document.createElement("section");

// 
partSkill.classList.add("skill");
partSkill.classList.add("part_ct");
partSkill.classList.add("paragraph");
//
partProject.classList.add("project");
partProject.classList.add("part_ct");
partProject.classList.add("paragraph");
//
partAwards.classList.add("awards");
partAwards.classList.add("part_ct");
partAwards.classList.add("paragraph");
//
partworkGoals.classList.add("goals");
partworkGoals.classList.add("part_ct");
partworkGoals.classList.add("paragraph");
//
partCertificate.classList.add("certificate");
partCertificate.classList.add("part_ct");
partCertificate.classList.add("paragraph");
//
partLanguage.classList.add("language");
partLanguage.classList.add("part_ct");
partLanguage.classList.add("paragraph");
//
partAnother.classList.add("another");
partAnother.classList.add("part_ct");
partAnother.classList.add("paragraph");
//
partOverview.classList.add("overview");
partOverview.classList.add("part_ct");
partOverview.classList.add("paragraph");
//
partworkExp.classList.add("workexperience");
partworkExp.classList.add("part_ct");
partworkExp.classList.add("paragraph");
//
partEducation.classList.add("education");
partEducation.classList.add("part_ct");
partEducation.classList.add("paragraph");


//[bug] L√†m th√™m c√°c part_ct kh√°c ƒë·ªÉ th√™m v√†o CV
partSkill.innerHTML = `<section class="bold title possible_Part item_in_part">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                Skill
                            </p>
                        </section>

                        <section class="list_skill ct_in_sectionSM">
                            <section team="" fatherpart="skill" class="content_in_CV paragraph item_in_part">
                                <section class="half_left_of_content_item possible_Part">
                                    <p class="timeline type_2">Main</p>
                                </section>
                                <section class="half_right_of_content_item project_ofPart">
                                    <ul class="content_item type_2 possible_Part"> 
                                        <li>Programme outsourcing projects</li>
                                        <li>Programme outsourcing projects</li>
                                        <li>Programme outsourcing projects</li>
                                    </ul>
                                </section>
                            </section>
                        </section>`;
partProject.innerHTML = `<section class="bold item_in_part possible_Part title">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                Projects
                            </p>
                        </section>
                        <section class="list_project ct_in_sectionSM">
                            <section team="" fatherpart="project" class="projects content_in_CV paragraph item_in_part">
                                <section class="name_project">
                                    <b class="type_3 possible_Part">T√™n D·ª± √Ån C·ªßa B·∫°n</b>
                                    <p class="type_3 possible_Part">Th·ªùi Gian</p>
                                </section>

                                <section>
                                    <table>
                                        <tr class="content_in_CV">
                                            <td class="half_left_of_content_item">
                                                <div class="client_project_lable type_3 possible_Part">
                                                    <b > Kh√°ch H√†ng</b>
        
                                                </div>
                                            </td>
                                            <td class="half_right_of_content_item">
                                                <div class="client_project type_3 possible_Part">
                                                    <p > N·ªôi Dung </p>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="content_in_CV">
                                            <td class="half_left_of_content_item">
                                                <div class="descriptions_project_lable type_3 possible_Part">
                                                    <b > M√¥ T·∫£</b>
                                                </div>
                                            </td>
                                            <td class="half_right_of_content_item">
                                                <div class="descriptions_project type_3 possible_Part">
                                                    <p > N·ªôi Dung </p>
        
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="content_in_CV">
                                            <td class="half_left_of_content_item">
                                                <div class="number_of_members_project_lable type_3 possible_Part">
                                                    <b> Team Size</b>
                                                </div>
                                            </td>
                                            <td class="half_right_of_content_item">
                                                <div class="number_of_members_project type_3 possible_Part">
                                                    <p > 3 </p>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="content_in_CV">
                                            <td class="half_left_of_content_item">
                                                 <div class="position_project_lable type_3 possible_Part">
                                                    <b > V·ªã Tr√≠</b>
            
                                                 </div>
                                            </td>
                                            <td class="half_right_of_content_item">
                                                <div class="position_project type_3 possible_Part">
                                                    <p > N·ªôi Dung </p>
        
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="content_in_CV">
                                            <td class="half_left_of_content_item">
                                                 <div class="responsibilities_project_lable type_3 possible_Part">
                                                    <b > Vai Tr√≤</b>
            
                                                 </div>
                                            </td>
                                            <td class="half_right_of_content_item">
                                                <div class="responsibilities_project type_3 possible_Part">
                                                    <p > N·ªôi Dung </p>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr class="content_in_CV">
                                            <td class="half_left_of_content_item">
                                                <div class="technology_in_use_project_lable type_3 possible_Part">
                                                    <b > C√¥ng Ngh·ªá S·ª≠ D·ª•ng</b> 
                                                </div>
                                            </td>
                                            <td class="half_right_of_content_item">
                                                <div class="technology_in_use_project type_3 possible_Part">
                                                    <p > N·ªôi Dung </p>     
                                                </div>
                                            </td>
                                        </tr>
                                    </table>
                                </section>    
                            </section>                    
                        </section>`
partAwards.innerHTML = `<section class="bold item_in_part possible_Part title">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                Awards
                            </p>
                        </section>
                        
                        <section class="ct_in_sectionSM">
                            <section team="" fatherpart="awards" class="content_in_CV paragraph item_in_part"> 
                                <section class="half_left_of_content_item bold possible_Part">
                                    <p class="timeline type_2">01/2018 ‚Äì Present</p>
                                </section>
                                <section class="half_right_of_content_item my_award projectcv">
                                    <section class="bold possible_Part title_item">
                                        <p class="type_2">F8 TECHNOLOGY EDUCATION.,JSC</p>
                                    </section>
                                    <section class="content_item">
                                        <p class="type_2 possible_Part">
                                            Poly creation contest: http://goo.gl/BVP5kE
                                        </p>
                                    </section>
                                </section>
                            </section>
                        </section>
                        `
partworkGoals.innerHTML = `<section class="bold item_in_part possible_Part title">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                M·ª•c Ti√™u C√¥ng Vi·ªác
                            </p>
                        </section>
                        <section class="ct_in_sectionSM">
                            <section team="" fatherpart="goals" class="content_in_CV paragraph item_in_part"> 
                                <section class="half_left_of_content_item bold">
                                    <p class="timeline type_2 possible_Part">Ng·∫Øn H·∫°n</p>
                                </section>
                                <section class="half_right_of_content_item my_award project">
                                    <section class="content_item">
                                        <p class="type_2 possible_Part">
                                            Poly creation contest: http://goo.gl/BVP5kE
                                        </p>
                                    </section>
                                </section>
                            </section>
                        </section>`
partCertificate.innerHTML = `<section class="bold item_in_part possible_Part title">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                Ch·ª©ng Ch·ªâ
                            </p>
                        </section>
                        <section class="ct_in_sectionSM">
                            <section team="" fatherpart="certificate" class="content_in_CV paragraph item_in_part"> 
                                <section class="half_left_of_content_item bold">
                                    <p class="timeline type_2 possible_Part">Th·ªùi Gian 1</p>
                                </section>
                                <section class="half_right_of_content_item my_award project">
                                    <section class="content_item">
                                        <p class="type_2 possible_Part">
                                            Poly creation contest: http://goo.gl/BVP5kE
                                        </p>
                                    </section>
                                </section>
                            </section>
                        </section>`
partLanguage.innerHTML = `<section class="bold item_in_part possible_Part title">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                Ng√¥n Ng·ªØ
                            </p>
                        </section>
                        <section class="ct_in_sectionSM">
                            <section team="" fatherpart="language" class="content_in_CV paragraph item_in_part"> 
                                <section class="half_left_of_content_item bold">
                                    <p class="timeline type_2 possible_Part">Ti·∫øng Nh·∫≠t</p>
                                </section>
                                <section class="half_right_of_content_item my_award project">
                                    <section class="type_2 possible_Part title_item">
                                        <b class="" > N3</b>
                                    </section>
                                    <section class="content_item">
                                        <p class="type_2 possible_Part">
                                            Poly creation contest : link...
                                        </p>
                                    </section>
                                </section>
                            </section>
                        </section>`
partAnother.innerHTML = `<section class="bold item_in_part possible_Part title">
                            <i class="fa-solid fa-graduation-cap"></i>
                            <p class="label_partCT">
                                Kh√°c
                            </p>
                        </section>
                        <section class="ct_in_sectionSM">
                            <section team="" fatherpart="another" class="content_in_CV paragraph item_in_part"> 
                                <section class="half_left_of_content_item bold">
                                    <p class="timeline type_2 possible_Part">Ng·∫Øn H·∫°n</p>
                                </section>
                                <section class="half_right_of_content_item my_award project">
                                    <section class="type_2 possible_Part title_item">
                                        <b class="" > N3</b>
                                    </section>
                                    <section class="content_item">
                                        <p class="type_2 possible_Part">
                                            Poly creation contest: http://goo.gl/BVP5kE
                                        </p>
                                    </section>
                                </section>
                            </section>
                        </section>`
partOverview.innerHTML = `<section class="bold title possible_Part item_in_part">
                                <i class="fa-solid fa-eye"></i>
                                <p class="label_partCT">
                                    Overview
                                </p>
                            </section>
    
                            <section class="ct_in_sectionSM">
                                <section team="" fatherpart="overview" class="ct_overview type_1 paragraph possible_Part item_in_part">
                                    <p>
                                        - Over 2 years of experience in programming with good communication and quick learning skills 
                                    </p>
                                    <p>
                                        - Strengths: Front-end technology and Back-end web application development
                                    </p>
                                    <p>
                                        - Strengths: Front-end technology and Back-end web application development
                                    </p>
                                    <p>
                                        - Strengths: Front-end technology and Back-end web application development
                                    </p>
                                    <p>
                                        - Strengths: Front-end technology and Back-end web application development
                                    </p>
                                    <p>
                                        - Strengths: Front-end technology and Back-end web application development
                                    </p>
                                    <p>
                                        - Strengths: Front-end technology and Back-end web application development
                                    </p>
                                </section>
                            </section>`;
partworkExp.innerHTML = `<section class="bold title possible_Part item_in_part">
                                <i class="fa-solid fa-suitcase"></i>
                                <p class="label_partCT">
                                    Work Experience
                                </p>
                            </section>
    
                            <section class="time_work ct_in_sectionSM">
    
                                <section team="" fatherpart="workexperience" class="content_in_CV paragraph item_in_part"> 
                                    <section class="half_left_of_content_item bold possible_Part">
                                        <p class="timeline type_2">01/2018 ‚Äì Present</p>
                                    </section>
                                    <section class="half_right_of_content_item project_ofPart">
                                        <section class="bold">
                                            <p class="title_item type_2 possible_Part">F8 TECHNOLOGY EDUCATION.,JSC</p>
                                        </section>
                                        <p class="description type_2 possible_Part">Full-stack Developer</p>
                                        <ul class="content_item type_2 possible_Part"> 
                                            <li>Programme outsourcing projects</li>
                                            <li>Programme outsourcing projects</li>
                                            <li>Programme outsourcing projects</li>
                                        </ul>
                                    </section>
                                </section>  
    
                            </section>`;
partEducation.innerHTML = `<section class="bold title possible_Part item_in_part">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    Education
                                </p>
                            </section>
    
                            <section class="content_edu ct_in_sectionSM">
                                <section team="" fatherpart="education" class="content_in_CV paragraph item_in_part">
                                    <section class="half_left_of_content_item bold possible_Part">
                                        <p class="timeline type_2">2011/10 ‚Äì 2014/09</p>
                                    </section>
                                    <section class=" project_ofPart study_place">
                                        <section class="bold possible_Part">
                                            <p class="title_item type_2">FBU </p>
                                        </section>
                                        <ul class="content_item type_2 possible_Part"> 
                                            <li>Major - Website, Mobile Programming</li>
                                            <li>Level - Good</li>
                                            <li>Level - Good</li>
                                        </ul>
                                    </section>
                                </section> 
                            </section>`;
let chanvcd = [];
let list_addNewItem = addNewItem.querySelectorAll(".list_partItem>div");
function check_part_avai(ele,parts_exists){
    for (let e of parts_exists) {
        if (ele.getAttribute("class").split(" ")[2] == e) {
            return false;
        }
    }
    return true;
}
function handlewhenaddPart_ct(part){
    let paperc = part.closest(".paper");
    let nodechild
    console.log(part.getAttribute("class").split(" ")[0]);
    if(paperc.nextElementSibling){
        nodechild = paperc.nextElementSibling.querySelectorAll(`section[fatherpart="${part.getAttribute("class").split(" ")[0]}"]`);
        console.log(nodechild);
        if(nodechild.length > 0){
            return nodechild[nodechild.length - 1];
        }
    }
    else{
        let chinhno;
        nodechild = paperc.querySelectorAll(`section[fatherpart="${part.getAttribute("class").split(" ")[0]}"]`);
        console.log(nodechild);
        if(nodechild.length > 0){
            nodechild.forEach((ele,i)=>{
                if(ele.closest(`.${part.getAttribute("class").split(" ")[0]}`) == undefined || ele.closest(`.${part.getAttribute("class").split(" ")[0]}`) == null){
                    chinhno = ele;
                }
            })
            return chinhno;
        }
    }                        
}

function editContent(ele,mauCV) {
    if(!ele){
        return;
    }
    if (activeElement === ele) return;  
    if (activeElement) {
        removeToolbars(activeElement);
    }

    let add_n_move = document.createElement('div');
    let removeEle = document.createElement('div');
    // let repairFont = document.createElement('div');
    
    add_n_move.setAttribute("class", "edit_ContentCV add_Part");
    removeEle.setAttribute("class", 'edit_ContentCV remove_Part');
    // repairFont.setAttribute("class", 'edit_ContentCV repair_Font hidden');

    add_n_move.innerHTML = `<i class="fa-solid fa-plus add_up"></i> 
    <div><i class="fa-solid fa-angle-up remove_up"></i> <i class="fa-solid fa-angle-down remove_down"></i></div> 
    <i class="fa-solid fa-plus add_down"></i>`;

    removeEle.innerHTML = `<i class="fa-solid fa-trash"></i>`;
    
    ele.style.position = 'relative';
    ele.style.border = "1px solid black";
    ele.style.borderRadius = "8px";
    ele.appendChild(add_n_move);
    ele.appendChild(removeEle);
    // ele.appendChild(repairFont);

    // Update active element
    activeElement = ele;
    activeToolbars = [add_n_move, removeEle];

    ele.addEventListener("click", function(event) {
        if (event.target.classList.contains("move_up")) {
            editContent(ele); 
        } else if (event.target.classList.contains("move_down")) {
          console.log("remove_down clicked");
        }
    });

    // event in add_n_move 
    let moveUp = document.querySelector(".remove_up");
    let moveDown = document.querySelector(".remove_down");
    let addUp = document.querySelector(".add_up");
    let addDown = document.querySelector(".add_down");

    // ƒë·ªÉ d√†nh ƒë·ªÉ h·ªçc jquery m·ªõi l√†m ƒëc 
    let btnCancel = document.querySelector(".fa-ban");
    let btnBold = document.querySelector(".fa-bold");
    let btnItalic = document.querySelector(".fa-italic");
    let btnUDline = document.querySelector(".fa-underline");
    let btnListStyle = document.querySelector(".fa-list-ul");

    moveUp.addEventListener("click", function() {
        if(getTemplateCV_Now() == "paper_mau11" || getTemplateCV_Now() == "paper_mau12" || getTemplateCV_Now() == "paper_mau3"){
            if(ele.classList.contains("information")){
                alert("‚ùå Kh√¥ng Th·ªÉ Di Chuy·ªÉn Ph·∫ßn N√†y");
                return;
            }
        }
        if(ele.classList.contains("part_ct")){
            let elekhac;
            let a1 = combine_the_parts(ele);
            if(ele.previousElementSibling === null){
                elekhac = ele.closest(".paper").previousElementSibling.querySelectorAll(".part_ct");
                swapElements1(a1,elekhac[elekhac.length - 1]);
                if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
                    redistributeContent_when_Addele();
                }
                else{
                    if(ele.closest(".half-left")){
                        redistributeContent_when_Addele_2col(ele.closest(".half-left"));
                    }
                    else{
                        redistributeContent_when_Addele_2col(ele.closest(".half-right"));
                    }
                }
            }
            else{
                elekhac = ele.previousElementSibling;
                if(!ele.previousElementSibling.classList.contains("information")){
                    swapElements1(a1,elekhac);
                }
                if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
                    redistributeContent_when_Addele();
                }
                else{
                    if(ele.closest(".half-left")){
                        redistributeContent_when_Addele_2col(ele.closest(".half-left"));
                    }
                    else{
                        redistributeContent_when_Addele_2col(ele.closest(".half-right"));
                    }
                }
                // l√†m t∆∞∆°ng t·ª± v·ªõi movedown
            }
        }
        else{
            if(ele.previousElementSibling){
                    if(checkFatherPart(ele,ele.previousElementSibling)){
                        swapElements(ele,ele.previousElementSibling);
                    }
                    else{
                        console.log("Noooo");
                    }
            }
        }
    });
    //ele.closest(".paper").nextElementSibling
    moveDown.addEventListener("click", function() {
        if(getTemplateCV_Now() == "paper_mau11" || getTemplateCV_Now() == "paper_mau12" || getTemplateCV_Now() == "paper_mau3"){
            if(ele.classList.contains("information")){
                alert("‚ùå Kh√¥ng Th·ªÉ Di Chuy·ªÉn Ph·∫ßn N√†y");
                return;
            }
        }
        if(ele.classList.contains("part_ct")){
            let elekhac;
            console.log(ele.nextElementSibling);
            let a1 = combine_the_parts(ele);
            if(ele.nextElementSibling === null){
                if(ele.closest(".paper").nextElementSibling){
                    elekhac = ele.closest(".paper").nextElementSibling.querySelectorAll(".part_ct");
                    swapElements1(a1,elekhac[elekhac.length - 1]);
                    if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
                        redistributeContent_when_Addele();
                    }
                    else{
                        if(ele.closest(".half-left")){
                            redistributeContent_when_Addele_2col(ele.closest(".half-left"));
                        }
                        else{
                            redistributeContent_when_Addele_2col(ele.closest(".half-right"));
                        }
                    }
                }
            }
            else{
                elekhac = ele.nextElementSibling;
                if(!ele.nextElementSibling.classList.contains("information")){
                    swapElements1(a1,elekhac);
                }
                if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
                    redistributeContent_when_Addele();
                }
                else{
                    if(ele.closest(".half-left")){
                        redistributeContent_when_Addele_2col(ele.closest(".half-left"));
                    }
                    else{
                        redistributeContent_when_Addele_2col(ele.closest(".half-right"));
                    }
                }
            }
        }
        else{
            if(ele.nextElementSibling){
                    if(checkFatherPart(ele,ele.nextElementSibling)){
                        swapElements(ele.nextElementSibling,ele);
                    }
                    else{
                        console.log("Noooo");
                    }
                
            }
        }
    });

    // th√™m b√™n ngo√†i m·ª•c l·ªõnn
    function handleClickPart_CT(position) {
        let part_avai = document.querySelectorAll(".content-left .part_ct");
        let parts_exists = [...part_avai].map(ptu=>{
            return ptu.getAttribute("class").split(" ")[0];
        })
        console.log(parts_exists);
        addNewItem.classList.remove("hidden");

        list_addNewItem.forEach(function(e) {
            console.log(check_part_avai(e,parts_exists));
            if(check_part_avai(e,parts_exists) == false ) e.classList.add("not_available");
            else{
                e.onclick = function() {
                    let parts = e.getAttribute("class").split(" ")[2];
                    console.log("Ph·∫ßn Th√™m M·ªõi : ",parts);
                    if (position === "before") {
                        ele.insertAdjacentElement("beforebegin", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);                    
                        console.log(ele.previousElementSibling);
                        if(getTemplateCV_Now() == "paper_mau10" || getTemplateCV_Now() == "paper_mau9" || getTemplateCV_Now() == "paper_mau8" || getTemplateCV_Now() == "paper_mau6" || getTemplateCV_Now() == "paper_mau4" || getTemplateCV_Now() == "paper_mau1" || getTemplateCV_Now() == "paper_mau0"){
                            ele.previousElementSibling.querySelector(".title").classList.add("have_line");
                        }
                        switch(getTemplateCV_Now()){
                            case "paper_mau0":
                                setColor_mauConlai();
                                break;
                            case "paper_mau1": 
                                setColor_mauConlai();
                                break;
                            case "paper_mau2":
                                setColor_mau2();                          
                                break;
                            case "paper_mau3":
                                setColor_mau3();                              
                                break;
                            case "paper_mau4":
                                setColor_mauConlai();                             
                                break;
                            case "paper_mau5":
                                setColor_mau5();                              
                                break;
                            case "paper_mau6":
                                setColor_mauConlai();                             
                                break;
                            case "paper_mau7":
                                setColor_mau7();
                                break;
                            case "paper_mau8":
                                setColor_mau8();
                                break
                            case "paper_mau9":
                                setColor_mau9_mau10();
                                break;
                            case "paper_mau10":
                                setColor_mau9_mau10();                           
                                break;
                            case "paper_mau11":
                                setColor_mauConlai();
                                break;
                            case "paper_mau12":
                                setColor_mauConlai();                           
                                break;
                            default:
                                console.log("M·∫´u Kh√¥ng H·ª£p L·ªá");
                        }  
                        redistributeContent_when_Addele();
                    } 
                    else if (position === "after") {
                        if(handlewhenaddPart_ct(ele) !== undefined){
                            handlewhenaddPart_ct(ele).insertAdjacentElement("afterend", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);
                        }
                        else ele.insertAdjacentElement("afterend", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);                        
                        if(getTemplateCV_Now() == "paper_mau10" || getTemplateCV_Now() == "paper_mau9" || getTemplateCV_Now() == "paper_mau8" || getTemplateCV_Now() == "paper_mau6" || getTemplateCV_Now() == "paper_mau4" || getTemplateCV_Now() == "paper_mau1" || getTemplateCV_Now() == "paper_mau0"){
                            ele.nextElementSibling.querySelector(".title").classList.add("have_line");
                        }
                        switch(getTemplateCV_Now()){
                            case "paper_mau0":
                                setColor_mauConlai();
                                break;
                            case "paper_mau1": 
                                setColor_mauConlai();
                                break;
                            case "paper_mau2":
                                setColor_mau2();                          
                                break;
                            case "paper_mau3":
                                setColor_mau3();                              
                                break;
                            case "paper_mau4":
                                setColor_mauConlai();                             
                                break;
                            case "paper_mau5":
                                setColor_mau5();                              
                                break;
                            case "paper_mau6":
                                setColor_mauConlai();                             
                                break;
                            case "paper_mau7":
                                setColor_mau7();
                                break;
                            case "paper_mau8":
                                setColor_mau8();
                                break
                            case "paper_mau9":
                                setColor_mau9_mau10();
                                break;
                            case "paper_mau10":
                                setColor_mau9_mau10();                           
                                break;
                            case "paper_mau11":
                                setColor_mauConlai();
                                break;
                            case "paper_mau12":
                                setColor_mauConlai();                           
                                break;
                            default:
                                console.log("M·∫´u Kh√¥ng H·ª£p L·ªá");
                        }  
                        redistributeContent_when_Addele();  
                    }
                    addNewItem.classList.add("hidden");
                };
            }
        });
    }
    // fix l·ªói m·∫´u 2 c·ªôt ch check_avai
    function handleClickPart_CT_2col(position) {
        let part_avai_2col = document.querySelectorAll(".content-left .part_ct");
        let parts_exists_2col = [...part_avai_2col].map(ptu=>{
            return ptu.getAttribute("class").split(" ")[0];
        })
        addNewItem.classList.remove("hidden");
        list_addNewItem.forEach(function(e) {
            if(check_part_avai(e,parts_exists_2col) == false ) e.classList.add("not_available");
            else{
                e.onclick = function() {
                    let parts = e.getAttribute("class").split(" ")[2];
                    console.log("Ph·∫ßn Th√™m M·ªõi : ",parts);
                    if (position === "before") {
                        ele.insertAdjacentElement("beforebegin", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);                                              
                        if(getTemplateCV_Now() == "paper_mau4"){
                            let icon_crystal = document.createElement("section");
                            icon_crystal.classList.add("icon_crystal");
                            icon_crystal.style.backgroundColor = getColorCVNow();
                            console.log(icon_crystal);
                            ele.previousElementSibling.querySelector(".title").insertAdjacentElement("afterbegin",icon_crystal);
                        }
                        // Th√™m g·∫°ch ch√¢n
                        if(getTemplateCV_Now() == "paper_mau10" || getTemplateCV_Now() == "paper_mau9" || getTemplateCV_Now() == "paper_mau8" || getTemplateCV_Now() == "paper_mau6" || getTemplateCV_Now() == "paper_mau4" || getTemplateCV_Now() == "paper_mau1"){
                            ele.previousElementSibling.querySelector(".title").classList.add("have_line");
                        }
                        switch(getTemplateCV_Now()){
                            case "paper_mau0":
                                    setColor_mauConlai();
                                    break;
                                case "paper_mau1": 
                                    setColor_mauConlai();
                                    break;
                                case "paper_mau2":
                                    setColor_mau2();                          
                                    break;
                                case "paper_mau3":
                                    setColor_mau3();                              
                                    break;
                                case "paper_mau4":
                                    setColor_mauConlai();                             
                                    break;
                                case "paper_mau5":
                                    setColor_mau5();                              
                                    break;
                                case "paper_mau6":
                                    setColor_mauConlai();                             
                                    break;
                                case "paper_mau7":
                                    setColor_mau7();
                                    break;
                                case "paper_mau8":
                                    setColor_mau8();
                                    break
                                case "paper_mau9":
                                    setColor_mau9_mau10();
                                    break;
                                case "paper_mau10":
                                    setColor_mau9_mau10();                           
                                    break;
                                case "paper_mau11":
                                    setColor_mauConlai();
                                    break;
                                case "paper_mau12":
                                    setColor_mauConlai();                           
                                    break;
                                default:
                                    console.log("M·∫´u Kh√¥ng H·ª£p L·ªá");
                                }  
                        if(ele.closest(".half-left")){
                            redistributeContent_when_Addele_2col(ele.closest(".half-left"));
                            editContent(copy,mauCV);
                        }
                        else{
                            redistributeContent_when_Addele_2col(ele.closest(".half-right"));
                        }          
                    } 
                    else if (position === "after") {
                        // ki·ªÉm tra n·∫øu ·ªü gi·∫•y ngay b√™n d∆∞·ªõi m√† c√≥ c√°c ph√†n con c·ªßa ph·∫ßn hi·ªán t·∫°i ƒëang mu·ªën th√™m th√¨ ta s·∫Ω select all 
                        // ch√∫ng v√† ch√®n ph·∫ßn m·ªõi v√†o ph·∫ßn t·ª≠ ·ªü cu·ªëi c√πng trong gi·∫•y m·ªõi
                        if(handlewhenaddPart_ct(ele) !== undefined){
                            handlewhenaddPart_ct(ele).insertAdjacentElement("afterend", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);
                        }
                        else ele.insertAdjacentElement("afterend", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);                               
                        if(getTemplateCV_Now() == "paper_mau4"){
                            let icon_crystal = document.createElement("section");
                            icon_crystal.classList.add("icon_crystal");
                            icon_crystal.style.backgroundColor = getColorCVNow();
                            console.log(icon_crystal);
                            ele.nextElementSibling.querySelector(".title").insertAdjacentElement("afterbegin",icon_crystal);
                        }
                        if(getTemplateCV_Now() == "paper_mau10" || getTemplateCV_Now() == "paper_mau9" || getTemplateCV_Now() == "paper_mau8" || getTemplateCV_Now() == "paper_mau6" || getTemplateCV_Now() == "paper_mau4" || getTemplateCV_Now() == "paper_mau1"){
                            if(ele.nextElementSibling){
                                ele.nextElementSibling.querySelector(".title").classList.add("have_line");
                            }
                        }
                        switch(getTemplateCV_Now()){
                            case "paper_mau0":
                                setColor_mauConlai();
                                break;
                            case "paper_mau1": 
                                setColor_mauConlai();
                                break;
                            case "paper_mau2":
                                setColor_mau2();                          
                                break;
                            case "paper_mau3":
                                setColor_mau3();                              
                                break;
                            case "paper_mau4":
                                setColor_mauConlai();                             
                                break;
                            case "paper_mau5":
                                setColor_mau5();                              
                                break;
                            case "paper_mau6":
                                setColor_mauConlai();                             
                                break;
                            case "paper_mau7":
                                setColor_mau7();
                                break;
                            case "paper_mau8":
                                setColor_mau8();
                                break
                            case "paper_mau9":
                                setColor_mau9_mau10();
                                break;
                            case "paper_mau10":
                                setColor_mau9_mau10();                           
                                break;
                            case "paper_mau11":
                                setColor_mauConlai();
                                break;
                            case "paper_mau12":
                                setColor_mauConlai();                           
                                break;
                            default:
                                console.log("M·∫´u Kh√¥ng H·ª£p L·ªá");
                            }  
                        if(ele.closest(".half-left")){
                            redistributeContent_when_Addele_2col(ele.closest(".half-left"));
                        }
                        else{
                            redistributeContent_when_Addele_2col(ele.closest(".half-right"));
                        }        
                    }
                    addNewItem.classList.add("hidden");
                };
            }
        });
    }
    // th√™m ph·∫ßn item trong m·ª•c l·ªõn 
    function handleClickItem_In_Part_CT(position) {
            let copy = ele.cloneNode(true);
            if (position === "before") {
                ele.insertAdjacentElement("beforebegin", copy);  
                redistributeContent_when_Addele();                         
                editContent(copy,mauCV);           
            } 
            else if (position === "after") {
                ele.insertAdjacentElement("afterend", copy);
                redistributeContent_when_Addele();                          
                editContent(copy,mauCV);           
            }
    }
    function handleClickItem_In_Part_CT_2col(position) {
        let copy = ele.cloneNode(true);
            if (position === "before") {
                ele.insertAdjacentElement("beforebegin", copy);  
                editContent(copy,mauCV);           
                if(ele.closest(".half-left")){                  
                    redistributeContent_when_Addele_2col(copy.closest(".half-left"));
                }
                else{
                    
                    redistributeContent_when_Addele_2col(copy.closest(".half-right"));
                }                               
            } 
            else if (position === "after") {
                ele.insertAdjacentElement("afterend", copy);
                editContent(copy,mauCV);
                if(ele.closest(".half-left")){                    
                    redistributeContent_when_Addele_2col(copy.closest(".half-left"))
                }
                else{
                    
                    redistributeContent_when_Addele_2col(copy.closest(".half-right"))
                }                                
            }
    }
    console.log("T·∫°i Ph√¢n Ph·∫ßn t·ª≠",ele);
    console.log("addUp:", addUp);
    console.log("addDown:", addDown);
    // Th√™m s·ª± ki·ªán cho addUp v√† addDown
    addUp.addEventListener("click", function() {
        if(getTemplateCV_Now() == "paper_mau12" || getTemplateCV_Now() == "paper_mau3"){
            if(ele.classList.contains("information")){
                alert("Kh√¥ng th·ªÉ th·ª±c hi·ªán th√™m ·ªü ph·∫ßn n√†y !");
                return;
            }
        }
        console.log("M·∫´u Cv Khi nh·∫•n add :",mauCV);
        if(mauCV == "mau_2col"){
            console.log(ele.closest(".part_in_paper")); 
            if(ele.classList.contains("item_in_part")){
                handleClickItem_In_Part_CT_2col("before");
            }
            else handleClickPart_CT_2col("before");
        }
        else{
            if(ele.classList.contains("item_in_part")){
                handleClickItem_In_Part_CT("before");
            }
            else handleClickPart_CT("before");
        }
    });
    // fix n·ªët tr√™n add upp v√† x√≥a mauCv ·ªü m·∫´u ch·ªó c√≥ getremind ( l·∫•y ƒë·ªô d√†i)
    addDown.addEventListener("click", function() {
        console.log("M·∫´u Cv Khi nh·∫•n add :",mauCV);
        if(getTemplateCV_Now() == "paper_mau12" || getTemplateCV_Now() == "paper_mau3"){
            if(ele.classList.contains("information")){
                alert("Kh√¥ng th·ªÉ th·ª±c hi·ªán th√™m ·ªü ph·∫ßn n√†y !");
                return;
            }
        }
        let loaiCV = (getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2") ? "mau_1col" : "mau_2col";
        if(loaiCV == "mau_2col"){
            console.log(ele.closest(".part_in_paper")); 
            if(ele.classList.contains("item_in_part")){
                handleClickItem_In_Part_CT_2col("after");
            }
            else handleClickPart_CT_2col("after");
        }
        else{
            if(ele.classList.contains("item_in_part")){
                handleClickItem_In_Part_CT("after");
            }
            else handleClickPart_CT("after");
        }
    });
    removeEle.addEventListener("click",function(){
        let typepart = ele.getAttribute("class").split(" ")[0]
        let list_partItem = document.querySelector(`.list_partItem > div.${typepart}`);
        if(list_partItem){
            list_partItem.classList.remove("not_available");
        }
        if(ele.classList.contains("information")){
            alert("Kh√¥ng Th·ªÉ X√≥a Ph·∫ßn N√†y");
        }
        else{
            Fill_processing(ele); // s·ª≠a l·ªói khi nh·∫•n ph√≠m x√≥a th√¨ m·ªõi g·ªçi h√†m n√†y 
            handleRegion();
        }
    })
    // khi ch·ªçn ph·∫ßn n√†y r th√¨ nh·ªØng ph·∫ßn kh√°c kh√¥ng th·ªÉ b√¥i ƒëen n·ªØa 
    // console.error(currentSelection);
    
    // [bug] l√†m ch·ª©c nƒÉng fontstyle khi b√¥i ƒëen ƒëo·∫°n vƒÉn b·∫£n
    // btnBold.addEventListener("click",()=>{
    //     console.log("VƒÉn B·∫£n ƒë∆∞·ª£c b√¥i ƒë·∫≠m l√† : ",selectedText);
    // })
    // [bug] selection ch·ªâ nh·∫≠n 1 ph·∫ßn t·ª≠ ƒë√¢u ti√™n ch c√≥ s·ª± thay ƒë·ªïi 
}

function combine_the_parts(part){
    console.log(part);
    let namefatherpart = part.getAttribute("class").split(" ")[0];
    console.log(namefatherpart);
    childparts = content_left.querySelectorAll(`section[fatherpart="${namefatherpart}"]`);
    console.log(childparts);
    childparts.forEach(elem=>{
        part.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",elem);
    })
    return part;
}
// [bug] Ph·∫ßn x√°c nh·∫≠p l·∫°i c√°c ptu khi qua paper m·ªõi ho·∫∑c v·ªÅ paper c≈© 

// console.log(suggest[0].heading.title);
// console.log(partsBig_in_CV[0].getAttribute("class").split(" ")[0]);

// test
textElements.forEach((ele)=>{
    ele.onclick = () =>{      
        suggest.forEach((e)=>{
            if(ele.closest(".part_ct").getAttribute("class").split(" ")[0] == e.heading.title){
                console.log(e);
            }
        })
    }
})


// Chuy·ªÉn ƒë·ªông trong ph√¥ng ch·ªØ 
let btn_font_left = document.querySelector('.slide_font>button:first-child');
let btn_font_right = document.querySelector('.slide_font>button:last-child');
let list_font = document.querySelector('.list_fonts');
let khungnhin_f = document.querySelector('.khungnhin_f');
let fonts = document.querySelectorAll('.list_fonts div');

let check = 0;
btn_font_left.onclick = function(e){
    if(check < 1){
        btn_font_left.style.opacity = '0.4';
        e.preventDefault();
    }
    else{
        btn_font_right.style.opacity = '1';
        check--;
    }
    console.log(check);
    list_font.style.marginLeft = `-${check * khungnhin_f.offsetWidth}px`;
}

btn_font_right.onclick = function(e){
    if(check > fonts.length - 2){
        btn_font_right.style.opacity = '0.4';
        e.preventDefault();
    }
    else{
        btn_font_left.style.opacity = '1';
        check++;
    }
    console.log(check);
    list_font.style.marginLeft = `-${check * khungnhin_f.offsetWidth}px`;
}


// ph·∫ßn task Ph√¥ng ch·ªØ;
const task = document.querySelectorAll('.congcu1 li');
let font = list_font.querySelectorAll('li');
let tab = document.querySelectorAll('.window');

font.forEach(function(ele){
    ele.onclick = function(e){
        let papers = document.querySelectorAll('.paper');
        papers.forEach(function(ele){
            ele.style.fontFamily = e.target.style.fontFamily;
            if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
                redistributeContent_when_Addele();
            }
            else{
                redistributeContent_when_Addele_2col(ele.querySelector(".half-left"));
                redistributeContent_when_Addele_2col(ele.querySelector(".half-right"));
            }
        })
    }
})

let font_size = document.querySelectorAll(".font_size input");

font_size.forEach(function(ele){
    ele.onchange = function(e){
        let papers = document.querySelectorAll('.paper');
        font_size.forEach(function(ele){
            ele.checked = false;
        })
        ele.checked = true;
        papers.forEach(function(ele){
            ele.style.fontSize = e.target.nextElementSibling.getAttribute("data_size");
            if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2"){
                redistributeContent_when_Addele();
            }
            else{
                redistributeContent_when_Addele_2col(ele.querySelector(".half-left"));
                redistributeContent_when_Addele_2col(ele.querySelector(".half-right"));
            }
        })
    }
})

const closeAllWindows = () => {
    tab.forEach(window => {
        window.classList.add('hidden'); // Th√™m class 'hidden' ƒë·ªÉ ·∫©n window
    });
};

// Th√™m s·ª± ki·ªán click cho t·ª´ng tab
task.forEach(ta => {
    ta.addEventListener('click', (event) => {
        const tabId = ta.getAttribute('tabid'); // L·∫•y tabid c·ªßa tab
        // if(!tab[tabId - 1].classList.contains('hidden')){
        //     tab[tabId - 1].classList.add('hidden');  
        // }
        // NgƒÉn ch·∫∑n s·ª± ki·ªán click lan ra b√™n ngo√†i
        event.stopPropagation();

        // ƒê√≥ng t·∫•t c·∫£ c√°c window
        closeAllWindows();

        // M·ªü window t∆∞∆°ng ·ª©ng v·ªõi tab ƒë∆∞·ª£c click
        tab.forEach((cc=>{
            cc.classList.add('hidden');
        }))
        tab[tabId - 1].classList.remove('hidden');        
    });
});

// X·ª≠ l√Ω click ra b√™n ngo√†i c√°c window
document.addEventListener('click', () => {
    closeAllWindows(); // ƒê√≥ng t·∫•t c·∫£ c√°c window khi click ra ngo√†i
});

// NgƒÉn s·ª± ki·ªán click b√™n trong window b·ªã lan ra ngo√†i
tab.forEach(window => {
    window.addEventListener('click', (event) => {
        event.stopPropagation();
    });
});

// Ph·∫ßn task m√†u s·∫Øc 

let btn_color_left = document.querySelector('.ds_mau>button:first-child');
let btn_color_right = document.querySelector('.ds_mau>button:last-child');
let khungnhin_c = document.querySelector('.khungnhin_c');
let list_color = document.querySelector('.daimau');
let colors = document.querySelectorAll('.bangmau');
let daianhcv = document.querySelector(".daianhcv");
let list_cv = document.querySelectorAll(".daianhcv li");
let introduce = document.querySelector(".introduce");
let an_anh = document.querySelector(".an_anh");
let imgCV = document.querySelector(".heading_paper img");
let is_default = false;
// m√†u hi·ªán t·∫°i 
let currentColor = "#f55555";
// heading_paper.style.backgroundColor = currentColor;
// ph·∫ßn title th√™m m·ªõi v√†o nh·ªØng m·∫´u c√≥ 
let title_in4 = document.createElement("section");
    title_in4.innerHTML = `<i style="margin-left: 3px;" class="fa-solid fa-info"></i>
                            <p>
                                Information
                            </p>`   
    title_in4.classList.add("title");

function resetCV(paper) {
    console.log("paper ·ªü h√†m resetCv",paper);
    let title_HD = document.querySelector(".title_HD");
    let in4_individual = document.querySelector(".information");
    let introduce = document.querySelector(".introduce");
    let contentCV = document.querySelector(".content_CV");
    let heading_paper = document.querySelector(".heading_paper");
    let img_CV = document.querySelector(".anh_CV img");
    let part_another = document.querySelector(".half-left");
    let personalIn4 = document.querySelector(".personal_in4");
    let anh_CV = document.querySelector(".anh_CV");
    let part_two = paper.querySelector(".half-right");
    
    paper.classList.remove(
        "paper_mau1", "paper_mau2", "paper_mau3", "paper_mau4", 
        "paper_mau5", "paper_mau6", "paper_mau7", "paper_mau8", 
        "paper_mau9", "paper_mau10", "paper_mau11", "paper_mau12"
    );

    heading_paper.classList.remove(
        "hd_mau2", "hd_mau3", "heading_paper_mau4", "heading_paper_mau5", 
        "heading_paper_mau6", "heading_paper_mau7", "heading_paper_mau8", 
        "heading_paper_mau9", "heading_paper_mau10", "heading_paper_mau11", 
        "heading_paper_mau12"
    );
    title_cv = document.querySelectorAll(".title");
    
    let mau;
    if(paper.getAttribute("class").split(" ").length > 11){
        mau = paper.getAttribute("class").split(" ")[1].substring(6);
    }
    handleErrorHD();
    // m·∫´u 1
    title_in4.style.display = "none";
    introduce.insertAdjacentElement("afterbegin",title_HD);
    title_HD.classList.remove("item_in_part");

    // m·∫´u 3
    heading_paper.insertAdjacentElement("afterbegin",introduce);
    introduce.classList.remove("introduce_mau3");
    introduce.insertAdjacentElement("afterbegin",in4_individual);
    introduce.insertAdjacentElement("afterbegin",title_HD);
    heading_paper.insertAdjacentElement("afterbegin",document.querySelector(".anh_CV"));
    contentCV.style.marginTop = "0";
    if(paper.querySelector(".phan_phu")){
        paper.querySelector(".phan_phu").remove();
        title_in4.style.display = "none";
    }
    title_cv.forEach(ele=>{
        ele.classList.remove("ct_mau3");
    })
    title_cv.forEach(ele=>{
        ele.classList.add("have_line");
    })
    partsBig_in_CV.forEach(ele=>{
        ele.classList.remove("part_ct_mau3");
    })
    // M·∫´u 4
    in4_individual.classList.remove("in4_mau4");
    heading_paper.classList.add("part_one");
    contentCV.classList.add("part_two");
    if(part_another){
        if(part_another.nextElementSibling){
            if(!part_another.nextElementSibling.classList.contains("content_CV")){
                part_another.nextElementSibling.classList.remove("part_two");
                part_another.nextElementSibling.removeAttribute("style");
            }
        }
        part_another.removeAttribute("style");
    }
    // if(part_another.closest(".content_CV")){
    //     part_another.remove();
    // }
    paper.querySelectorAll(".title").forEach(ele=>{
        if(ele.querySelector(".icon_crystal")){
            ele.querySelector(".icon_crystal").remove();
        }
    })
    // M·∫´u 5
    introduce.classList.remove("introduce_mau5");

    // M·∫´u 7 
    imgCV.classList.remove("img_cv_mau7");
    in4_individual.classList.remove("information_mau7");
    contentCV.classList.remove("content_cv_mau7");
    // M·∫´u 8
    if(mau == "mau8"){
        contentCV.insertAdjacentElement("afterbegin",title_HD);
        title_HD.removeAttribute("style");
    }
    in4_individual.querySelectorAll("ul>li").forEach(ele=>{
        ele.classList.remove("item_in_part");
    })
    // m·∫´u 9 
    paper.insertAdjacentElement("afterbegin",heading_paper);
    in4_individual.removeAttribute("style");
    // M·∫´u 11
    personalIn4.classList.remove("item_in_part");
    anh_CV.classList.remove("item_in_part");
    // M·∫´u 12
    in4_individual.classList.remove("information_mau12");
    heading_paper.querySelectorAll(".information ul>li label:first-child i").forEach(ele=>{
        ele.style.display = "none";
    })
    heading_paper.querySelectorAll(".information ul>li label:first-child b").forEach(ele=>{
        ele.classList.remove("hidden");
    })
    if (img_CV.classList.contains("hidden")) {
        img_CV.classList.remove("hidden");
    }
}

let mausac = document.querySelectorAll('.daimau li>span');
let title_HD  = document.querySelector(".title_HD");
let anh_CV = document.querySelector(".anh_CV");
function xoa_ky_tu(paper){
    paper.querySelectorAll(".title").forEach(ele=>{
        if(ele.querySelector(".icon_crystal")){
            ele.querySelector(".icon_crystal").remove();
        }
    })
}
function handleErrorHD(){
    let papers = Array.from(content_left.querySelectorAll('.paper'));
    papers.forEach((pa,index)=>{
        let part_two = pa.querySelector(".half-right");
        if(index == 0){
            let sections_handle = pa.querySelectorAll('.introduce > section:not(.title_HD):not(.information)');
            console.log("----------------------------------------------------------------------------------------");
            if(sections_handle.length > 0){
                sections_handle.forEach(ele=>{
                    part_two.insertAdjacentElement("beforeend",ele);
                    redistributeContent_when_Addele_2col(part_two);
                })
            }
        }
        else{
            let sections_inhd_handle = pa.querySelectorAll('.half-left > section:not(.title_HD):not(.information)');
            sections_inhd_handle.forEach(ele=>{
                part_two.insertAdjacentElement("beforeend",ele);
                redistributeContent_when_Addele_2col(part_two);
            })
        }
    })
}
function convert(paper){
    let list_item_in_part = paper.querySelector(".half-left").querySelectorAll(".paragraph");
    console.log(list_item_in_part);
    if(list_item_in_part.length > 0){
        list_item_in_part.forEach(e=>{
            paper.querySelector(".half-right").appendChild(e);
            redistributeContent_1col(paper);
        })
    }
}
function removeClass_in_hd(heading_paper){
    heading_paper.classList.remove("half-left");
}
function addClassToStart(element, newClass) {
    // T√°ch c√°c class hi·ªán c√≥ th√†nh m·ªôt m·∫£ng
    const currentClasses = element.className.split(' ');
    
    // Ki·ªÉm tra n·∫øu class m·ªõi ƒë√£ t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ th√™m v√†o ƒë·∫ßu
    if (!currentClasses.includes(newClass)) {
        currentClasses.unshift(newClass);
        element.className = currentClasses.join(' '); // G√°n l·∫°i chu·ªói class
    }
}
function Adjust_part_left(paper){
    let heading_paper = paper.querySelector(".heading_paper") || "";
    let part_two = paper.querySelector(".half-right");
    part_two.previousElementSibling.classList.add("half-left");
    heading_paper.classList.remove("half-left");
}
function Mau0(paper){
    xoa_ky_tu(paper);
    in4_individual = paper.querySelector(".information") || ""; 
    title_HD = paper.querySelector(".title_HD") || "";
    let heading_paper = paper.querySelector(".heading_paper");
    let contentCV = paper.querySelector(".content_CV");
    let part_two = paper.querySelector(".half-right");
    let introduce = paper.querySelector(".introduce") || "";
    paper.setAttribute("class","paper");
    if(title_HD){
        if(title_HD.closest(".content_CV")){
            in4_individual.insertAdjacentElement("afterbegin",title_HD);
        }
    }
    console.log("///////////////////////////");
    handleErrorHD();
    contentCV.style.paddingTop = "0";
    if(!heading_paper.querySelector(".anh_CV")){
        paper.style.paddingTop = "24px";
    }
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    heading_paper.setAttribute("style","");
    heading_paper.setAttribute("class","heading_paper part_in_paper");

    if(paper.previousElementSibling){
        heading_paper.style.display = "none";
    }
    paper.insertAdjacentElement("afterbegin",heading_paper);
    paper.style.marginTop = "24px";
    paper.querySelector(".half-right").setAttribute("style","");
    part_two.removeAttribute("style");
    convert(paper);
}
function Mau1(paper){
    xoa_ky_tu(paper);
    let introduce,title_HD,in4_individual,img_CV;
    paper.setAttribute("class","paper");
    let heading_paper = paper.querySelector(".heading_paper");
    let contentCV = paper.querySelector(".content_CV");
    let part_one = paper.querySelector(".half-left")
    let part_two = paper.querySelector(".half-right");
    
    introduce = paper.querySelector(".introduce") || "";

    title_HD = paper.querySelector(".title_HD") || "";
    in4_individual = paper.querySelector(".information") || ""; 
    img_CV = paper.querySelector(".anh_CV img") || "";
    handleErrorHD();
    // let heading_paper = document.querySelector(".heading_paper");
    //     heading_paper.style.display = "block";
    if(introduce)
        introduce.classList.add("ct_in_sectionSM");
    if(title_in4){
        title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part","have_line");
        title_in4.style.display = "flex";
    }
    if(img_CV)
        img_CV.parentNode.classList.add("item_in_part");
    if(title_HD){
        title_HD.classList.add("item_in_part");
        contentCV.insertBefore(title_HD,contentCV.firstChild);
    }
    if(in4_individual){
        in4_individual.classList.add("paragraph","part_ct","paragraph");
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        in4_individual.querySelectorAll("ul>li").forEach(ele=>{
            ele.classList.add("paragraph","item_in_part","content_in_CV","possible_Part");
        })
    }
    // }
    heading_paper.classList.remove("heading_paper_mau7");
    imgCV.removeAttribute("style");
    part_one.removeAttribute("style");
    paper.classList.add("paper_mau1");
    part_two.removeAttribute("style");
    paper.style.paddingTop = "";
    heading_paper.setAttribute("style","");
    heading_paper.setAttribute("class","heading_paper part_in_paper");
    addClassToStart(heading_paper,"half-left");

    paper.insertAdjacentElement("afterbegin",heading_paper);
    contentCV.setAttribute("style","");
    paper.querySelector(".heading_paper").style.display = "block";

    redistributeContent_2col(heading_paper);
    redistributeContent_2col(part_two);
}
function Mau2(paper){
    let heading_paper = paper.querySelector(".heading_paper");
    title_cv = paper.querySelectorAll(".title") || "";
    let contentCV = paper.querySelector(".content_CV");
    paper.setAttribute("class","paper");
    paper.classList.add("paper_mau2");
    handleErrorHD();
    heading_paper.setAttribute("style","");
    contentCV.setAttribute("style","");
    contentCV.querySelector(".half-right").setAttribute("style","");
    imgCV.removeAttribute("style");
    Adjust_part_left(paper);
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.paddingTop = "24px";
        }
    }
    paper.style.paddingTop = "0";
    convert(paper);
}
function Mau3(paper){

    let introduce,title_HD,in4_individual,title_cv;
    let contentCV = paper.querySelector(".content_CV");
    let heading_paper = paper.querySelector(".heading_paper");
    paper.setAttribute("class","paper");
    title_cv = paper.querySelectorAll(".title") || "";
    introduce = paper.querySelector(".introduce")|| "";
    title_HD = paper.querySelector(".title_HD") || "";
    contentCV.classList.remove("part_two");
    heading_paper.classList.remove("part_one");

    let part_two = paper.querySelector(".half-right");
    handleErrorHD();
    part_two.classList.add("part_two");
    part_two.setAttribute("style","");
    paper.style.paddingTop = "";
    if(introduce){
        in4_individual = introduce.querySelector(".information") || ""; 
    }
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            contentCV.style.paddingTop = "24px";
        }
    }
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    part_one.classList.add("part_one");
    part_one.setAttribute("style",""); 
    if(introduce || title_HD || in4_individual ){
        introduce.classList.add("ct_in_sectionSM");
        introduce.classList.add("introduce_mau3");
        title_HD.classList.add("item_in_part");
        in4_individual.classList.remove("part_ct");
        
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
        title_in4.style.display = "flex";
        
        let sp_part = document.createElement("section");
        let sp_part2 = document.createElement("section");
        sp_part.classList.add("phan_phu");

        // ph·∫ßn ·ªü d∆∞·ªõi 
        paper.insertAdjacentElement("afterbegin",sp_part);
        sp_part.append(introduce);

        // Ph·∫ßn ·ªü tr√™n c√πng 
        sp_part2.append(paper.querySelector(".anh_CV"));
        sp_part2.append(in4_individual);

        // th√™m gi·∫ßn tr√™n c√πng l√™n tr√™n ph·∫ßn ph·ª• 
        sp_part.insertAdjacentElement("afterbegin",sp_part2);   
        contentCV.style.marginTop = `${sp_part.offsetHeight - 20}px`;  
        sp_part.querySelectorAll(".information ul>li label:first-child>b").forEach(ele=>{
            ele.classList.add("hidden");
        })
        sp_part.querySelectorAll(".information ul>li label:first-child>i").forEach(ele=>{
            ele.style.display = "block";
        })
        title_cv.forEach(ele=>{
            ele.classList.remove("have_line");
        })
    }
    imgCV.removeAttribute("style");
    heading_paper.setAttribute("style","");
    heading_paper.classList.add("hd_mau3");
    heading_paper.style.display = "block";
    paper.insertAdjacentElement("afterbegin",heading_paper);
    paper.classList.add("paper_mau3");

    redistributeContent_2col(part_two);   
}
function Mau4(paper){
    let introduce , title_HD , in4_individual;
    imgCV.classList.add("hidden");
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    let heading_paper = paper.querySelector(".heading_paper");
    let contentCV = paper.querySelector(".content_CV");
    let part_two = contentCV.querySelector(".half-right");

    // handleErrorHD();
    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
    contentCV.classList.remove("part_two");
    contentCV.style.width = "100%";
    heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.padding = "24px 0";
        }
    }
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
        in4_individual.classList.add("paragraph","part_ct","paragraph","in4_mau4");

        in4_individual.insertAdjacentElement("afterbegin",title_in4);

        part_one.insertAdjacentElement("afterbegin",in4_individual);
    }
        
        // Ph·∫ßn n·ª≠a b√™n tr√°i
        part_one.classList.add("part_one");
        part_two.classList.add("part_two");
        
        introduce.classList.add("ct_in_sectionSM");
        title_HD.classList.add("item_in_part");
        title_in4.style.display = "flex";
        
        title_in4.classList.add("have_line");
        introduce.insertAdjacentElement("afterbegin",title_HD);
        heading_paper.setAttribute("class","heading_paper part_in_paper");
        heading_paper.classList.add("heading_paper_mau4"); 
        
        paper.classList.add("paper_mau4");
        contentCV.querySelectorAll(".title").forEach(ele=>{
            let icon_crystal = document.createElement("section");
            icon_crystal.classList.add("icon_crystal");
            icon_crystal.style.backgroundColor = "#f55555"; 
            ele.insertAdjacentElement("afterbegin",icon_crystal);
        })
        
        // let item_in_each_paper = contentCV.querySelectorAll(".item_in_part");
        redistributeContent_2col(part_one);
        redistributeContent_2col(part_two); 
        
}
function Mau5(paper){
    xoa_ky_tu(paper);
    let introduce , title_HD , in4_individual;
    imgCV.classList.add("hidden");
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    let heading_paper = paper.querySelector(".heading_paper");
    let contentCV = paper.querySelector(".content_CV");
    let part_two = contentCV.querySelector(".half-right");
    // handleErrorHD();
    contentCV.style.width = "100%";

    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
    contentCV.classList.remove("part_two");
    heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.padding = "24px 0";
        }
    }
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
            in4_individual.querySelectorAll("li").forEach(li=>{
                li.classList.add("item_in_part");
            })
            in4_individual.classList.add("paragraph","part_ct","paragraph","in4_mau4");

            in4_individual.insertAdjacentElement("afterbegin",title_in4);

            part_one.insertAdjacentElement("afterbegin",in4_individual);
        }
        
        // Ph·∫ßn n·ª≠a b√™n tr√°i
        part_one.classList.add("part_one");
        part_two.classList.add("part_two");
        
        introduce.classList.add("ct_in_sectionSM","introduce_mau5");
        title_HD.classList.add("item_in_part");
        title_in4.style.display = "flex";
        
        title_in4.classList.add("have_line");
        introduce.insertAdjacentElement("afterbegin",title_HD);
        heading_paper.setAttribute("class","heading_paper part_in_paper");
        heading_paper.classList.add("heading_paper_mau5"); 
        heading_paper.removeAttribute("style");
        paper.classList.add("paper_mau5");
        
        // let item_in_each_paper = contentCV.querySelectorAll(".item_in_part");
        redistributeContent_2col(part_one);
        redistributeContent_2col(part_two); 
}
function Mau6(paper){
    xoa_ky_tu(paper);
    let introduce , title_HD , in4_individual;
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    title_cv = document.querySelectorAll(".title");
    let heading_paper = paper.querySelector(".heading_paper") || "";
    let contentCV = paper.querySelector(".content_CV");
    let part_two = contentCV.querySelector(".half-right");
    contentCV.style.width = "100%";
    
    // handleErrorHD();
    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
    contentCV.classList.remove("part_two");
    heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.paddingLeft = "24px";
            contentCV.style.paddingRight = "24px";

        }
    }

    title_cv.forEach(ele=>{
        ele.classList.add("have_line");
    })
    
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
        in4_individual.classList.add("paragraph","part_ct","paragraph","in4_mau4");
        
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        
        part_one.insertAdjacentElement("afterbegin",in4_individual);
    }
    // Ph·∫ßn n·ª≠a b√™n tr√°i
    part_one.classList.add("part_one");
    part_two.classList.add("part_two");
    
    introduce.classList.add("ct_in_sectionSM");
    title_HD.classList.add("item_in_part");
    title_in4.style.display = "flex";
    
    anh_CV.querySelector("img").classList.remove("hidden");
    introduce.classList.remove("introduce_mau5","introduce_mau3");

    title_in4.classList.add("have_line");
    introduce.insertAdjacentElement("afterbegin",title_HD);
        heading_paper.setAttribute("class","heading_paper part_in_paper"); 
        
        paper.classList.add("paper_mau6");
        contentCV.removeAttribute("style");
        heading_paper.classList.add("heading_paper_mau6");
        
        // let item_in_each_paper = contentCV.querySelectorAll(".item_in_part");
        redistributeContent_2col(part_one);
        redistributeContent_2col(part_two); 
}
function Mau7(paper){

    xoa_ky_tu(paper);
    let introduce , title_HD , in4_individual;
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    title_cv = document.querySelectorAll(".title");
    let heading_paper = paper.querySelector(".heading_paper");
    let contentCV = paper.querySelector(".content_CV");
    let part_two = contentCV.querySelector(".half-right");

    // handleErrorHD();
    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
    contentCV.classList.remove("part_two");
    heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.padding = "24px 0";
        }
    }
    title_cv.forEach(ele=>{
        ele.classList.remove("have_line");
    })
    anh_CV.querySelector("img").classList.remove("hidden");
    introduce.classList.remove("introduce_mau5");
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
        in4_individual.classList.add("paragraph","part_ct","paragraph","information_mau7");
        
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        
        part_one.insertAdjacentElement("afterbegin",in4_individual);
    }
    
    // Ph·∫ßn n·ª≠a b√™n tr√°i
    part_one.classList.add("part_one");
    part_two.classList.add("part_two");
    imgCV.removeAttribute("style");
    imgCV.style.border = "4px solid #aaaaaa";
    introduce.classList.add("ct_in_sectionSM");
    title_HD.classList.add("item_in_part");
    title_in4.style.display = "flex";
    title_HD.querySelector("section:first-child").style.margin = "0px";

    introduce.insertAdjacentElement("afterbegin",title_HD);
        heading_paper.setAttribute("class","heading_paper part_in_paper"); 
        
        paper.classList.add("paper_mau7");
        heading_paper.classList.add("heading_paper_mau7");
        contentCV.removeAttribute("style");
        redistributeContent_2col(part_one);
        redistributeContent_2col(part_two);
}
function Mau8(paper){

    xoa_ky_tu(paper);
    let introduce,title_HD,in4_individual,img_CV;
    paper.setAttribute("class","paper");
    let heading_paper = paper.querySelector(".heading_paper");
    let contentCV = paper.querySelector(".content_CV");
    let part_one = paper.querySelector(".half-left");
    let part_two = contentCV.querySelector(".half-right");

    introduce = paper.querySelector(".introduce") || "";
    title_HD = paper.querySelector(".title_HD") || "";
    in4_individual = paper.querySelector(".information") || ""; 
    img_CV = paper.querySelector(".anh_CV img") || "";
    handleErrorHD();
    
    if(introduce){
        introduce.classList.add("ct_in_sectionSM");
        introduce.classList.remove("introduce_mau5","introduce_mau3");
    }
    if(title_in4){
        title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
        title_in4.style.display = "flex";
    }
    if(img_CV)
        img_CV.parentNode.classList.add("item_in_part");
    if(title_HD){
        title_HD.classList.add("item_in_part");
        contentCV.insertBefore(title_HD,contentCV.firstChild);
    }
    if(in4_individual){
        in4_individual.classList.add("paragraph","part_ct","paragraph");
        in4_individual.style.display = "inline-block";
        in4_individual.insertAdjacentElement("afterbegin",title_in4);

        in4_individual.querySelectorAll("li").forEach(ele=>{
            ele.classList.add("paragraph","item_in_part","content_in_CV","possible_Part");
        })
        in4_individual.querySelectorAll("section").forEach(ele=>{
            ele.style.width = "100%";
        })
    }   
    heading_paper.classList.remove("heading_paper_mau7");
    
    part_two.removeAttribute("style");
    paper.classList.add("paper_mau8");
    paper.style.marginTop = "24px";
    paper.style.paddingTop = "";
    paper.querySelector(".heading_paper").style.display = "block";
    paper.insertAdjacentElement("beforeend",heading_paper);
    contentCV.setAttribute("style","");
    imgCV.removeAttribute("style");
    heading_paper.setAttribute("style","");
    heading_paper.setAttribute("class","heading_paper part_in_paper");
    addClassToStart(heading_paper,"half-left");
    part_one.classList.remove("half-left");
    redistributeContent_2col(heading_paper);
    redistributeContent_2col(part_two);
}
function Mau9(paper){
    xoa_ky_tu(paper);
    let introduce , title_HD , in4_individual;
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    title_cv = document.querySelectorAll(".title");
    let heading_paper = paper.querySelector(".heading_paper") || "";
    let contentCV = paper.querySelector(".content_CV");
    let part_two = contentCV.querySelector(".half-right");
    
    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part","have_line");
    contentCV.classList.remove("part_two");
    // heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.padding = "24px 0";
        }
    }
    // handleErrorHD();
    title_cv.forEach(ele=>{
        ele.classList.add("have_line");
    })
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
        in4_individual.classList.add("paragraph","part_ct","in4_mau4");     
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        part_one.insertAdjacentElement("afterbegin",in4_individual);
        in4_individual.style.display = "inline-block";
        in4_individual.style.width = "100%";
    }
    
    // Ph·∫ßn n·ª≠a b√™n tr√°i
    part_one.classList.add("part_one");
    // part_one.style.width = "40%";
    part_one.style.height = "-1%";
    part_one.style.paddingRight = "12px";
    part_one.style.borderRight = "1px solid #ddd";
    // Ph·∫ßn n·ª≠a b√™n ph·∫£i
    part_two.style.paddingLeft = "12px";
    // part_two.style.width = "60%";
    part_two.classList.add("part_two");
    
    introduce.classList.add("ct_in_sectionSM");
    title_HD.classList.add("item_in_part");
    title_in4.style.display = "flex";
    
    anh_CV.querySelector("img").classList.remove("hidden");
    introduce.classList.remove("introduce_mau5","introduce_mau3");
    
    title_in4.classList.add("have_line");
    heading_paper.setAttribute("class","heading_paper part_in_paper"); 
    heading_paper.style.removeProperty("display");

    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
        }
    }
    introduce.removeAttribute("style");
    introduce.insertAdjacentElement("afterbegin",title_HD);
    paper.classList.add("paper_mau9");
    contentCV.removeAttribute("style");
        
        // let item_in_each_paper = contentCV.querySelectorAll(".item_in_part");
    redistributeContent_2col(part_one);
    redistributeContent_2col(part_two); 

}
function Mau10(paper){
    xoa_ky_tu(paper);
    let title_HD = paper.querySelector(".title_HD") || "";
    let in4_individual = introduce.querySelector(".information") || ""; 
    let contentCV = paper.querySelector(".content_CV") || "";
    let heading_paper = paper.querySelector(".heading_paper") || "";
    
    let part_two = paper.querySelector(".half-right");
    paper.setAttribute("class","paper");
    contentCV.classList.remove("part_two");
    part_two.classList.add("part_two");
    
    title_in4.classList.add("bold","title" ,"possible_Part","have_line");
    introduce.classList.add("ct_in_sectionSM");
    handleErrorHD();
    if(in4_individual){
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
            in4_individual.classList.add("paragraph","part_ct","item_in_part");
            in4_individual.insertAdjacentElement("afterbegin",title_in4);
            in4_individual.style.display = "inline-block";
            in4_individual.style.width = "100%";
            contentCV.insertAdjacentElement("afterbegin",in4_individual);
        }
        paper.insertAdjacentElement("afterbegin",heading_paper);
        
        title_in4.style.display = "flex";
        introduce.classList.remove("introduce_mau5","introduce_mau3");
        
        if(title_HD){
            title_HD.classList.add("paragraph","part_ct","item_in_part");
            contentCV.insertAdjacentElement("afterbegin",title_HD);
        }
        heading_paper.removeAttribute("style");
        heading_paper.classList.remove("heading_paper_mau7");
        paper.classList.add("paper_mau10");
        Adjust_part_left(paper);
        let part_one = paper.querySelector(".half-left");
        if(!heading_paper.querySelector(".anh_CV")){
            const newAnhCV = document.createElement('div');
            newAnhCV.classList.add('anh_CV');
            heading_paper.appendChild(newAnhCV);
        }
        part_one.removeAttribute("style");
        part_two.removeAttribute("style");
        if(paper.previousElementSibling){
            if(paper.previousElementSibling.classList.contains("paper")){
                heading_paper.style.width = "30%";
                contentCV.style.width = "70%";
            }
        }
        redistributeContent_2col(part_two);
}
function Mau11(paper){
    xoa_ky_tu(paper);
    let introduce , title_HD , in4_individual;
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    title_cv = document.querySelectorAll(".title");
    let heading_paper = paper.querySelector(".heading_paper") || "";
    let contentCV = paper.querySelector(".content_CV");
    let part_two = paper.querySelector(".half-right");
    let anh_CV = paper.querySelector(".anh_CV") || "";
    anh_CV.classList.add("item_in_part");
    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
    contentCV.classList.remove("part_two");
    heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.padding = "24px 0";
        }
    }
    // handleErrorHD();
    title_cv.forEach(ele=>{
        ele.classList.add("have_line");
    })
    title_HD.querySelector("b").classList.add("title_mau11");
    heading_paper.classList.add("heading_paper_mau11");
    paper.classList.add("paper_mau11");
    title_in4.style.display = "flex";
    
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
        in4_individual.classList.add("paragraph","part_ct","paragraph");
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        
        part_one.insertAdjacentElement("afterbegin",in4_individual);
        in4_individual.insertAdjacentElement("afterbegin",imgCV.parentElement);
    }
    
    // Ph·∫ßn n·ª≠a b√™n tr√°i
    part_one.classList.add("part_one");
    // part_one.style.width = "40%";
    part_one.style.height = "-1%";
    part_one.style.paddingRight = "12px";
    part_one.style.borderRight = "none" 
    // Ph·∫ßn n·ª≠a b√™n ph·∫£i
    part_two.style.paddingLeft = "12px";
    // part_two.style.width = "60%";
    part_two.classList.add("part_two");
    imgCV.removeAttribute("style");
    introduce.classList.add("ct_in_sectionSM");
    title_HD.classList.add("item_in_part");
    
    introduce.classList.remove("introduce_mau5","introduce_mau3");
    
    title_in4.classList.add("have_line");
    introduce.insertAdjacentElement("afterbegin",title_HD);
    heading_paper.setAttribute("class","heading_paper part_in_paper heading_paper_mau11"); 
    heading_paper.querySelectorAll(".information ul>li label:first-child>i").forEach(ele=>{
        ele.style.display = "block";
    })
    heading_paper.querySelectorAll(".information ul>li label:first-child>b").forEach(ele=>{
        ele.classList.add("hidden");
    })
        
        contentCV.removeAttribute("style");
        redistributeContent_2col(part_one);
        redistributeContent_2col(part_two); 

}
function Mau12(paper){
    xoa_ky_tu(paper);
    let introduce , title_HD , in4_individual;
    introduce = document.querySelector(".introduce") || "";
    title_HD = document.querySelector(".title_HD")|| "";
    in4_individual = introduce.querySelector(".information")|| ""; 
    title_cv = document.querySelectorAll(".title");
    let personalIn4 = paper.querySelector(".personal_in4");
    let heading_paper = paper.querySelector(".heading_paper") || "";
    let contentCV = paper.querySelector(".content_CV");
    let part_two = contentCV.querySelector(".half-right");
    
    paper.setAttribute("class","paper");
    title_in4.classList.add("bold","title" ,"possible_Part" ,"item_in_part");
    contentCV.classList.remove("part_two");
    heading_paper.classList.remove("part_one"); 
    if(paper.previousElementSibling){
        if(paper.previousElementSibling.classList.contains("paper")){
            heading_paper.style.display = "none";
            contentCV.style.padding = "24px 0";
        }
    }
    // handleErrorHD();
    heading_paper.classList.add("heading_paper_mau12");          
    paper.classList.add("paper_mau12");
    title_in4.style.display = "flex";
    Adjust_part_left(paper);
    let part_one = paper.querySelector(".half-left");
    if(in4_individual){
        in4_individual.classList.add("paragraph","part_ct","paragraph");
        in4_individual.querySelectorAll("li").forEach(li=>{
            li.classList.add("item_in_part");
        })
        in4_individual.insertAdjacentElement("afterbegin",title_in4);
        
        part_one.insertAdjacentElement("afterbegin",in4_individual);
        in4_individual.insertAdjacentElement("afterbegin",imgCV.parentElement);
        in4_individual.classList.add("information_mau12");
        heading_paper.insertAdjacentElement("beforeend",in4_individual);    
    }
    
    // Ph·∫ßn n·ª≠a b√™n tr√°i
    part_one.classList.add("part_one");
    // part_one.style.width = "50%";
    part_one.style.height = "-1%";
    // part_two.style.width = "50%";
    part_two.classList.add("part_two");
    
    introduce.classList.add("ct_in_sectionSM");
    title_HD.classList.add("item_in_part");
    
    introduce.classList.remove("introduce_mau5","introduce_mau3");
    if(!document.querySelector(".half-left .workexperience")){
        part_one.insertAdjacentElement("afterbegin",document.querySelector(".workexperience"));
    }
    
    title_in4.classList.add("have_line");
    title_in4.style.display = "none";
    introduce.insertAdjacentElement("afterbegin",title_HD);
    heading_paper.querySelectorAll(".information ul>li label:first-child>i").forEach(ele=>{
        ele.style.display = "block";
    })
    heading_paper.querySelectorAll(".information ul>li label:first-child>b").forEach(ele=>{
        ele.classList.add("hidden");
    })
        
        contentCV.removeAttribute("style");
        redistributeContent_2col(part_one);
        redistributeContent_2col(part_two);
}
// H√†m L√†m nhi·ªám v·ª• th√™m ·ªü gi·∫•y 1 - n m·∫´u c·ªßa n√≥ v√† chuy·ªÉn h·∫øt ph·∫ßn t·ª≠ v√†o ph·∫ßn content_cv 

list_cv.forEach(ele=>{
    ele.addEventListener("click",()=>{ // b·∫•t ƒë·ªìng b·ªô 
        is_default = true;
        let mauCV;
        let checkStyle;
        let papers = document.querySelectorAll(".paper");

        mauCV = ele.getAttribute("type_cv").split(" ")[0];
        checkStyle = mauCV.substring(3);
        console.log(mauCV);
        console.log("M√†u Hi·ªán T·∫°i : ",currentColor);
        document.querySelector(".window_maucv").classList.add("hidden");
        switch(mauCV) {
            case "mau0":
                console.log("S·ªë Gi·∫•y Hi·ªán T·∫°i :",papers);
                papers.forEach((paper,index)=>{                    
                    if(index == 0){
                        resetCV(paper);   
                    }
                    else{
                        Mau0(paper)   
                    }
                })             
                setColor_mauConlai();
                break;
            case "mau1":
                console.log("S·ªë Gi·∫•y Hi·ªán T·∫°i :",papers);
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau1(paper);   
                    }
                    else{
                        Mau1(paper);   
                    }
                })
                setColor_mauConlai();
                break;
            case "mau2":
                console.log("S·ªë Gi·∫•y Hi·ªán T·∫°i :",papers);
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        console.log(paper);
                        resetCV(paper);
                        Mau2(paper);  
                    }
                    else{
                        Mau2(paper);  
                    }
                })
                setColor_mau2();
                break;
            case "mau3":
                console.log("S·ªë Gi·∫•y Hi·ªán T·∫°i :",papers);
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau3(paper);  
                    }
                    else{
                        Mau3(paper);  
                    }
                })
                setColor_mau3();
                break;
            case "mau4":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau4(paper);  
                    }
                    else{
                        Mau4(paper);  
                    }
                })
                setColor_mauConlai();
                break;
            case "mau5":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau5(paper); 
                    }
                    else{
                        Mau5(paper); 
                    }
                })
                setColor_mau5();
                break;
            case "mau6":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau6(paper);
                    }
                    else{
                        Mau6(paper);
                    }
                })
                setColor_mauConlai();
                break;
            case "mau7":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau7(paper);
                    }
                    else{
                        Mau7(paper);
                    }
                })
                setColor_mau7();
                break;
            case "mau8":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau8(paper); 
                    }
                    else{
                        Mau8(paper); 
                    }
                })
                setColor_mau8();
                break;
            case "mau9":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau9(paper);
                    }
                    else{
                        Mau9(paper);
                    }
                })
                setColor_mau9_mau10();
                break;
            case "mau10":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau10(paper);
                    }
                    else{
                        Mau10(paper);
                    }
                })
                setColor_mau9_mau10();
                break;
            case "mau11":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau11(paper);
                    }
                    else{
                        Mau11(paper);
                    }
                })
                setColor_mauConlai();
                break;
            case "mau12":
                papers.forEach((paper,index)=>{
                    if(index == 0){
                        resetCV(paper);
                        Mau12(paper);
                    }
                    else{
                        Mau12(paper);
                    }
                })
                setColor_mauConlai();
                break;
            default:
                console.log("M·∫´u Kh√¥ng H·ª£p L·ªá !");
        }
        console.log("M·∫´u CV th·ª© : ",checkStyle);
        CheckStyleCV(checkStyle);
        fixbug0103(); 
    });
}); 

function CheckStyleCV(res){
    let papers = document.querySelectorAll(".paper");

    if (window.observer1) {
        window.observer1.disconnect();
    }
    if (window.observer3) {
        window.observer3.disconnect();
    }
    // 
    let check_type_CV = (res == 0 || res == 2) ? "mau_1col" : "mau_2col";

    // console.log("check_type_CV : ",check_type_CV);
    // if(res == 0 || res == 2){
    //     papers.forEach(paper=>{
    //         paper.addEventListener('input',(event)=> {
    //             console.log(paper);
    //             redistributeContent_1col(paper);                      
    //         })
    //     })
    // }
    // else{
        
    // }
    const observer1 = new MutationObserver((mutations) => {
        console.log("res in CheckStyleCV : ",res);
        content_left.addEventListener('input', function(e) {
            const ele = e.target.closest(".item_in_part");
            if (!ele) return;
        
            if (res == 0 || res == 2) {
                redistributeContent_1col(ele.closest(".paper"));
            } else {
                const part = ele.closest(".half-left") || ele.closest(".half-right");
                if (part) {
                    redistributeContent_2col(part);
                }
            }
        });
        setTimeout(()=>{
            observer1.disconnect();
        },300)
    }); 

    window.observer1 = observer1;
    observer1.observe(content_left, { childList: true, subtree: true });
    // T·∫°o observer m·ªõi
    
    // L∆∞u observer v√†o window ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p v√† h·ªßy sau n√†y  
    // T∆∞∆°ng t·ª± cho observer3
    const observer3 = new MutationObserver((mutations) => { // d√πng ƒë·ªÉ ph√°t hi·ªán thay ƒë·ªïi trong "content_left" 
    mutations.forEach((mutation) => {
    //   if (mutation.type === 'childList') {
        // C·∫≠p nh·∫≠t l·∫°i NodeList khi c√≥ ph·∫ßn t·ª≠ m·ªõi
        part_content = document.querySelectorAll('.content-left .paragraph');
        part_content.forEach(ele => {
            ele.addEventListener("click", function(event) {
                event.stopPropagation(); // ngƒÉn ch·∫∑n h√†nh vi n·ªïi b·ªçt 
                editContent(ele,check_type_CV);
            });
        });
    //   }
        });

    });

    window.observer3 = observer3;
    observer3.observe(content_left, { childList: true, subtree: true });

    //C√°c ph·∫ßn code c√≤n l·∫°i gi·ªØ nguy√™n
    part_content.forEach(ele => {
        ele.addEventListener("click", function(event) {
            event.stopPropagation();
            editContent(ele, check_type_CV);
        });
    });
    title_cv = document.querySelectorAll(".title");
    title_cv.forEach(function(ele){
        ele.addEventListener("click", function(event) {
            editContent(ele.closest(".part_ct"), check_type_CV);
        });
    });
}
document.addEventListener('click', function(event) {
    if (!event.target.closest('.part_ct')) {
        if (activeElement) {
            removeToolbars(activeElement);
            activeElement = null;
            activeToolbars = [];
        }
    }
});

// ------------------------------------------------------------------------------------------------------------
let check_c = 0;
btn_color_left.onclick = function(e){
    if(check_c < 1){
        btn_color_left.style.opacity = '0.4';
        e.preventDefault();
    }
    else{
        btn_color_right.style.opacity = '1';
        check_c--;
    }
    list_color.style.marginLeft = `-${check_c * khungnhin_c.offsetWidth}px`;
}

btn_color_right.onclick = function(e){
    if(check_c > colors.length - 2){
        btn_color_right.style.opacity = '0.4';
        e.preventDefault();
    }
    else{
        btn_color_left.style.opacity = '1';
        check_c++;
    }
    list_color.style.marginLeft = `-${check_c * khungnhin_c.offsetWidth}px`;
}

// ƒë·ªïi m√†u 
function check_type_CV_by_color(){
    let checkII = document.querySelectorAll(".paper");
    return checkII[0].getAttribute("class").split(" ")[1];
}

// c√°c h√†m l√™n m√†u cho c√°c m·∫´u CV 
function setColor_mau2(get){
    if(get){
        currentColor = get;
    }
    listTitle = document.querySelectorAll(".content_CV .title");
    introduce = document.querySelector(".introduce");
    introduce.style.backgroundColor = "#fff";
    title_HD = document.querySelector(".title_HD");
    title_HD.style.color = currentColor;

    listTitle.forEach(elem=>{
        elem.style.opacity = '1';
        elem.style.backgroundColor = currentColor;
        elem.querySelector("p").style.color = "#fff";
    })

    title_HD.querySelector("section:first-child").style.backgroundColor = "#fff";    
    title_HD.querySelector("section:last-child").style.backgroundColor = "#fff";    
    title_HD.style.backgroundColor = "transparent";    
    Array.from(document.styleSheets[1].cssRules).forEach((cssele)=>{
        // console.log(cssele.cssText.split("::")); // n·∫øu s·ªë l∆∞·ª£ng > 1 
        if(cssele.cssText.split("::").length > 1 ){
            if(cssele.cssText.includes("paper_mau2")){
                console.log(cssele); 
                cssele.style.backgroundColor = currentColor;
                if(cssele.cssText.includes("part_ct") || cssele.cssText.includes("after")){
                    cssele.style.borderLeftColor = currentColor; 
                }
            }
        }
    })
}
function setColor_mau3(get){
    if(get){
        currentColor = get;
    }
    listTitle = document.querySelectorAll(".title");
    introduce = document.querySelector(".introduce");
    title_HD = document.querySelector(".title_HD");
    title_HD.style.color = "#000";
    title_HD.querySelector("section:first-child").style.backgroundColor = "transparent";
    title_HD.querySelector("section:last-child").style.backgroundColor = "transparent";
    let heading_papers = document.querySelectorAll(".heading_paper");
    heading_papers.forEach(hd=>{
        hd.style.backgroundColor = currentColor;
        hd.style.opacity = "0.42";
    })
    listTitle.forEach((el)=>{
        el.style.backgroundColor = currentColor; 
        el.style.opacity = "0.42";
        el.querySelector("i").style.backgroundColor = currentColor;
        el.querySelector("p").style.backgroundColor = "transparent";
        el.querySelector("p").style.color = "#fff";
    })
    introduce.style.backgroundColor = currentColor;
    anh_CV.style.backgroundColor = "transparent";

    Array.from(document.styleSheets[1].cssRules).forEach((cssele)=>{
        if(cssele.cssText.split("::").length > 1 ){
            if(cssele.cssText.includes("introduce_mau3")){ 
                cssele.style.backgroundColor = currentColor;
            }
        }
    })
}
function setColor_mau5(get){
    if(get){
        currentColor = get;
    }
    listTitle = document.querySelectorAll(".title");
    introduce = document.querySelector(".introduce");
    title_HD = document.querySelector(".title_HD");
    heading_paper.style.backgroundColor = "#fff";
    introduce.style.backgroundColor = "#fff";
    title_HD.style.color = currentColor;
    title_HD.style.backgroundColor = "transparent";
    title_HD.querySelector("section:first-child").style.backgroundColor = "transparent";
    title_HD.querySelector("section:last-child").style.backgroundColor = "transparent";
    title_HD.querySelector("section:last-child").style.opacity = "1";


    listTitle.forEach((el)=>{
        el.style.opacity = '1';
        el.querySelector("p").style.color = currentColor;
        el.style.backgroundColor = "transparent";
        el.querySelector("p").style.backgroundColor = "transparent";

    })
}
function setColor_mau7(get){
    if(get){
        currentColor = get;
    }
    listTitle = document.querySelectorAll(".title");
    introduce = document.querySelector(".introduce");
    introduce.style.backgroundColor = "#e5e2e2";
    heading_paper.style.backgroundColor = "transparent";
    heading_paper.style.opacity = "1";
    title_HD.querySelector("section:first-child").style.backgroundColor = currentColor;
    title_HD.querySelector("section:last-child").style.backgroundColor = currentColor;
    title_HD.querySelector("section:last-child").style.opacity = "0.42";
    title_HD.style.backgroundColor = "transparent";
    title_HD.style.color = "#fff";
    
    anh_CV.style.backgroundColor = currentColor;
    listTitle.forEach((el)=>{
        el.querySelector("p").style.backgroundColor = currentColor;
        el.style.backgroundColor = "transparent";
        el.querySelector("p").style.color = "#fff";
        el.style.opacity = "1";
    })
}
function setColor_mau8(get){
    if(get){
        currentColor = get;
    }
    listTitle = document.querySelectorAll(".title");
    introduce = document.querySelector(".introduce");

    heading_paper.style.backgroundColor = "#e5e2e2";
    anh_CV.style.backgroundColor = "transparent";
    title_HD.style.backgroundColor = currentColor;
    title_HD.querySelector("section:last-child").style.opacity = "1";
    
    title_HD.querySelector("section:first-child").style.backgroundColor = "transparent";    
    title_HD.querySelector("section:last-child").style.backgroundColor = "transparent"; 

    title_HD.style.color = "#fff";

    introduce.style.backgroundColor = "transparent";
    listTitle.forEach(function(ele){
        ele.style.backgroundColor = currentColor;
        ele.querySelector("i").style.background = currentColor;
        ele.querySelector("p").removeAttribute("style");
        ele.querySelector("p").style.color = "#fff";
        ele.style.opacity = "1";
    })
}
function setColor_mau9_mau10(get){
    if(get){
        currentColor = get;
    }
    listTitle = document.querySelectorAll(".title");
    introduce = document.querySelector(".introduce");

    title_HD.style.backgroundColor = currentColor;
    title_HD.style.color = "#fff";

    title_HD.querySelector("section:first-child").style.backgroundColor = "transparent";
    title_HD.querySelector("section:last-child").style.backgroundColor = "transparent";

    title_HD.querySelector("section:last-child").style.opacity = "1";
    
    anh_CV.querySelector("img").style.border = `6px solid ${currentColor}`;
    listTitle.forEach(function(ele){
        ele.querySelector("p").style.color = currentColor;
        ele.style.backgroundColor = "transparent";
        ele.style.opacity = "1";
        ele.querySelector("p").style.backgroundColor = "transparent";
    })
    if(check_type_CV_by_color() == "paper_mau10"){
        document.querySelectorAll(".anh_CV").forEach(anhcv=>{
            anhcv.style.backgroundColor = currentColor;
        })
    }
    Array.from(document.styleSheets[1].cssRules).forEach((cssele)=>{
        if(cssele.cssText.split("::").length > 1 ){
            if(cssele.cssText.includes(`${check_type_CV_by_color()}`)){ 
                if(cssele.cssText.includes("after")){
                    cssele.style.borderBottomColor = currentColor; 
                }
            }
        }
    })  
    heading_paper.style.backgroundColor = "transparent";
    heading_paper.style.opacity = "1";
}
function setColor_mauConlai(get){ // m·∫´u 0 1 4 6 11 12
    if(get){
        currentColor = get;
    }
    let title_in_partCv = document.querySelectorAll('.item_in_part>i');
    title_HD = document.querySelector(".title_HD");
    listTitle = document.querySelectorAll(".title");
    introduce = document.querySelector(".introduce");
    introduce.style.backgroundColor = currentColor;
    title_HD.style.color = "#fff";
    let heading_papers = document.querySelectorAll(".heading_paper");

    title_HD.querySelector("section:first-child").style.backgroundColor = "transparent";
    title_HD.querySelector("section:last-child").style.backgroundColor = "transparent";
    title_HD.querySelector("section:last-child").style.opacity = "1";
    anh_CV.style.backgroundColor = "transparent";
    if(check_type_CV_by_color() == "paper_mau1"){
        title_HD.style.color = "#000";
        title_HD.style.backgroundColor = "transparent";
    }
    if(check_type_CV_by_color() == "paper_mau4"){
        title_HD.style.color = "#fff";
    }
    title_in_partCv.forEach(function(ele){
        ele.nextElementSibling.style.backgroundColor = "transparent";
        ele.nextElementSibling.style.color = currentColor;
        ele.style.backgroundColor = currentColor;
    })
    title_HD.removeAttribute("style");
    if(check_type_CV_by_color() == "paper_mau6"){
        anh_CV.querySelector("img").style.border = "initial";
    }
    listTitle.forEach(el=>{
        if(check_type_CV_by_color() == "paper_mau6"){
            el.querySelector("p").style.backgroundColor = "#fff";
        }
        el.style.backgroundColor = "transparent";
        if(check_type_CV_by_color() == "paper_mau1"){
            el.style.backgroundColor = "#fff";
        }

        el.style.opacity = '1';
        el.querySelector("p").style.backgroundColor = "transparent";
        el.querySelector("p").style.color = currentColor;

        if(el.querySelector(".icon_crystal")){
            el.querySelector(".icon_crystal").style.backgroundColor = currentColor;
        }
    })
    if(check_type_CV_by_color() == "paper_mau12"){
        anh_CV.querySelector("img").style.border = `4px solid ${currentColor}`;
    }
    Array.from(document.styleSheets[1].cssRules).forEach((cssele)=>{
        if(cssele.cssText.split("::").length > 1 ){
            if(cssele.cssText.includes("heading_paper_mau4")){ 
                if(cssele.cssText.includes("after")){
                    cssele.style.backgroundColor = currentColor; 
                }
            }
        }
    })
    
    heading_papers.forEach(hd=>{
        hd.style.backgroundColor = currentColor;
        hd.style.opacity = "1";
    })
}
let userIdnow = localStorage.getItem("userIdnow");
let colorCVnow; 
// async function checkCorlornow(){
//     if(localStorage.getItem("status") == "update"){
//         let urlCVdetail = `http://localhost:5028/api/NguoiDung/user/getDetailsCVbyID?userid=${userIdnow}&idcv=${localStorage.getItem("IDCVcurrent")}`;
//         let fet = await fetch(urlCVdetail)
//         colorrr = await fet.json();
//         return colorrr.color;
//     }
//     else{
//         return "rgb(252, 83, 83)";
//     }
// }
colorCVnow = "rgb(252, 83, 83)";
console.log(colorCVnow);
mausac.forEach(function(ele){
    ele.onclick = function(e){
        let title_in_partCv = document.querySelectorAll('.item_in_part>i');
        currentColor = e.target.style.background;

        // console.log(e.target.style.background);
        listTitle = document.querySelectorAll(".title");
        introduce = document.querySelector(".introduce");
        console.log(currentColor);
        colorCVnow = currentColor
        if(check_type_CV_by_color() == "paper_mau2"){
            // console.log(Array.from(document.styleSheets[1].cssRules));
            setColor_mau2();
        }
        else if(check_type_CV_by_color() == "paper_mau3"){
            setColor_mau3();
        }
        else if(check_type_CV_by_color() == "paper_mau5"){
            setColor_mau5();
        }
        else if(check_type_CV_by_color() == "paper_mau7"){
            setColor_mau7();
        }
        else if(check_type_CV_by_color() == "paper_mau8"){
            setColor_mau8();
        }
        else if(check_type_CV_by_color() == "paper_mau9" || check_type_CV_by_color() == "paper_mau10"){
            setColor_mau9_mau10();
        }
        else{
            setColor_mauConlai();
        }
    }
})

// Ph·∫ßn m·∫´u CV 
let btn_mcv_left = document.querySelector(".window_maucv button:first-child");
let btn_mcv_right = document.querySelector(".window_maucv button:last-child");
let khungnhin_m = document.querySelector(".khungnhin_m");

// L·ªói v·ªÅ ph·∫ßn t·ª≠ v√† gi·∫•y khi input v√†o ptu
// Th√™m kh·ªï gi·∫•y b√™n heading ƒë·ªÉ ch·ª©a part_ct

let check_m = 0;
btn_mcv_left.onclick = function(e){
    if(check_m < 1){
        btn_mcv_left.style.opacity = '0.4';
        e.preventDefault();
    }
    else{
        btn_mcv_right.style.opacity = '1';
        check_m--;
    }
    daianhcv.style.marginLeft = `-${check_m * khungnhin_m.offsetWidth}px`;
}

btn_mcv_right.onclick = function(e){
    if(check_m > colors.length){
        btn_mcv_right.style.opacity = '0.4';
        e.preventDefault();
    }
    else{
        btn_mcv_left.style.opacity = '1';
        check_m++;
    }
    daianhcv.style.marginLeft = `-${check_m * khungnhin_m.offsetWidth}px`;
}
// Ph·∫ßn ·∫£nh h·ªì s∆°

an_anh.onclick = function(){
    imgCV.classList.toggle("hidden");
    if(imgCV.classList.contains("hidden")){
        an_anh.innerHTML = `<i class="fa-solid fa-eye"></i>Hi·ªán ·∫¢nh`;
    }
    else an_anh.innerHTML = `<i class="fa-solid fa-eye-slash"></i>·∫®n ·∫¢nh`;
    
}

// Ph·∫ßn upload ·∫£nh 
let uploadIMG = document.querySelector('.uploadImg');
let choose_upLoad = document.querySelector('.choose_upload');
let window_Upload = document.querySelector('.func_uploadImg');
let vung_up_file = document.querySelector('.upload_file');
let btn_upFile = document.querySelector('.upload_file>button');
let upFile = document.querySelector('.upload_file>input');
let text_in_Area = document.querySelector('.upload_file>p:first-child');
let btnCancel_upLoad = document.querySelector('.func_uploadImg>div:last-child>button:last-child');
let btn_upLoad = document.querySelector('.func_uploadImg>div:last-child>button:first-child');
let btnCancel_cutimg = document.querySelector('.func_uploadImg>div.useWhencutImg>button:last-child');
let close_tab_utilities = document.querySelectorAll(".window>i");
const rules = ['image/jpeg','image/jpg','image/png'];

//
uploadIMG.onclick = function(){
    document.querySelector('.window_img').classList.add('hidden');
    choose_upLoad.classList.remove('hidden');
}
// close choose_upLoad
let list_btn_close = document.querySelectorAll('.choose_upload>i, .func_uploadImg>i,.close');
list_btn_close.forEach(function(ele){
    ele.onclick = function(e){
        e.target.parentNode.classList.add('hidden');
    }
})
// 
close_tab_utilities.forEach(e=>{
    e.onclick = ()=>{
        e.closest(".window").classList.add("hidden");
    }
})
let listbtnUpimg = document.querySelectorAll('.func_uploadImg>div:first-child>span');
// A - Ch·ªçn ·∫£nh m·∫∑c ƒë·ªãnh 
let img_default = document.querySelector('.img_default');
img_default.onclick = function(){
    imgCV.src = `./img/8a9d6e85a93b8b3a8002896da71882a3.jpg`;
    choose_upLoad.classList.add('hidden');
}
//
// B - Ch·ªçn ·∫£nh do ng d√πng ·ªëp l√™n 
let img_select = document.querySelector('.img_select');

img_select.onclick = function(){
    listbtnUpimg[0].style.color = '#fe4079';
    listbtnUpimg[0].style.fontWeight = '600';
    window_Upload.classList.remove('hidden');
    choose_upLoad.classList.add('hidden');
}

btn_upFile.onclick = function(){
    upFile.click();
}

vung_up_file.addEventListener('dragover',(e)=>{
    e.preventDefault();
    text_in_Area.textContent = "Th·∫£ ·∫£nh v√†o ƒë·ªÉ t·∫£i l√™n";
    text_in_Area.style.color = "green";
})
vung_up_file.addEventListener('dragleave',(e)=>{
    e.preventDefault();
    text_in_Area.textContent = "Th·∫£ file ƒë·ªÉ t·∫£i ·∫£nh l√™n";
    text_in_Area.style.color = "black";
})
vung_up_file.addEventListener('drop',(e)=>{
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    ShowFile(file);
});

upFile.onchange = function(){
    const file = this.files[0];
    ShowFile(file);
}

let btn_useWhencutImg = document.querySelector('.useWhencutImg');
let btn_useWhenUpImg = document.querySelector('.useWhenUpImg');

function cutIMG(){
    listbtnUpimg[0].style.color = 'black';
    listbtnUpimg[0].style.fontWeight = '300';
    let imgCVnoww = document.querySelector(".anh_CV img");
    if(vung_up_file.childNodes[0].tagName == 'IMG'){
        btn_useWhencutImg.classList.remove('hidden');
        btn_useWhenUpImg.classList.add('hidden');
        let save_change = btn_useWhencutImg.querySelector('button:first-child');
        let img_Cut = vung_up_file.querySelector('img');
        let cropper;
            cropper = new Cropper(img_Cut,{
                sizeCut : 1,
            });
            save_change.addEventListener('click',()=>{
                let croppedIMG = cropper.getCroppedCanvas().toDataURL("image/png");
                // console.log(croppedIMG.toDataURL("image/png"));
                imgCV.src = croppedIMG;
                window_Upload.classList.add('hidden');
                vung_up_file.innerHTML = `<p> Th·∫£ file ƒë·ªÉ t·∫£i ·∫£nh l√™n</p>
                <p> ho·∫∑c</p>`;
                btn_useWhenUpImg.classList.remove('hidden');
                btn_useWhencutImg.classList.add('hidden');
                vung_up_file.append(btn_upFile);
            })
    }
    else{
        alert('B·∫°n Ph·∫£i T·∫£i ·∫¢nh l√™n m·ªõi c√≥ th·ªÉ c·∫Øt');
    }
}
// listbtnUpimg[1].onclick = cutIMG;
let btn_cutIMG = document.querySelector('.cutImg');
//--------------------------------------------------------------------------------
btn_cutIMG.onclick = ()=>{
    let imgCVnoww = document.querySelector(".anh_CV img");
    console.log(imgCVnoww.src);
    if(imgCVnoww.src == "http://127.0.0.1:5500/img/8a9d6e85a93b8b3a8002896da71882a3.jpg"){
        alert("B·∫°n Ph·∫£i T·∫£i ·∫¢nh l√™n m·ªõi c√≥ th·ªÉ c·∫Øt");
        return;
    }
    let save_change = btn_useWhencutImg.querySelector('button:first-child');
    btn_useWhencutImg.classList.remove('hidden');
    btn_useWhenUpImg.classList.add('hidden');
    window_Upload.classList.remove('hidden');
    document.querySelector('.window_img').classList.add('hidden');
    imgaTag = `<img style="width:240px;" src="${imgCVnoww.src}">`;
    vung_up_file.innerHTML = imgaTag;
    cropper = new Cropper(vung_up_file.querySelector("img"),{
        sizeCut : 1,
    });
    save_change.addEventListener('click',()=>{
        let croppedIMG = cropper.getCroppedCanvas().toDataURL("image/png");
        imgCV.src = croppedIMG;
        window_Upload.classList.add('hidden');
        vung_up_file.innerHTML = `<p> Th·∫£ file ƒë·ªÉ t·∫£i ·∫£nh l√™n</p>
        <p> ho·∫∑c</p>`;
        btn_useWhenUpImg.classList.remove('hidden');
        btn_useWhencutImg.classList.add('hidden');
        vung_up_file.append(btn_upFile);
    })
};
// console.log(upFile.value);
function ShowFile(file){
    console.log(file);
    const fileType = file.type;
    // console.log(file);
    const valid = ['image/jpeg','image/jpg','image/png'];
    if(valid.includes(fileType)){
        const fileReader = new FileReader();
        fileReader.onload = function(){
            const fileUrl = fileReader.result;
            let imgaTag;
            if(file.size < 80000){
                imgaTag = `<img style="width:240px;" src="${fileUrl}">`;
            }
            else{
                imgaTag = `<img style="width:30%;" src="${fileUrl}">`;
            }
            vung_up_file.innerHTML = imgaTag;
        }
        fileReader.readAsDataURL(file);
        listbtnUpimg[1].onclick = cutIMG;
    }
    else{
        alert("ƒê√¢y kh√¥ng ph·∫£i file ·∫£nh !");
        text_in_Area.textContent = "Vui L√≤ng K√©o v√† Th·∫£ ƒë√∫ng ·∫£nh ƒë·ªÉ t·∫£i ·∫£nh l√™n";
        text_in_Area.style.color = "red";
    }
}
btn_upLoad.onclick = function(){
    console.log(vung_up_file.childNodes[0]);
    // const in4id = 32; // ID b·∫°n ƒëang c·ªë g·∫Øng th√™m
    // const file = vung_up_file.childNodes[0].src;
    // if (!vung_up_file.childNodes[0]?.src) {
    //     alert('B·∫°n ch∆∞a t·∫£i ·∫£nh l√™n!');
    //     return;
    // }
    // // Chuy·ªÉn ·∫£nh th√†nh Blob
    // const blobImage = base64ToBlob1(vung_up_file.childNodes[0].src);
    // console.log("in4id:", in4id);
    // console.log("file:", file);
    // // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API
    // const formData = new FormData();
    // formData.append("in4id", in4id); // Gi√° tr·ªã in4id
    // formData.append("file", blobImage, "image.jpg"); // ·∫¢nh d∆∞·ªõi d·∫°ng blob
    // console.log("-----------------");
    // for (let pair of formData.entries()) {
    //     console.log(pair[0] + ": " + typeof pair[1]);
    // }
    // console.log(formData)
    // // G·ª≠i request l√™n API
    // const url = "http://localhost:5028/api/NguoiDung/UploadImage";
    // fetch(url, {
    //     method: "POST",
    //     body: formData, // S·ª≠ d·ª•ng FormData thay v√¨ JSON.stringify
    // })
    //     .then((res) => {
    //         if (!res.ok) throw new Error("L·ªói khi t·∫£i ·∫£nh l√™n!");
    //         return res.json();
    //     })
    //     .then((data) => {
    //         console.log("Ph·∫£n h·ªìi t·ª´ API:", data);
    //     })
    //     .catch((err) => {
    //         console.error(err);
    //     });
    // console.log("AAAAAAAAAAAAA :", URL.createObjectURL(base64ToBlob1(vung_up_file.childNodes[0].src)));
    // console.log("BBBBBBBBBBBBBBBBBBBBBBBBBBBB :",URL.createObjectURL(base64ToBlob2(vung_up_file.childNodes[0].src)));
    if(vung_up_file.childNodes[0].src === undefined){
        alert('B·∫°n ch∆∞a t·∫£i ·∫£nh l√™n !');
    }else{
        imgCV.src = vung_up_file.childNodes[0].src // ·∫£nh CV ƒë∆∞·ª£c thay 
        vung_up_file.innerHTML = `<p> Th·∫£ file ƒë·ªÉ t·∫£i ·∫£nh l√™n</p>
                    <p> ho·∫∑c</p>`;
        vung_up_file.append(btn_upFile);
        window_Upload.classList.add('hidden');
    }
}
btnCancel_upLoad.onclick = function(){
    vung_up_file.innerHTML = `<p> Th·∫£ file ƒë·ªÉ t·∫£i ·∫£nh l√™n</p>
                    <p> ho·∫∑c</p>`;
    vung_up_file.append(btn_upFile);
}
btnCancel_cutimg.onclick = ()=>{
    vung_up_file.innerHTML = `<p> Th·∫£ file ƒë·ªÉ t·∫£i ·∫£nh l√™n</p>
                    <p> ho·∫∑c</p>`;
    vung_up_file.append(btn_upFile);
    window_Upload.classList.add("hidden");
    btn_useWhencutImg.classList.add("hidden");
    btn_useWhenUpImg.classList.remove("hidden");
}

let resize = document.querySelector(".resize");
let let_resize = document.querySelector(".let_resize");
let dieuchinh_anh = document.querySelector(".butt"); 
let slider = document.querySelector(".slider");
let btnReduce = document.querySelector(".let_resize>div:nth-child(2) button");
resize.onclick = function() {
    document.querySelector('.window_img').classList.add('hidden');
    let_resize.classList.remove("hidden");
}

let setcung = 120;
// tƒÉng gi·∫£m by k√©o
dieuchinh_anh.onmousedown = function(e) {
    let left_let_resize = let_resize.getBoundingClientRect().left;
    let padding_let_resize = window.getComputedStyle(let_resize);
    let btnReduce_width = btnReduce.offsetWidth;
    let margin_slider = window.getComputedStyle(slider).getPropertyValue("margin").split(" ");

    function dragBtn(e){
        dieuchinh_anh.style.left = e.pageX - left_let_resize - parseInt(padding_let_resize.getPropertyValue("padding")) - btnReduce_width - parseInt(margin_slider[1]) + "px";
        if(parseInt(dieuchinh_anh.style.left) < 5){
            dieuchinh_anh.style.left = '5px';
        }
        if(parseInt(dieuchinh_anh.style.left) > 114){
            dieuchinh_anh.style.left = '115px';
        }
        imgCV.style.width = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55) + "px";
        imgCV.style.height = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55) + "px";
        setcung = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55)
    }
    slider.addEventListener("mousemove",dragBtn);

    dieuchinh_anh.addEventListener("mouseup",function(e){
        slider.removeEventListener("mousemove",dragBtn);
        dieuchinh_anh.onmouseup = null;
    })
}
dieuchinh_anh.ondragstart = function() {
    return false;
};

// tƒÉng gi·∫£m by n√∫t 
let btn_giam_kt = document.querySelector(".giamkt");
let btn_tang_kt = document.querySelector(".tangkt");

btn_tang_kt.onclick = function(){
    let test = window.getComputedStyle(dieuchinh_anh);
    let count = 0;
    count ++;
    dieuchinh_anh.style.left = `${parseInt(test.getPropertyValue("left")) + count}px`;
    if(parseInt(dieuchinh_anh.style.left) > 114){
        dieuchinh_anh.style.left = '115px';
        count = 0;
    }
    // 
    img_CV.style.width = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55) + count + "px";
    setcung = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55) + count
btn_giam_kt.onclick = function(){
    let test = window.getComputedStyle(dieuchinh_anh);
    let count = 0;
    count ++;
    dieuchinh_anh.style.left = `${parseInt(test.getPropertyValue("left")) - count}px`;
    if(parseInt(dieuchinh_anh.style.left) < 5){
        dieuchinh_anh.style.left = '5px';
    }
    // 
    img_CV.style.width = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55) - count + "px";
    setcung = (parseInt(window.getComputedStyle(dieuchinh_anh).getPropertyValue("left")) + 55) - count 
    }
}
let cancel_resize = document.querySelector(".useWhenResize>button:last-child");
let save_resize = document.querySelector(".useWhenResize>button:first-child");

cancel_resize.onclick = function(){
    let_resize.classList.add("hidden");
    img_CV.style.width = "120px";
    dieuchinh_anh.style.left = "50%";
    dieuchinh_anh.style.transForm = "translateX(-50%)";
}
save_resize.onclick = function(){
    imgCV.style.width = `${setcung}px`;
    let_resize.classList.add("hidden");
}

// Ch·ª©c nƒÉng t·∫£i xu·ªëng 
let downLoad_pdf = document.querySelector(".congcu2>ul>li:nth-child(1)");

function default_event(e){
    e.preventDefault();
}
let tagA_downl = document.querySelector(".congcu2>ul>li:nth-child(1)>a"); 
tagA_downl.addEventListener("click",default_event);
downLoad_pdf.onclick = function(){
    let yourCVs = document.querySelectorAll(".paper");
    let container = document.createElement("div");
    console.log(yourCVs);
    yourCVs.forEach(function(ele) {
        let clone = ele.cloneNode(true);
        container.appendChild(clone);
    });

    const options = {
        marginTop: 0,
        paddingTop : 0,
        image: { type: 'jpeg', quality: 1 },
        html2canvas: { scale: 2, useCORS: true },
        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    };
    console.log(container);
    html2pdf().set(options).from(container).save();
}
let btnAIhelp = document.querySelector(".button_chatbot>a");
// L·∫•y API 
// X√¢y d·ª±ng 1 h√†m ƒë·ªÉ l·∫•y ra t·∫•t c·∫£ n·ªôi dung c·ªßa c√°c ph·∫ßn trong to√†n content-Left khi nh·∫•n l∆∞u 

function checkFatherPart(element,elementneibour){
    console.log(element);
    console.log(elementneibour);

    if(element.getAttribute("fatherpart") && elementneibour.getAttribute("fatherpart")){
        if(element.getAttribute("fatherpart") == elementneibour.getAttribute("fatherpart")){
            return true
        }
    }
    else return false;
}
let contentYourCv = {
    model : "",
    font : "",
    fontSize : "",
    color : "",
    uploadImg : "",
    userprofile : {
        name : "",
        position : "",
    },
    information : {
        phone : "",
        address : "",
        github : "",
        email : "",
        birth : "",
        imgSize : "",
        container : "",
        // lable
        phonelabel: "",
        addresslabel : "",
        githublabel : "",
        emaillabel: "",
        birthlabel: ""
    },
    overview : [
        // {
        //     content : "",
        //     container : ""
        // }
    ],
    workexperience : [
        // {
        //     time: "",
        //     company_name : "",
        //     position : "",
        //     content : "",container : ""
        // },
        // {
        //     time: "",
        //     company_name : "",
        //     position : "",
        //     content : "",container : ""
        // }
    ],
    education : [
        // {
        //     time: "",
        //     school_name : "",
        //     content : "",container : ""
        // },
    ],
    skill : [
        // {
        //     skill_name : "",
        //     content : "",container : ""
        // }
    ],
    project : [
        // {
        //     project_name : "",
        //     time : "",
        //     client : "",
        //     descriptions : "",
        //     number_of_members : "",
        //     position : "",
        //     responsibilities : "",
        //     technology_in_use : "",container : ""
        // }
    ],
    awards : [
        // {
        //     award_name : "",
        //     time : "",
        //     content : "",container : ""
        // } 
    ],
    goals : [
        // {
        //     term : "",
        //     content : "",container : ""
        // }
    ],
    language : [
        // {
        //     language_name : "",
        //     level : "",
        //     content : "",container : ""
        // }
    ],
    certificate : [
        // {
        //     time : "",
        //     content : "",container : ""
        // }
    ],
    another : [
        // {
        //     part_name : "",
        //     title : "",
        //     content : "",container : ""
        // }
    ],
}   

let currentURL = window.location.href;
let btn_save_yourCV = document.querySelector(".save_YourCv");
let btn_add_newCV = document.querySelector(".add_newCv");
console.log(currentURL);
console.log(readIDCVinURL(currentURL));
let IDCVwhenChoose = readIDCVinURL(currentURL);

if(readIDCVinURL(currentURL) == 0){
    localStorage.setItem("IDCVcurrent",undefined);
}
else{
    if(readIDCVinURL(currentURL) !== undefined){
        localStorage.setItem("IDCVcurrent",IDCVwhenChoose);
    }
}
console.log(userIdnow);
console.log("Idcv khi ch·ªçn ",IDCVwhenChoose);
console.log(localStorage.getItem("IDCVcurrent"));
function readIDCVinURL(url){
    let handle = String(url);
    let idcvNOW;
    for(let i = 0 ; i < handle.length ; i++){
        if(handle[i] == "?"){
            idcvNOW = handle.substring(i+1);
            return idcvNOW;
        }
    }
}
if(localStorage.getItem("IDCVcurrent") !== "undefined"){
    // IDCVwhenChoose = readIDCVinURL(currentURL);
    renderCVbyidcv(false);
}

async function AutoSaveCv(){
    contentYourCv = {
        model : "",
        font : "",
        fontSize : "",
        color : "",
        uploadImg : "",
        userprofile : {
            name : "",
            position : "",
        },
        information : {
            phone : "",
            address : "",
            github : "",
            email : "",
            birth : "",
            imgSize : "",
            container : "",
            // lable
            phonelabel: "",
            addresslabel : "",
            githublabel : "",
            emaillabel: "",
            birthlabel: ""
        },
        overview : [
            // {
            //     content : "",
            //     container : ""
            // }
        ],
        workexperience : [
            // {
            //     time: "",
            //     company_name : "",
            //     position : "",
            //     content : "",container : ""
            // },
            // {
            //     time: "",
            //     company_name : "",
            //     position : "",
            //     content : "",container : ""
            // }
        ],
        education : [
            // {
            //     time: "",
            //     school_name : "",
            //     content : "",container : ""
            // },
        ],
        skill : [
            // {
            //     skill_name : "",
            //     content : "",container : ""
            // }
        ],
        project : [
            // {
            //     project_name : "",
            //     time : "",
            //     client : "",
            //     descriptions : "",
            //     number_of_members : "",
            //     position : "",
            //     responsibilities : "",
            //     technology_in_use : "",container : ""
            // }
        ],
        awards : [
            // {
            //     award_name : "",
            //     time : "",
            //     content : "",container : ""
            // } 
        ],
        goals : [
            // {
            //     term : "",
            //     content : "",container : ""
            // }
        ],
        language : [
            // {
            //     language_name : "",
            //     level : "",
            //     content : "",container : ""
            // }
        ],
        certificate : [
            // {
            //     time : "",
            //     content : "",container : ""
            // }
        ],
        another : [
            // {
            //     part_name : "",
            //     title : "",
            //     content : "",container : ""
            // }
        ],
    }  
    if(IDCVwhenChoose == 0){
        await SaveyourCV(contentYourCv);
        console.warn("Sau ( m·ªõi )",contentYourCv)
        await getdatapushtoAPI(contentYourCv);
        let allCV = `http://localhost:5028/api/NguoiDung/AllCV_by_ID_user?userid=${userIdnow}`;
        let res = await fetch(allCV);
        let dat = await res.json();
        IDCVwhenChoose = dat[dat.length - 1].idcv;
        localStorage.setItem("IDCVcurrent", dat[dat.length - 1].idcv);
        console.log(localStorage.getItem("IDCVcurrent"));
    }
    else{
        if(localStorage.getItem("IDCVcurrent") !== "undefined"){
            console.warn("---- Tr∆∞·ªõc",contentYourCv);
            await SaveyourCV(contentYourCv);
            console.warn("----- Sau",contentYourCv);
            console.log(localStorage.getItem("IDCVcurrent"));
            await updateCV(contentYourCv); // l√†m nhi·ªám v·ª• update 1 ph·∫ßn c·ªßa CV ( ·∫£nh , in4 )
            await Deletebe4Update(localStorage.getItem("IDCVcurrent")); // l√†m nhi·ªám v·ª• x√≥a ph·∫ßn c√≤n l·∫°i c·ªßa CV c≈© 
            await addDatatoUpdate(contentYourCv,localStorage.getItem("IDCVcurrent")); // th√™m m·ªõi n·ªôi dung m·ªõi v√†o ph·∫ßn c√≤n l·∫°i v·ª´a x√≥a 
        }
    }
}
localStorage.setItem("checkxemthemchua",false);
console.log(localStorage.getItem("checkxemthemchua"));

// 4,5s l∆∞u CV 1 l·∫ßn 
// setInterval(AutoSaveCv,4500);

function checkRepairCV(url){
    let checkURL = String(url);
    return isNaN(checkURL[checkURL.length - 1] + 1);
}
//---------------------------------------------------------------------------------------------------------
// renderCVbyidcv(checkRepairCV(currentURL));
function renderCVbyidcv(check){
    function ChooseTypeResdistribute(model){
        if(model == "paper_mau0" || model == "paper_mau2"){
            return "mau_1col";
        }
        else{
            return "mau_2col";
        }
    }
    if(!check){
        let idcv = localStorage.getItem("IDCVcurrent");
        let cvnow = `http://localhost:5028/api/NguoiDung/user/getDetailsCVbyID?userid=${userIdnow}&idcv=${idcv}`; 
        fetch(cvnow)
        .then(responsive=>{
            return responsive.json();
        })
        .then(dat=>{
            console.log(dat);
            fetch(`http://localhost:5028/api/NguoiDung/GetIMGbyin4ID?in4id=${dat.information.in4id}`)
            .then(resp=>{
                return resp.json();
            })
            .then(ulimg=>{
                content_left.querySelector(".anh_CV>img").src = `http://localhost:5028/UploadedImages/${ulimg.img}`;
            })
            .catch(error=>{
                content_left.querySelector(".anh_CV>img").src = `http://localhost:5028/UploadedImages/8a9d6e85a93b8b3a8002896da71882a3.jpg`;
            })
            // dat.modelCV
            let paperss = document.querySelectorAll(".paper");
            currentColor = dat.cv.color;
            console.log(dat.cv.modelCV);
            // dat.cv.color
            let papers = Array.from(content_left.querySelectorAll('.paper')); 
            papers.forEach(paper=>{
                paper.style.fontFamily = dat.cv.font;
                paper.style.fontSize = dat.cv.fontSize;
            })
            console.log(dat.cv.modelCV);
            let modelCVnow = ChooseTypeResdistribute(dat.cv.modelCV);
            console.log(modelCVnow);
            console.log("M√†u Hi·ªán T·∫°i",currentColor);
            switch(dat.cv.modelCV){
                case "paper_mau0":
                    paperss.forEach((paper,index)=>{                    
                        if(index == 0){
                            resetCV(paper);   
                        }
                        else{
                            Mau0(paper);
                        }
                    })             
                    setColor_mauConlai(currentColor);
                    break;
                case "paper_mau1":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau1(paper);   
                        }
                        else{
                            Mau1(paper);   
                        }
                    })
                    setColor_mauConlai(currentColor);
                    break;
                case "paper_mau2":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            console.log(paper);
                            resetCV(paper);
                            Mau2(paper);  
                        }
                        else{
                            Mau2(paper);  
                        }
                    })
                    setColor_mau2(currentColor);                          
                    break;
                case "paper_mau3":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau3(paper);  
                        }
                        else{
                            Mau3(paper);  
                        }
                    })
                    setColor_mau3(currentColor);                              
                    break;
                case "paper_mau4":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau4(paper);  
                        }
                        else{
                            Mau4(paper);  
                        }
                    })
                    setColor_mauConlai(currentColor);                             
                    break;
                case "paper_mau5":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau5(paper); 
                        }
                        else{
                            Mau5(paper); 
                        }
                    })
                    setColor_mau5(currentColor);                              
                    break;
                case "paper_mau6":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau6(paper);
                        }
                        else{
                            Mau6(paper);
                        }
                    })
                    setColor_mauConlai(currentColor);                             
                    break;
                case "paper_mau7":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau7(paper);
                        }
                        else{
                            Mau7(paper);
                        }
                    })
                    setColor_mau7(currentColor);
                    break;
                case "paper_mau8":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau8(paper); 
                        }
                        else{
                            Mau8(paper); 
                        }
                    })
                    setColor_mau8(currentColor);
                    break
                case "paper_mau9":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau9(paper);
                        }
                        else{
                            Mau9(paper);
                        }
                    })
                    setColor_mau9_mau10(currentColor);
                    break;
                case "paper_mau10":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau10(paper);
                        }
                        else{
                            Mau10(paper);
                        }
                    })
                    setColor_mau9_mau10(currentColor);                           
                    break;
                case "paper_mau11":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau11(paper);
                        }
                        else{
                            Mau11(paper);
                        }
                    })
                    setColor_mauConlai(currentColor);
                    break;
                case "paper_mau12":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau12(paper);
                        }
                        else{
                            Mau12(paper);
                        }
                    })
                    setColor_mauConlai(currentColor);                           
                    break;
                default:
                    console.log("M·∫´u Kh√¥ng H·ª£p L·ªá");
            }
            // ph·∫ßn Profile (in4)
            content_left.querySelector("#name").innerText = dat.profile.fullname;
            antiEnter(content_left.querySelector("#name"));antiEnter(content_left.querySelector("#name"));
            content_left.querySelector("#position").innerText = dat.profile.position;
            antiEnter(content_left.querySelector("#position"));
            content_left.querySelector("#phone").innerText = dat.information.phone;
            antiEnter(content_left.querySelector("#phone"));
            content_left.querySelector("#address").innerText = dat.information.address;
            antiEnter(content_left.querySelector("#address"));
            content_left.querySelector("#birth").innerText = dat.information.birth;
            antiEnter(content_left.querySelector("#birth"));
            content_left.querySelector("#email").innerText = dat.information.email;
            antiEnter(content_left.querySelector("#email"));
            content_left.querySelector("#github").innerText = dat.information.github;
            antiEnter(content_left.querySelector("#github"));
            content_left.querySelector(".phonelable").innerText = dat.information.phonelabel;
            antiEnter(content_left.querySelector(".phonelable"));
            content_left.querySelector(".addresslable").innerText = dat.information.addresslabel;
            antiEnter(content_left.querySelector(".addresslable"));
            content_left.querySelector(".birthlable").innerText = dat.information.birthlabel;
            antiEnter(content_left.querySelector(".birthlable"));
            content_left.querySelector(".emaillable").innerText = dat.information.emaillabel;
            antiEnter(content_left.querySelector(".emaillable"));
            content_left.querySelector(".githublable").innerText = dat.information.githublabel;
            antiEnter(content_left.querySelector(".githublable"));
            content_left.querySelector(".anh_CV>img").style.height = dat.information.imgSize
            content_left.querySelector(".anh_CV>img").style.width = dat.information.imgSize

            let partSkill = document.createElement("section");
            let partProject = document.createElement("section");
            let partAwards = document.createElement("section");
            let partworkGoals = document.createElement("section");
            let partCertificate = document.createElement("section");
            let partLanguage = document.createElement("section");
            let partAnother = document.createElement("section");
            let partOverview = document.createElement("section");
            let partworkExp = document.createElement("section");
            let partEducation = document.createElement("section");
            
            let overView = content_left.querySelector(".overview");
            let education = content_left.querySelector(".education");
            let workEXP = content_left.querySelector(".workexperience");
            let skill = content_left.querySelector(".skill");
            let project = content_left.querySelector(".project");
            let award = content_left.querySelector(".awards");
            let goal = content_left.querySelector(".goals");
            let certificate = content_left.querySelector(".certificate");
            let language = content_left.querySelector(".language");
            let otherPart = content_left.querySelector(".another");

            // 
            partSkill.classList.add("skill");
            partSkill.classList.add("part_ct");
            partSkill.classList.add("paragraph");
            
            //
            partProject.classList.add("project");
            partProject.classList.add("part_ct");
            partProject.classList.add("paragraph");
            
            //
            partAwards.classList.add("awards");
            partAwards.classList.add("part_ct");
            partAwards.classList.add("paragraph");
            
            //
            partworkGoals.classList.add("goals");
            partworkGoals.classList.add("part_ct");
            partworkGoals.classList.add("paragraph");
            
            //
            partCertificate.classList.add("certificate");
            partCertificate.classList.add("part_ct");
            partCertificate.classList.add("paragraph");
            
            //
            partLanguage.classList.add("language");
            partLanguage.classList.add("part_ct");
            partLanguage.classList.add("paragraph");
            
            //
            partAnother.classList.add("another");
            partAnother.classList.add("part_ct");
            partAnother.classList.add("paragraph");
            
            //
            partOverview.classList.add("overview");
            partOverview.classList.add("part_ct");
            partOverview.classList.add("paragraph");
            
            //
            partworkExp.classList.add("workexperience");
            partworkExp.classList.add("part_ct");
            partworkExp.classList.add("paragraph");
            
            //
            partEducation.classList.add("education");
            partEducation.classList.add("part_ct");
            partEducation.classList.add("paragraph");
            
            let paper_ = document.querySelector(".paper");
            // ki·ªÉm tra n·∫øu 
            if(dat.overviews.length > 0){
                if(!overView){
                    paper_.querySelector(`.${ele.container}`).insertAdjacentElement("beforeend",partOverview);
                    let div = document.createElement("section");
                    let ct_in_sectionSM = document.createElement("section");
                    let title_in_part = `<section class="bold title possible_Part item_in_part paragraph have_line">
                                    <i class="fa-solid fa-eye"></i>
                                    <p class="label_partCT">
                                        ${dat.overviews[0].name_title}
                                    </p>
                                </section>`
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partOverview.innerHTML += title_in_part;
                    partOverview.appendChild(ct_in_sectionSM);
                    div.classList.add("content_in_CV","paragraph","item_in_part","possible_Part");
                    div.setAttribute("fatherpart","overview");
                    div.innerHTML = ele.contentOverView;
                    dat.overviews.forEach(ele=>{
                        partOverview.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",div);
                        editContent(div);
                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                
                            redistributeContent_when_Addele_2col(div.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    overView.querySelector(".ct_in_sectionSM").innerHTML = "";
                    overView.querySelector(".label_partCT").innerText = dat.overviews[0].name_title
                    dat.overviews.forEach(ele=>{
                        let div = document.createElement("section");
                        div.classList.add("content_in_CV","paragraph","item_in_part","possible_Part");
                        div.setAttribute("fatherpart","overview");
                        div.innerHTML = ele.contentOverView;
                        console.log(dat.overviews);
                        overView.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",div);
                        editContent(div);
                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{        
                            console.log(ele.container);       
                            redistributeContent_when_Addele_2col(div.closest(`.${ele.container}`));
                        }
                    })
                }
            }
            else{
                overView.remove();
            }
            if(dat.workExperiences.length > 0){
                if(!workEXP){
                    paper_.querySelector(`.${ele.container}`).insertAdjacentElement("beforeend",partworkExp);
                    let title_in_part = `<section class="bold title possible_Part item_in_part have_line">
                                    <i class="fa-solid fa-suitcase"></i>
                                    <p class="label_partCT">
                                        ${dat.workExperiences[0].name_title}
                                    </p>
                                </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partworkExp.innerHTML += title_in_part;
                    partworkExp.appendChild(ct_in_sectionSM);
                    dat.workExperiences.forEach(ele=>{
                        let part_of_workexperience = document.createElement("section");
                        part_of_workexperience.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_workexperience.setAttribute("fatherpart","workexperience");
                        let cont = `<section class="half_left_of_content_item bold possible_Part">
                                                <p class="timeline type_2">${ele.time}</p>
                                            </section>
                                            <section class="half_right_of_content_item project_ofPart">
                                                <section class="bold">
                                                    <p class="title_item type_2 possible_Part">${ele.company_name}</p>
                                                </section>
                                                <p class="description type_2 possible_Part">${ele.position}</p>
                                                <ul class="content_item type_2 possible_Part"> 
                                                    ${ele.content}
                                                </ul>
                                            </section>`
                        part_of_workexperience.innerHTML += cont
                        partworkExp.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_workexperience);
                        editContent(part_of_workexperience);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(div.closest(`${dat.workExperiences.container}`));
                        }
                    })
                }
                else{
                    workEXP.querySelector(".ct_in_sectionSM").innerHTML = "";
                    workEXP.querySelector(".label_partCT").innerText = dat.workExperiences[0].name_title
                    console.log(dat.workExperiences);
                    dat.workExperiences.forEach(ele=>{
                    let part_of_workexperience = document.createElement("section");
                    part_of_workexperience.classList.add("content_in_CV","paragraph","item_in_part");
                    part_of_workexperience.setAttribute("fatherpart","workexperience");
                    let cont = `<section class="half_left_of_content_item bold possible_Part">
                                                <p class="timeline type_2">${ele.time}</p>
                                            </section>
                                            <section class="half_right_of_content_item project_ofPart">
                                                <section class="bold">
                                                    <p class="title_item type_2 possible_Part">${ele.company_name}</p>
                                                </section>
                                                <p class="description type_2 possible_Part">${ele.position}</p>
                                                <ul class="content_item type_2 possible_Part"> 
                                                    ${ele.content}
                                                </ul>
                                            </section>`
                    part_of_workexperience.innerHTML += cont;

                    workEXP.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_workexperience);
                    editContent(part_of_workexperience);
                    if(modelCVnow == "mau_1col"){
                        redistributeContent_when_Addele();
                    }
                    else{                  
                        redistributeContent_when_Addele_2col(part_of_workexperience.closest(`.${ele.container}`));
                    }
                })
                }
            }
            else{
                workEXP.remove();
            }
            if(dat.educations.length > 0){
                if(!education){
                    paper_.querySelector(`.${ele.container}`).insertAdjacentElement("beforeend",partEducation);
                    title_in_part = `<section class="bold title possible_Part item_in_part have_line">
                                    <i class="fa-solid fa-graduation-cap"></i>
                                    <p class="label_partCT">
                                        ${dat.educations[0].name_title}
                                    </p>
                                </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partEducation.appendChild(title_in_part);
                    partEducation.appendChild(ct_in_sectionSM);
                    dat.educations.forEach(ele=>{
                        let part_of_educations = document.createElement("section");
                        part_of_educations.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_educations.setAttribute("fatherpart","education");
                        let cont = `<section class="half_left_of_content_item bold possible_Part">
                                                <p class="timeline type_2">${ele.time}</p>
                                            </section>
                                            <section class="half_right_of_content_item study_place">
                                            <section class="bold possible_Part">
                                                <p class="title_item type_2">${ele.school_name}</p>
                                            </section>
                                            <ul class="content_item type_2 possible_Part"> 
                                                ${ele.content}
                                            </ul>
                                        </section>`
                        part_of_educations.innerHTML += cont;
                        partEducation.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_educations);
                        editContent(part_of_educations);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_educations.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    education.querySelector(".ct_in_sectionSM").innerHTML = "";
                    education.querySelector(".label_partCT").innerText = dat.educations[0].name_title
                    dat.educations.forEach(ele=>{
                        let part_of_educations = document.createElement("section");
                        part_of_educations.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_educations.setAttribute("fatherpart","education");
                        let cont = `<section class="half_left_of_content_item bold possible_Part">
                                                    <p class="timeline type_2">${ele.time}</p>
                                                </section>
                                                <section class="half_right_of_content_item study_place">
                                                <section class="bold possible_Part">
                                                    <p class="title_item type_2">${ele.school_name}</p>
                                                </section>
                                                <ul class="content_item type_2 possible_Part"> 
                                                    ${ele.content}
                                                </ul>
                                            </section>`
                        part_of_educations.innerHTML += cont; 
                        education.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_educations);
                        editContent(part_of_educations);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_educations.closest(`.${ele.container}`));
                        }
                    })
                }
            }
            else{
                education.remove();
            }
            // ------------------------------------------------- SKILL 
            if(dat.skills.length > 0){
                if(!skill){
                    console.log(dat.skills);
                    paper_.querySelector(`.${dat.skills[0].container}`).insertAdjacentElement("beforeend",partSkill);
                    title_in_part = `<section class="bold title possible_Part item_in_part">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.skills[0].name_title}
                                </p>
                            </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partSkill.innerHTML += title_in_part;
                    partSkill.appendChild(ct_in_sectionSM);
                    dat.skills.forEach(ele=>{
                        let part_of_skill = document.createElement("section");
                        part_of_skill.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_skill.setAttribute("fatherpart","skill");
                        let cont = `<section class="half_left_of_content_item possible_Part">
                                        <p class="timeline type_2">${ele.skill_name}</p>
                                    </section>
                                    <section class="half_right_of_content_item project_ofPart">
                                        <ul class="content_item type_2 possible_Part"> 

                                            ${ele.content}
                                        </ul>
                                    </section>`
                        part_of_skill.innerHTML += cont;
                        partSkill.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_skill);
                        editContent(part_of_skill);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_skill.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    skill.querySelector(".ct_in_sectionSM").innerHTML = "";
                    dat.skills.forEach(ele=>{
                        let part_of_skill = document.createElement("section");
                        part_of_skill.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_skill.setAttribute("fatherpart","skill");
                        let cont = `<section class="half_left_of_content_item possible_Part">
                                                <p class="timeline type_2">${ele.skill_name}</p>
                                            </section>
                                            <section class="half_right_of_content_item project_ofPart">
                                                <ul class="content_item type_2 possible_Part"> 
                                                    ${ele.content}
                                                </ul>
                                                </section>`
                        part_of_skill.innerHTML += cont
                        skill.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_skill);
                        editContent(part_of_skill);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_skill.closest(`.${ele.container}`));
                        }
                    })
                }
            }
            // ----------------------------------------------------Project 
            if(dat.projects.length > 0){
                if(!project){
                    paper_.querySelector(`.${dat.projects[0].container}`).insertAdjacentElement("beforeend",partProject);
                    title_in_part = `<section class="bold item_in_part possible_Part title">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.projects[0].name_title}
                                </p>
                            </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partProject.innerHTML += title_in_part;
                    partProject.appendChild(ct_in_sectionSM);

                    dat.projects.forEach(ele=>{
                        let part_of_project = document.createElement("section");
                        part_of_project.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_project.setAttribute("fatherpart","project");
                        let cont = `<section class="name_project">
                                        <b class="type_3 possible_Part">${ele.project_name}</b>
                                        <p class="type_3 possible_Part">${ele.time}</p>
                                    </section>
    
                                    <section>
                                        <table>
                                                <tr class="content_in_CV">
                                                <td class="half_left_of_content_item">
                                                    <div class="client_project_lable type_3 possible_Part">
                                                        <b > ${ele.client_lable} </b>
                                                    
                                                    </div>
                                                </td>
                                                <td class="half_right_of_content_item">
                                                    <div class="client_project type_3 possible_Part">
                                                        <p > ${ele.client} </p>
                                                    
                                                    </div>
                                                </td>
                                                </tr>
                                                <tr class="content_in_CV">
                                                <td class="half_left_of_content_item">
                                                    <div class="descriptions_project_lable type_3 possible_Part">
                                                        <b > ${ele.des_lable} </b>
                                                    
                                                    </div>
                                                </td>
                                                <td class="half_right_of_content_item">
                                                    <div class="descriptions_project type_3 possible_Part">
                                                        <p > ${ele.descriptions} </p>
                                                    
                                                    </div>
                                                </td>
                                                </tr>
                                                <tr class="content_in_CV">
                                                    <td class="half_left_of_content_item">
                                                        <div class="number_of_members_project_lable type_3 possible_Part">
                                                            <b > ${ele.nom_lable} </b>
                                                        
                                                        </div>
                                                    </td>
                                                    <td class="half_right_of_content_item">
                                                        <div class="number_of_members_project type_3 possible_Part">
                                                            <p > ${ele.number_of_members} </p>
                                                        </div>
                                                    </td>
                                                </tr>
                                                        <tr class="content_in_CV">
                                                        <td class="half_left_of_content_item">
                                                        <div class="position_project_lable type_3 possible_Part">
                                                            <b >${ele.pos_lable}</b>
                                                        
                                                        </div>
                                                        </td>
                                                        <td class="half_right_of_content_item">
                                                        <div class="position_project type_3 possible_Part">
                                                            <p > ${ele.position} </p>
                                                        
                                                        </div>
                                                        </td>
                                                        </tr>
                                                        <tr class="content_in_CV">
                                                        <td class="half_left_of_content_item">
                                                        <div class="responsibilities_project_lable type_3 possible_Part">
                                                            <b >${ele.respon_lable}</b>
                                                        
                                                        </div>
                                                        </td>
                                                        <td class="half_right_of_content_item">
                                                        <div class="responsibilities_project type_3 possible_Part">
                                                            <p > ${ele.responsibilities}</p>
                                                        
                                                        </div>
                                                        </td>
                                                        </tr>
                                                        <tr class="content_in_CV">
                                                        <td class="half_left_of_content_item">
                                                        <div class="technology_in_use_project_lable type_3 possible_Part">
                                                            <b >${ele.techuse_lable}</b>
                                                        
                                                        </div>
                                                        </td>
                                                        <td class="half_right_of_content_item">
                                                        <div class="technology_in_use_project type_3 possible_Part">
                                                            <p >${ele.technology_in_use} </p>
                                                        
                                                        </div>
                                                        </td>
                                                        </tr>
                                                        </table>
                                                    </section>`
                        part_of_project.innerHTML += cont; 
                        partProject.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_project);
                        editContent(part_of_project);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_project.closest(`.${ele.container}`));
                        }
                    })                          
                } 
                else{
                    console.log(project);
                    project.querySelector(".ct_in_sectionSM").innerHTML = "";
                    dat.projects.forEach(ele=>{
                        let part_of_project = document.createElement("section");
                        part_of_project.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_project.setAttribute("fatherpart","project");
                        let cont = `<section class="name_project">
                                            <b class="type_3 possible_Part">${ele.project_name}</b>
                                            <p class="type_3 possible_Part">${ele.time}</p>
                                        </section>
        
                                        <section>
                                            <table>
                                                <tr class="content_in_CV">
                                                <td class="half_left_of_content_item">
                                                    <div class="client_project_lable type_3 possible_Part">
                                                        <b > ${ele.client_lable} </b>
                                                    
                                                    </div>
                                                </td>
                                                <td class="half_right_of_content_item">
                                                    <div class="client_project type_3 possible_Part">
                                                        <p > ${ele.client} </p>
                                                    
                                                    </div>
                                                </td>
                                                </tr>
                                                <tr class="content_in_CV">
                                                <td class="half_left_of_content_item">
                                                    <div class="descriptions_project_lable type_3 possible_Part">
                                                        <b > ${ele.des_lable} </b>
                                                    
                                                    </div>
                                                </td>
                                                <td class="half_right_of_content_item">
                                                    <div class="descriptions_project type_3 possible_Part">
                                                        <p > ${ele.descriptions} </p>
                                                    
                                                    </div>
                                                </td>
                                                </tr>
                                                <tr class="content_in_CV">
                                                <td class="half_left_of_content_item">
                                                        <div class="number_of_members_project_lable type_3 possible_Part">
                                                            <b > ${ele.nom_lable} </b>
                                                        
                                                        </div>
                                                    </td>
                                                    <td class="half_right_of_content_item">
                                                        <div class="number_of_members_project type_3 possible_Part">
                                                            <p > ${ele.number_of_members} </p>
                                                        
                                                        </div>
                                                        </td>
                                                        </tr>
                                                        <tr class="content_in_CV">
                                                        <td class="half_left_of_content_item">
                                                        <div class="position_project_lable type_3 possible_Part">
                                                            <b >${ele.pos_lable}</b>
                                                        
                                                        </div>
                                                        </td>
                                                        <td class="half_right_of_content_item">
                                                        <div class="position_project type_3 possible_Part">
                                                            <p > ${ele.position} </p>
                                                        
                                                        </div>
                                                        </td>
                                                        </tr>
                                                        <tr class="content_in_CV">
                                                        <td class="half_left_of_content_item">
                                                        <div class="responsibilities_project_lable type_3 possible_Part">
                                                            <b >${ele.respon_lable}</b>
                                                        
                                                        </div>
                                                        </td>
                                                        <td class="half_right_of_content_item">
                                                        <div class="responsibilities_project type_3 possible_Part">
                                                            <p > ${ele.responsibilities}</p>
                                                        
                                                        </div>
                                                        </td>
                                                        </tr>
                                                        <tr class="content_in_CV">
                                                        <td class="half_left_of_content_item">
                                                        <div class="technology_in_use_project_lable type_3 possible_Part">
                                                            <b >${ele.techuse_lable}</b>
                                                        
                                                        </div>
                                                        </td>
                                                        <td class="half_right_of_content_item">
                                                        <div class="technology_in_use_project type_3 possible_Part">
                                                            <p >${ele.technology_in_use} </p>
                                                        
                                                        </div>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </section>`
                        part_of_project.innerHTML += cont; 
                        project.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_project);
                        editContent(part_of_project);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_project.closest(`.${ele.container}`));
                        }
                    })
                }
            }
            if(dat.awards.length > 0){
                if(!award){
                    paper_.querySelector(`.${dat.awards[0].container}`).insertAdjacentElement("beforeend",partAwards);
                    title_in_part = `<section class="bold item_in_part possible_Part title">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.awards[0].name_title}
                                </p>
                            </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partAwards.innerHTML += title_in_part;
                    partAwards.appendChild(ct_in_sectionSM);
                    dat.awards.forEach(ele=>{
                        let part_of_Awards = document.createElement("section");
                        part_of_Awards.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_Awards.setAttribute("fatherpart","awards");
                        let cont = `<section class="half_left_of_content_item bold possible_Part">
                                            <p class="timeline type_2">${ele.time}</p>
                                        </section>
                                        <section class="half_right_of_content_item my_award projectcv">
                                            <section class="bold possible_Part title_item">
                                                <p class="type_2">${ele.award_name}</p>
                                            </section>
                                            <section class="content_item">
                                                ${ele.content}
                                            </section>
                                        </section>`
                        part_of_Awards.innerHTML += cont;
                        partAwards.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_Awards);
                        editContent(part_of_Awards);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_Awards.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    dat.awards.forEach(ele=>{
                        let part_of_Awards = document.createElement("section");
                            part_of_Awards.classList.add("content_in_CV","paragraph","item_in_part");
                            part_of_Awards.setAttribute("fatherpart","awards");
                        let cont = `<section class="half_left_of_content_item bold possible_Part">
                                        <p class="timeline type_2">${ele.time}</p>
                                        </section>
                                        <section class="half_right_of_content_item my_award projectcv">
                                        <section class="bold possible_Part">
                                        <p class="title_item type_2">${ele.award_name}</p>
                                        </section>
                                        <section class="content_item">
                                            ${ele.content}
                                            </section>
                                            </section>`
                        part_of_Awards.innerHTML += cont;
                        console.log(award);
                        award.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_Awards);
                        editContent(part_of_Awards);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_Awards.closest(`.${ele.container}`));
                        }
                    })
                }
            }
            if(dat.goals.length > 0){
                if(!goal){
                    paper_.querySelector(`.${dat.goals[0].container}`).insertAdjacentElement("beforeend",partworkGoals);
                    title_in_part = `<section class="bold item_in_part possible_Part title">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.goals[0].name_title}
                                </p>
                    </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partworkGoals.innerHTML += title_in_part;
                    partworkGoals.appendChild(ct_in_sectionSM);
                    dat.goals.forEach(ele=>{
                        let part_of_goals = document.createElement("section");
                        part_of_goals.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_goals.setAttribute("fatherpart","goals");
                        let cont = `<section class="half_left_of_content_item bold">
                                    <p class="timeline type_2 possible_Part">${ele.term}</p>
                                    </section>
                                    <section class="half_right_of_content_item my_award project">
                                    <section class="content_item">
                                    ${ele.content}
                                    </section>
                                    </section>`
                        part_of_goals.innerHTML += cont;
                        partworkGoals.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_goals);
                        editContent(part_of_goals);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_goals.closest(`.${ele.container}`));
                        }
                    })                  
                }
                else{
                    dat.goals.forEach(ele=>{
                        let part_of_goals = document.createElement("section");
                            part_of_goals.classList.add("content_in_CV","paragraph","item_in_part");
                            part_of_goals.setAttribute("fatherpart","goals");
                            let cont = `<section class="half_left_of_content_item bold">
                                        <p class="timeline type_2 possible_Part">${ele.term}</p>
                                        </section>
                                        <section class="half_right_of_content_item my_award project">
                                        <section class="content_item">
                                            ${ele.content}
                                        </section>
                                        </section>`
                            part_of_goals.innerHTML += cont;
                            goal.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_goals);
                            editContent(part_of_goals);

                            if(modelCVnow == "mau_1col"){
                                redistributeContent_when_Addele();
                            }
                            else{                  
                                redistributeContent_when_Addele_2col(part_of_goals.closest(`.${ele.container}`));
                            }
                    })      
                }     
            }
            if(dat.certificates.length > 0){
                if(!certificate){
                    paper_.querySelector(`.${dat.certificates[0].container}`).insertAdjacentElement("beforeend",partCertificate);
                    title_in_part = `<section class="bold item_in_part possible_Part title">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.certificates[0].name_title}

                                </p>
                            </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partCertificate.innerHTML = title_in_part;
                    partCertificate.appendChild(ct_in_sectionSM);
                    dat.certificates.forEach(ele=>{
                        let part_of_certificate = document.createElement("section");
                        part_of_certificate.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_certificate.setAttribute("fatherpart","certificate");
                        let cont = `<section class="half_left_of_content_item bold">
                                        <p class="timeline type_2 possible_Part">${ele.time}</p>
                                    </section>
                                    <section class="half_right_of_content_item my_award project">
                                            <section class="content_item">
                                            ${ele.content}
                                            </section>
                                    </section>`
                        part_of_certificate.innerHTML += cont;
                        partCertificate.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_certificate);
                        editContent(part_of_certificate);

                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{              
                            console.log(ele.container);
                            console.log(part_of_certificate);
                            redistributeContent_when_Addele_2col(part_of_certificate.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    dat.certificates.forEach(ele=>{
                            let part_of_certificate = document.createElement("section");
                            part_of_certificate.classList.add("content_in_CV","paragraph","item_in_part");
                            part_of_certificate.setAttribute("fatherpart","certificate");
                            let cont = `<section class="half_left_of_content_item bold">
                                            <p class="timeline type_2 possible_Part">${ele.time}</p>
                                        </section>
                                        <section class="half_right_of_content_item my_award project">
                                            <section class="content_item">
                                            ${ele.content}
                                            </section>
                                        </section>`
                            part_of_certificate.innerHTML += cont;
                            certificate.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_certificate);
                            editContent(part_of_certificate);

                            if(modelCVnow == "mau_1col"){
                                redistributeContent_when_Addele();
                            }
                            else{                  
                                redistributeContent_when_Addele_2col(part_of_certificate.closest(`.${ele.container}`));
                            }
                        })
                }
            }
            // Ch√∫ √Ω m·∫´u n√†y ƒë·ªÉ r√∫t kinh nghi·ªám v√† s·ª≠a nh·ªØng m·∫´u sau 
            if(dat.languages.length > 0){
                if(!language){
                    console.log("V√¥ ƒë√¢y");
                    paper_.querySelector(`.${dat.languages[0].container}`).insertAdjacentElement("beforeend",partLanguage);
                    title_in_part = `<section class="bold item_in_part possible_Part title">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.languages[0].name_title}
                                </p>
                            </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partLanguage.innerHTML = title_in_part;
                    partLanguage.appendChild(ct_in_sectionSM);
                    dat.languages.forEach(ele=>{
                        let part_of_language = document.createElement("section");
                        part_of_language.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_language.setAttribute("fatherpart","language");
                        let cont = `<section class="half_left_of_content_item bold">
                                        <p class="timeline type_2 possible_Part">${ele.language_name}</p>
                                    </section>
                                    <section class="half_right_of_content_item my_award project">
                                        <section class="type_2 possible_Part title_item">
                                            <b class="" >${ele.level}</b>
                                        </section>
                                        <section class="content_item">
                                                ${ele.content}
                                        </section>
                                    </section>`
                        part_of_language.innerHTML += cont;
                        partLanguage.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_language);
                        editContent(part_of_language);

                        console.log(part_of_language);
                        // console.log()
                        if(modelCVnow == "mau_1col"){                          
                            redistributeContent_when_Addele();
                        }
                        else{                 
                            console.log(ele.container); 
                            redistributeContent_when_Addele_2col(part_of_language.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    console.log(language);  
                    language.querySelector(".ct_in_sectionSM").innerHTML = "";
                    dat.languages.forEach(ele=>{
                    let part_of_language = document.createElement("section");
                    part_of_language.classList.add("content_in_CV","paragraph","item_in_part");
                    part_of_language.setAttribute("fatherpart","language");
                    let cont = `<section class="half_left_of_content_item bold">
                                    <p class="timeline type_2 possible_Part">${ele.language_name}</p>
                                </section>
                                <section class="half_right_of_content_item my_award project">
                                <section class="type_2 possible_Part">
                                <b class="title_item" >${ele.level}</b>
                                </section>
                                <section class="content_item">                                
                                            ${ele.content}
                                </section>
                                </section>`
                    part_of_language.innerHTML += cont
                    console.log(language);
                    console.log(ele);
                    language.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_language);
                    editContent(part_of_language);

                    if(modelCVnow == "mau_1col"){
                        redistributeContent_when_Addele();
                    }
                    else{                  
                        redistributeContent_when_Addele_2col(part_of_language.closest(`.${ele.container}`));
                    }
                    })
                }
            }
            if(dat.anothers.length > 0){
                if(!otherPart){
                    paper_.querySelector(`.${dat.anothers[0].container}`).insertAdjacentElement("beforeend",partAnother);
                    title_in_part = `<section class="bold item_in_part possible_Part title">
                                <i class="fa-solid fa-graduation-cap"></i>
                                <p class="label_partCT">
                                    ${dat.anothers[0].name_title}
                                </p>
                            </section>`
                    let ct_in_sectionSM = document.createElement("section");
                    ct_in_sectionSM.classList.add("ct_in_sectionSM");
                    partAnother.innerHTML = title_in_part; 
                    partAnother.appendChild(ct_in_sectionSM);
                    dat.anothers.forEach(ele=>{
                        let part_of_partAnother = document.createElement("section");
                        part_of_partAnother.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_partAnother.setAttribute("fatherpart","another");
                        let cont = `<section class="half_left_of_content_item bold">
                                        <p class="timeline type_2 possible_Part">${ele.name_part}</p>
                                    </section>
                                    <section class="half_right_of_content_item my_award project">
                                        <section class="type_2 possible_Part title_item">
                                            <b class="" >${ele.title}</b>
                                        </section>
                                        <section class="content_item">                                      
                                                ${ele.content}
                                        </section>
                                    </section>`
                        part_of_partAnother.innerHTML += cont;
                        partAnother.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_partAnother);
                        editContent(part_of_partAnother);
                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{     
                            console.log(ele.container) ;
                            console.log(part_of_partAnother);         
                            redistributeContent_when_Addele_2col(part_of_partAnother.closest(`.${ele.container}`));
                        }
                    })
                }
                else{
                    console.log(otherPart);
                    otherPart.querySelector(".ct_in_sectionSM").innerHTML = "";
                    dat.anothers.forEach(ele=>{
                        let part_of_partAnother = document.createElement("section");
                        part_of_partAnother.classList.add("content_in_CV","paragraph","item_in_part");
                        part_of_partAnother.setAttribute("fatherpart","another");
                        let cont = `<section class="half_left_of_content_item bold">
                                        <p class="timeline type_2 possible_Part">${ele.name_part}</p>
                                    </section>
                                    <section class="half_right_of_content_item my_award project">
                                        <section class="type_2 possible_Part">
                                            <b class="title_item" >${ele.title}</b>
                                        </section>
                                        <section class="content_item">                          
                                                ${ele.content}
                                        </section>
                                    </section>`
                        part_of_partAnother.innerHTML += cont;
                        otherPart.querySelector(".ct_in_sectionSM").insertAdjacentElement("beforeend",part_of_partAnother);
                        editContent(part_of_partAnother);
                        if(modelCVnow == "mau_1col"){
                            redistributeContent_when_Addele();
                        }
                        else{                  
                            redistributeContent_when_Addele_2col(part_of_partAnother.closest(`.${ele.container}`));
                        }
                    })
                }
            }
            switch(dat.cv.modelCV){
                case "paper_mau0":
                    paperss.forEach((paper,index)=>{                    
                        if(index == 0){
                            resetCV(paper);   
                        }
                        else{
                            Mau0(paper);
                        }
                    })             
                    setColor_mauConlai(currentColor);
                    break;
                case "paper_mau1":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau1(paper);   
                        }
                        else{
                            Mau1(paper);   
                        }
                    })
                    setColor_mauConlai(currentColor);
                    break;
                case "paper_mau2":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            console.log(paper);
                            resetCV(paper);
                            Mau2(paper);  
                        }
                        else{
                            Mau2(paper);  
                        }
                    })
                    setColor_mau2(currentColor);                          
                    break;
                case "paper_mau3":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau3(paper);  
                        }
                        else{
                            Mau3(paper);  
                        }
                    })
                    setColor_mau3(currentColor);                              
                    break;
                case "paper_mau4":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau4(paper);  
                        }
                        else{
                            Mau4(paper);  
                        }
                    })
                    setColor_mauConlai(currentColor);                             
                    break;
                case "paper_mau5":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau5(paper); 
                        }
                        else{
                            Mau5(paper); 
                        }
                    })
                    setColor_mau5(currentColor);                              
                    break;
                case "paper_mau6":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau6(paper);
                        }
                        else{
                            Mau6(paper);
                        }
                    })
                    setColor_mauConlai(currentColor);                             
                    break;
                case "paper_mau7":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau7(paper);
                        }
                        else{
                            Mau7(paper);
                        }
                    })
                    setColor_mau7(currentColor);
                    break;
                case "paper_mau8":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau8(paper); 
                        }
                        else{
                            Mau8(paper); 
                        }
                    })
                    setColor_mau8(currentColor);
                    break
                case "paper_mau9":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau9(paper);
                        }
                        else{
                            Mau9(paper);
                        }
                    })
                    setColor_mau9_mau10(currentColor);
                    break;
                case "paper_mau10":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau10(paper);
                        }
                        else{
                            Mau10(paper);
                        }
                    })
                    setColor_mau9_mau10(currentColor);                           
                    break;
                case "paper_mau11":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau11(paper);
                        }
                        else{
                            Mau11(paper);
                        }
                    })
                    setColor_mauConlai(currentColor);
                    break;
                case "paper_mau12":
                    paperss.forEach((paper,index)=>{
                        if(index == 0){
                            resetCV(paper);
                            Mau12(paper);
                        }
                        else{
                            Mau12(paper);
                        }
                    })
                    setColor_mauConlai(currentColor);                           
                    break;
                default:
                    console.log("M·∫´u Kh√¥ng H·ª£p L·ªá");
            }
            if(dat.cv.modelCV == "paper_mau1"){
                fixbug0603("half-right");
            }
            if (window.observer1) {
                window.observer1.disconnect();
            }
            if (window.observer3) {
                window.observer3.disconnect();
            }
            const observer1 = new MutationObserver((mutations) => {
                // console.log("res in CheckStyleCV : ",res);
                content_left.addEventListener('input', function(e) {
                    const ele = e.target.closest(".item_in_part");
                    if (!ele) return;
                    
                    if (modelCVnow == "mau_1col") {
                        redistributeContent_1col(ele.closest(".paper"));
                    } else {
                        const part = ele.closest(".half-left") || ele.closest(".half-right");
                        if (part) {
                            redistributeContent_2col(part);
                        }
                    }
                });
                setTimeout(()=>{
                    observer1.disconnect();
                },300)
            }); 
        
            window.observer1 = observer1;
            observer1.observe(content_left, { childList: true, subtree: true });   
 
        
            const observer3 = new MutationObserver((mutations) => { // d√πng ƒë·ªÉ ph√°t hi·ªán thay ƒë·ªïi trong "content_left" 
            mutations.forEach((mutation) => {
            //   if (mutation.type === 'childList') {
                // C·∫≠p nh·∫≠t l·∫°i NodeList khi c√≥ ph·∫ßn t·ª≠ m·ªõi
                part_content = document.querySelectorAll('.content-left .paragraph');
                part_content.forEach(ele => {
                    ele.addEventListener("click", function(event) {
                        event.stopPropagation(); // ngƒÉn ch·∫∑n h√†nh vi n·ªïi b·ªçt 
                        editContent(ele,modelCVnow);
                    });
                });
            //   }
                });
        
            });
        
            window.observer3 = observer3;
            observer3.observe(content_left, { childList: true, subtree: true });
        
            //C√°c ph·∫ßn code c√≤n l·∫°i gi·ªØ nguy√™n
            part_content.forEach(ele => {
                ele.addEventListener("click", function(event) {
                    event.stopPropagation();
                    editContent(ele, modelCVnow);
                });
            });
            title_cv = document.querySelectorAll(".title");
            title_cv.forEach(function(ele){
                ele.addEventListener("click", function(event) {
                    editContent(ele.closest(".part_ct"), modelCVnow);
                });
            });
            
        })
    }
}
async function urlToBlob(url) {
    try {
        const response = await fetch(url, { mode: 'cors' }); 
        if (!response.ok) {
            throw new Error(`Failed to fetch image from URL: ${response.statusText}`);
        }
        const blob = await response.blob();
        return blob;
    } catch (error) {
        console.error('Error converting URL to Blob:', error);
        throw error;
    }
}
// ƒë√£ c√≥ ·∫£nh m·∫∑c ƒë·ªãnh trong file c·ªßa server , bh ch·ªâ c·∫ßn l√†m nhi·ªám v·ª• l√† n·∫øu l√∫c save h√¨nh ·∫£nh n√≥ l√† ·∫£nh m·∫∑c ƒë·ªãnh th√¨ l∆∞u tr·ªØ n√≥ l√† 
async function convertImageToBase64(src) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'Anonymous'; // H·ªó tr·ª£ CORS n·∫øu c·∫ßn
        img.src = src;

        img.onload = () => {
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;

            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, img.width, img.height);

            const base64 = canvas.toDataURL('image/jpeg'); // Chuy·ªÉn ƒë·ªïi ·∫£nh sang Base64
            resolve(base64);
        };

        img.onerror = (error) => {
            reject(new Error('Kh√¥ng th·ªÉ t·∫£i ·∫£nh: ' + error));
        };
    });
}
async function base64ToBlob1(base64, contentType = 'image/jpg') {
    console.log(base64);
    if (base64.startsWith('http')) {
        try {
            const blob = await urlToBlob(base64);
            return blob;
        } catch (error) {
            console.error('L·ªói x·ª≠ l√Ω URL:', error);
            throw error;
        }
    }
    else if (base64.startsWith('data:')) {
        const byteCharacters = atob(base64.split(',')[1]); // Lo·∫°i b·ªè "data:image/png;base64," ·ªü ƒë·∫ßu
        const byteArrays = [];
        for (let offset = 0; offset < byteCharacters.length; offset += 512) {
            const slice = byteCharacters.slice(offset, offset + 512);
            const byteNumbers = Array.from(slice).map((char) => char.charCodeAt(0));
            byteArrays.push(new Uint8Array(byteNumbers));
        }
        return new Blob(byteArrays, { type: contentType });
    }
}
async function parseHTTP_to_Blob(url) {
    try {
        const response = await fetch(url, {
            method: "GET",
            mode: 'cors',
            headers: {
                "Content-Type": "application/json"
            }
        }); // B·∫≠t ch·∫ø ƒë·ªô CORS
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return await response.blob(); // Tr·∫£ v·ªÅ Blob
    } catch (err) {
        console.error("L·ªói khi t·∫£i h√¨nh ·∫£nh:", err);
        throw err;
    }
}
// [bug] khi ƒë·ªïi ng∆∞·ªùi d√πng kh√°c th√¨ idcv n√≥ v·∫´n tƒÉng 
async function getdatapushtoAPI(contentYourCv){
    let in4CV = "http://localhost:5028/api/NguoiDung/in4CV_myCV";
    let profile = "http://localhost:5028/api/NguoiDung/profile_myCV";
    let overview = "http://localhost:5028/api/NguoiDung/overview";
    let experience = "http://localhost:5028/api/NguoiDung/experience";
    let education = "http://localhost:5028/api/NguoiDung/Education";
    let projects = "http://localhost:5028/api/NguoiDung/Projects";
    let skill = "http://localhost:5028/api/NguoiDung/Skill";
    let awards = "http://localhost:5028/api/NguoiDung/Awards";
    let goals = "http://localhost:5028/api/NguoiDung/Goals";
    let certificate = "http://localhost:5028/api/NguoiDung/Certificate";
    let language = "http://localhost:5028/api/NguoiDung/Language";
    let anotherPart = "http://localhost:5028/api/NguoiDung/AnotherPart";
    let information = "http://localhost:5028/api/NguoiDung/information";
    let upimg = "http://localhost:5028/api/NguoiDung/UploadImage";
        // only1 
    try {
        console.log(contentYourCv);
        const cvResponse = await fetch(in4CV, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                userid: userIdnow,
                modelCV: contentYourCv.model,
                color: contentYourCv.color,
                font: contentYourCv.font,
                fontSize: contentYourCv.fontSize
            })
        });
        console.log(cvResponse);
        console.log(JSON.stringify({
            userid: userIdnow,
            modelCV: contentYourCv.model
        }));

        let cvData = await cvResponse.json();
        let idcvnow = cvData.idcv;
        console.log(idcvnow);
        if (!idcvnow) throw new Error("Kh√¥ng th·ªÉ l·∫•y idcv!");

        const fetchPromises = [];
        await fetch(profile,{
                method: "POST",
                headers: {
                    "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                },
                body: JSON.stringify({
                    idcv : idcvnow,
                    fullname : contentYourCv.userprofile.name,
                    position : contentYourCv.userprofile.position,
                    container : contentYourCv.userprofile.container
                })
        })
        await fetch( information,{
                method: "POST",
                headers: {
                    "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                },
                body: JSON.stringify({
                    idcv : idcvnow,
                    phone : contentYourCv.information.phone,
                    address : contentYourCv.information.address,
                    github : contentYourCv.information.github,
                    email : contentYourCv.information.email,
                    birth : contentYourCv.information.birth,
                    imgSize : contentYourCv.information.imgSize,
                    container : contentYourCv.information.container,
                    phonelabel: contentYourCv.information.phonelabel,
                    addresslabel: contentYourCv.information.addresslabel,
                    githublabel: contentYourCv.information.githublabel,
                    emaillabel: contentYourCv.information.emaillabel,
                    birthlabel: contentYourCv.information.birthlabel
                })
        })     
        console.log(JSON.stringify({
            idcv : idcvnow,
                    fullname : contentYourCv.information.name,
                    position : contentYourCv.information.position,
                    phone : contentYourCv.information.phone,
                    address : contentYourCv.information.address,
                    github : contentYourCv.information.github,
                    email : contentYourCv.information.email,
                    birth : contentYourCv.information.birth,
                    img : contentYourCv.information.imgCV,
                    container : contentYourCv.information.container})
        )
        let getDetailsCVbyID = `http://localhost:5028/api/NguoiDung/user/getDetailsCVbyID?userid=${userIdnow}&idcv=${idcvnow}`;
        const response = await fetch(getDetailsCVbyID);
        const dat = await response.json();
        console.log(dat);
        const blobImage = await base64ToBlob1(contentYourCv.uploadImg);
        await fetch(getDetailsCVbyID)
        .then(res=>{
            return res.json();
        })
        .then(dat=>{
            console.log(dat);
            let in4idnow;
            in4idnow = dat.information.in4id;
                console.log(blobImage);
                // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API
                const formData = new FormData();
                formData.append("in4id", in4idnow); // Gi√° tr·ªã in4id
                formData.append("file", blobImage, "image.jpg"); // ·∫¢nh d∆∞·ªõi d·∫°ng blob
                console.log("-----------------");
                for (let pair of formData.entries()) {
                    console.log(pair[0] + ": " + typeof pair[1]);
                }
                console.log(formData)
                // G·ª≠i request l√™n API
                fetch(upimg, {
                    method: "POST",
                    body: formData, 
                })
                .then((res) => {
                    if (!res.ok) throw new Error("L·ªói khi t·∫£i ·∫£nh l√™n!");
                    return res.json();
                })
                .then((data) => {
                    console.log("Ph·∫£n h·ªìi t·ª´ API:", data);
                })
                .catch((err) => {
                    console.error(err);
                });
        })
        if(contentYourCv.overview.length > 0){
            console.log(contentYourCv.overview);
            contentYourCv.overview.forEach(dat=>{
                console.log(dat.name_title)
                console.log(JSON.stringify({
                    idcv : idcvnow,
                    contentOverView : dat.content,
                    container : dat.container,
                    name_title : dat.name_title
                }));
                fetchPromises.push(
                fetch(overview,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" 
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        contentOverView : dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
                )
            })       
        }
        if(contentYourCv.workexperience.length > 0){
            contentYourCv.workexperience.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(experience,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            company_name : dat.title,
                            position: dat.descreption,
                            time: dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
    
                )
                console.log(
                    JSON.stringify({
                        idcv : idcvnow,
                            company_name : dat.title,
                            position: dat.descreption,
                            time: dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                    })
                )
            })
        }
        if(contentYourCv.education.length > 0){
            contentYourCv.education.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(education,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            school_name : dat.title,
                            time: dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                )
                console.log(
                    JSON.stringify({
                        idcv : idcvnow,
                        school_name : dat.school_name,
                        time: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                )
            })

        }
        if(contentYourCv.skill.length > 0){
            contentYourCv.skill.forEach((dat,index)=>{
                fetchPromises.push(
                        fetch(skill,{
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                            },
                            body: JSON.stringify({
                                idcv : idcvnow,
                                skill_name : dat.time,
                                content: dat.content,
                                container : dat.container,
                                name_title : dat.name_title
                            })
                        })
                        
                    )
            })
        }
        if(contentYourCv.project.length > 0){
            contentYourCv.project.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(projects,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            project_name : dat.project_name,
                            client: dat.client,
                            time: dat.time,
                            descriptions: dat.descriptions,
                            number_of_members: Number(dat.number_of_members),
                            position: dat.position,
                            responsibilities: dat.responsibilities,
                            technology_in_use: dat.technology_in_use,
                            container : dat.container,
                            name_title : dat.name_title,
                            client_lable: dat.client_lable,
                            des_lable: dat.des_lable,
                            nom_lable: dat.nom_lable,
                            pos_lable: dat.pos_lable,
                            respon_lable: dat.respon_lable,
                            techuse_lable: dat.techuse_lable
                        })
                    })
                )
                console.log(JSON.stringify({
                    idcv : idcvnow,
                    project_name : dat.project_name,
                    client: dat.client,
                    time: dat.time,
                    descriptions: dat.descriptions,
                    number_of_members: Number(dat.number_of_members),
                    position: dat.position,
                    responsibilities: dat.responsibilities,
                    technology_in_use: dat.technology_in_use,
                    container : dat.container,
                    name_title : dat.name_title,
                    client_lable: dat.client_lable,
                    des_lable: dat.des_lable,
                    nom_lable: dat.nom_lable,
                    pos_lable: dat.pos_lable,
                    respon_lable: dat.respon_lable,
                    techuse_lable: dat.techuse_lable
                }))
            })
        }
        if(contentYourCv.awards.length > 0){
            contentYourCv.awards.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(awards,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            award_name : dat.title,
                            time: dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                )
            })
        }
        if(contentYourCv.goals.length > 0){
            contentYourCv.goals.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(goals,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            term: dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                )
            })
        }
        if(contentYourCv.certificate.length > 0){
            contentYourCv.certificate.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(certificate,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            time: dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                )
            })
        }
        if(contentYourCv.language.length > 0){
            contentYourCv.language.forEach((dat,index)=>{
                fetchPromises.push(
                    fetch(language,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            language_name: dat.time,
                            level: dat.title,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                )
            })
        }
        if(contentYourCv.another.length > 0){
            console.log(contentYourCv.another.length);
            console.log(contentYourCv.another);
            contentYourCv.another.forEach((dat,index)=>{
                console.log("l·∫ßn ",index);
                fetchPromises.push(
                    fetch(anotherPart,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            name_part: dat.time,
                            title: dat.title,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                )
            })
        }
        await Promise.all(fetchPromises);
    }
    catch (error) {
        console.error("L·ªói khi ƒë·∫©y d·ªØ li·ªáu:", error);
    }
}
async function updateCV(contentYourCv){
    let api = `http://localhost:5028/api/NguoiDung/Update_DetailsCVbyID?userid=${userIdnow}&idcv=${localStorage.getItem("IDCVcurrent")}`;
    let getDetailsCVbyID = `http://localhost:5028/api/NguoiDung/user/getDetailsCVbyID?userid=${userIdnow}&idcv=${localStorage.getItem("IDCVcurrent")}`;
    // l√†m api update img 
    // d√πng fatherpart ƒë·ªÉ x√¢y d·ª±ng v√† fix l·ªói di chuy·ªÉn 
    console.log(contentYourCv);
    const response = await fetch(getDetailsCVbyID);
    const data = await response.json();
    let in4idnow = data.information.in4id;
    let apiIMG = `http://localhost:5028/api/NguoiDung/UpdateUpimg?in4id=${in4idnow}`;
    console.log(data);
    // console.log(contentYourCv.uploadImg.substring(0,4));
    if(contentYourCv.uploadImg.substring(0,4) == "http"){
        let img_unchanged = await parseHTTP_to_Blob(contentYourCv.uploadImg);
        console.log(img_unchanged);
        const formData1 = new FormData();
        formData1.append("in4id", in4idnow); // ID c·ªßa th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t
        formData1.append("imgFile", img_unchanged, "image.jpg"); // ·∫¢nh d∆∞·ªõi d·∫°ng Blob
        try {
            const response = await fetch(apiIMG, {
                method: "PUT",
                body: formData1 
            });
    
            if (!response.ok) {
                throw new Error("L·ªói khi t·∫£i ·∫£nh l√™n!");
            }
    
            const data = await response.json();
            console.log("Ph·∫£n h·ªìi t·ª´ API:", data);
        } catch (err) {
            console.error(err);
        }
    }
    else{
        const blobImage = await base64ToBlob1(contentYourCv.uploadImg);    
        const formData = new FormData();
        formData.append("in4id", in4idnow); // ID c·ªßa th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t
        formData.append("imgFile", blobImage, "image.jpg"); // ·∫¢nh d∆∞·ªõi d·∫°ng Blob
        
        for (let pair of formData.entries()) {
            console.log(pair[0] + ": " + typeof pair[1]);
        }
    
        // G·ª≠i request PUT ƒë·ªÉ c·∫≠p nh·∫≠t ·∫£nh
        try {
            const response = await fetch(apiIMG, {
                method: "PUT",
                body: formData // G·ª≠i d·ªØ li·ªáu d∆∞·ªõi d·∫°ng FormData (tr√¨nh duy·ªát t·ª± ƒë·ªông set Content-Type cho FormData)
            });
    
            if (!response.ok) {
                throw new Error("L·ªói khi t·∫£i ·∫£nh l√™n!");
            }
    
            const data = await response.json();
            console.log("Ph·∫£n h·ªìi t·ª´ API:", data);
        } catch (err) {
            console.error(err);
        }
    }
    fetch(api,{
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            cv: {
                userid: userIdnow,
                modelCV: contentYourCv.model,
                color: contentYourCv.color,
                font: contentYourCv.font,
                fontSize: contentYourCv.fontSize
            },
            profile: {
                idcv: IDCVwhenChoose,
                fullname: contentYourCv.userprofile.name,
                position: contentYourCv.userprofile.position,
                container: contentYourCv.userprofile.container
            },
            information: {
                idcv: IDCVwhenChoose,
                phone: contentYourCv.information.phone,
                address: contentYourCv.information.address,
                github: contentYourCv.information.github,
                email: contentYourCv.information.email,
                birth: contentYourCv.information.birth,
                imgSize: contentYourCv.information.imgSize,
                container: contentYourCv.information.container,
                phonelabel: contentYourCv.information.phonelabel,
                addresslabel: contentYourCv.information.addresslabel,
                githublabel: contentYourCv.information.githublabel,
                emaillabel: contentYourCv.information.emaillabel,
                birthlabel: contentYourCv.information.birthlabel
            }
        })
    })
}
// Ki·ªÉm tra l·∫°i d·∫°ng ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n v√† ƒë·ªëi chi·∫øu vs Chat
// khi nh·∫•n th√™m m·ªõi ho·∫∑c ch·ªçn 1 Cv ƒë·ªÉ hi·ªÉn th·ªã th√¨ c√°i m·ªõi th√™m s·∫Ω b·ªã x√≥a 
console.log(localStorage.getItem("checkxemthemchua"));
if(btn_save_yourCV){
    btn_save_yourCV.onclick = async ()=>{
        await SaveyourCV(contentYourCv);
        console.log(contentYourCv);
        await updateCV(contentYourCv); // l√†m nhi·ªám v·ª• update 1 ph·∫ßn c·ªßa CV 
        await Deletebe4Update(localStorage.getItem("IDCVcurrent")); // l√†m nhi·ªám v·ª• x√≥a ph·∫ßn c√≤n l·∫°i c·ªßa CV c≈© 
        await addDatatoUpdate(contentYourCv,localStorage.getItem("IDCVcurrent")); // th√™m m·ªõi n·ªôi dung m·ªõi v√†o ph·∫ßn c√≤n l·∫°i v·ª´a x√≥a 
        alert("L∆∞u CV Th√†nh C√¥ng ‚úÖ");
        // await getdatapushtoAPI(contentYourCv);
    }
}
if(btn_add_newCV){
    btn_add_newCV.onclick = async ()=>{
        localStorage.setItem("checkxemthemchua",true);
        localStorage.setItem("status","update")
        btn_save_yourCV.classList.remove("hidden");
        btn_add_newCV.classList.add("hidden");
        if(localStorage.getItem("checkxemthemchua") == "true"){
            alert("Th√™m D·ªØ Li·ªáu Th√†nh C√¥ng");
        }
        await SaveyourCV(contentYourCv);
        console.log(contentYourCv);
        await getdatapushtoAPI(contentYourCv);
    }
}

function handleRegion(){
    let allpaper = document.querySelectorAll(".paper");
    allpaper.forEach(paper=>{
        let nuatrai = paper.querySelector(".half-left");
        let nuaphai = paper.querySelector(".half-right");
        console.log(nuaphai.innerText);
        if(getTemplateCV_Now() == "paper_mau0" || getTemplateCV_Now() == "paper_mau2" || getTemplateCV_Now() == "paper_mau3" || getTemplateCV_Now() == "paper_mau10"){
            if(nuaphai.innerText == ""){
                // ·∫©n
                if(nuaphai.querySelector(".region_use_to_add")) nuaphai.querySelector(".region_use_to_add").style.display = "flex";
            }
            else{
                // hi·ªán
                if(nuaphai.querySelector(".region_use_to_add")) nuaphai.querySelector(".region_use_to_add").style.display = "none";
            }
        }
        else{
            if(nuaphai){
                console.log(nuaphai);
                if(nuaphai.innerText == ""){
                    // ·∫©n
                    if(nuaphai.querySelector(".region_use_to_add")) nuaphai.querySelector(".region_use_to_add").style.display = "flex";
                    
                }
                else{
                    if(nuaphai.querySelector(".region_use_to_add")) nuaphai.querySelector(".region_use_to_add").style.display = "none";
                }
            }
            if(nuatrai){
                console.log(nuatrai);

                if(nuatrai.innerText == ""){
                    // ·∫©n
                    if(nuatrai.querySelector(".region_use_to_add")) nuatrai.querySelector(".region_use_to_add").style.display = "flex";
                }
                else{
                    // hi·ªán
                    if(nuatrai.querySelector(".region_use_to_add")) nuatrai.querySelector(".region_use_to_add").style.display = "none";
                }
            }
        }
    })
}
let region_use_to_adds = document.querySelectorAll(".region_use_to_add");
region_use_to_adds.forEach(region_use_to_add=>{
    region_use_to_add.onclick = ()=>{
        addNewItem.classList.remove("hidden");
        let part_avai = document.querySelectorAll(".content-left .part_ct");
        let parts_exists = [...part_avai].map(ptu=>{
            return ptu.getAttribute("class").split(" ")[0];
        })
        list_addNewItem.forEach(e=>{
            if(check_part_avai(e,parts_exists) == false ) e.classList.add("not_available");
            else{
                e.onclick = () =>{
                    let parts = e.getAttribute("class").split(" ")[2];
                    region_use_to_add.insertAdjacentElement("afterend", (parts == "skill") ? partSkill : (parts == "project") ? partProject : (parts == "awards") ? partAwards : (parts == "goals") ? partworkGoals : (parts == "certificate") ? partCertificate : (parts == "language") ? partLanguage : (parts == "overview") ? partOverview : (parts == "workexperience") ? partworkExp : (parts == "education") ? partEducation : partAnother);  
                    handleRegion();
                    addNewItem.classList.add("hidden");
                }
            }
        })
    }
})

function GetAllData(fatherpart){
    let qal = { timeline : "",title : "",description: "",contents: ""}
    let listqal = [];
    let listDat = document.querySelectorAll(`section[fatherpart="${fatherpart}"]`);
    console.log(listDat);
    listDat.forEach(dat=>{
        qal.timeline = dat.querySelector(".timeline").innerHTML;
        qal.title = dat.querySelector(".title_item").innerHTML;
        qal.description = dat.querySelector(".description").innerHTML;
        qal.contents = dat.querySelector(".content_item").innerHTML;
        listqal.push(qal);
    })
    return listqal;
}
function checkContainer(part_in_paper,model){
    //mau0,1,2 hd ct
    //mau3 phan phu,ct
    //mau4,5,6,7,9,11 hleft,right
    //mau8 ct>hright ,hd 
    //mau10  ct
    //mau12 hright,hleft,hd
    // part in4 kh√¥ng th·ªÉ x√≥a 

    // 1,2,3,10 -> m√¨nh half left c√≤n l·∫°i l√† c·∫£ left c·∫£ right
    if(model == "paper_mau0" || model == "paper_mau2" || model == "paper_mau3" || model == "paper_mau10"){
        console.log("L·ªçt V√†o ƒê√¢y");
        if(part_in_paper.closest(".half-right")){
            return "half-right";
        }
        else{
            return "heading_paper"
        }
    }
    else if(model == "paper_mau1" || model == "paper_mau8"){
        if(part_in_paper.closest(".half-left")){
            if(part_in_paper.closest(".half-left").classList.contains("heading_paper")){
                return "half-left";
            }
        }
        else{
            return "half-right";
        }
    }
    else{
        if(part_in_paper.closest(".half-left")){
            return "half-left";
        }
        else{
            return "half-right";
        }
    }
    // container hd ct hay left right ch·ªâ d√πng ƒë·ªÉ xem ptu n√≥ n·∫±m ·ªü ph√¢nf n√†o 
}

async function SaveyourCV(a){
    // userprofile
    a.userprofile.name = content_left.querySelector("#name").innerText || "";
    a.userprofile.position = content_left.querySelector("#position").innerText || "";
    // n·ªôi dung ph·∫ßn th√¢n cv 
    let overview,workexperience,education,skill,project,awards,goals,certificate,language,another;
    information = content_left.querySelector(".information");
    overview = content_left.querySelector(".overview");
    workexperience = content_left.querySelector(".workexperience");
    education = content_left.querySelector(".education");
    skill = content_left.querySelector(".skill");
    project = content_left.querySelector(".project");
    awards = content_left.querySelector(".awards");
    goals = content_left.querySelector(".goals");
    certificate = content_left.querySelector(".certificate");
    language = content_left.querySelector(".language");
    another = content_left.querySelector(".another");
    // l·∫•y ra m·∫´u CV hi·ªán t·∫°i 
    a.model = getTemplateCV_Now();
    title_HDnow = content_left.querySelector(".title_HD"); 
    a.userprofile.container = checkContainer(title_HDnow,a.model);
    console.log(paper.style.fontFamily);
    if(paper.style.fontFamily){
        a.font = paper.style.fontFamily;
    }
    else{
        a.font = "'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif";
    }
    if(paper.style.fontSize){
        a.fontSize = paper.style.fontSize;
    }
    else{
        a.fontSize = "13.5px";
    }
    if(getColorCVNow()){
        a.color = getColorCVNow();
    }
    else{
        a.color = "rgb(252, 83, 83)";
    }
    // in4mation
    a.information.phone = content_left.querySelector("#phone").innerText || "";
    a.information.address = content_left.querySelector("#address").innerText || "";
    a.information.birth = content_left.querySelector("#birth").innerText || "";
    a.information.email = content_left.querySelector("#email").innerText || "";
    a.information.github = content_left.querySelector("#github").innerText || "";
    a.information.container = checkContainer(information,a.model);

    a.information.phonelabel = content_left.querySelector(".phonelable").innerText || "";
    a.information.addresslabel = content_left.querySelector(".addresslable").innerText || "";
    a.information.githublabel = content_left.querySelector(".githublable").innerText || "";
    a.information.emaillabel = content_left.querySelector(".emaillable").innerText || "";
    a.information.birthlabel = content_left.querySelector(".birthlable").innerText || "";

    if((content_left.querySelector(".anh_CV>img").getAttribute("src") + "").substring(0,5) == "./img"){
        const base64 = await convertImageToBase64(content_left.querySelector(".anh_CV>img").getAttribute("src"));
        a.uploadImg = await convertImageToBase64(base64);
    }
    else{
        a.uploadImg = content_left.querySelector(".anh_CV>img").getAttribute("src") || "";
    }
    if(content_left.querySelector(".anh_CV>img").getAttribute("style")){
        a.information.imgSize = content_left.querySelector(".anh_CV>img").style.width;
    }
    else{
        a.information.imgSize = "120px";
    }
    if(overview){
        let listov = overview.querySelectorAll("section[fatherpart='overview']");
        let name_title = overview.querySelector(".label_partCT").innerText;
        listov.forEach(ele=>{
            let obj_ovv = {
                content : ele.innerHTML,
                container : checkContainer(overview,a.model),
                name_title : name_title
            }
            a.overview.push(obj_ovv);
        })
    }
    if(project){
        console.log("C√≥ Project");
        let listpj = content_left.querySelectorAll(`section[fatherpart="project"]`);
        listpj.forEach(ele=>{
            let obj_form2 =  {
                project_name : "",
                time : "",
                // 
                client : "",
                descriptions : "",
                number_of_members : "",
                position : "",
                responsibilities : "",
                technology_in_use : "",

                container : "",
                // lable 
                name_title : "",
                client_lable: "",
                des_lable: "",
                nom_lable: "",
                pos_lable: "",
                respon_lable: "",
                techuse_lable: ""
            }
            obj_form2.project_name = ele.querySelector(".name_project>b").innerText;
            obj_form2.time = ele.querySelector(".name_project>p").innerText;
            obj_form2.client = ele.querySelector(".client_project").innerText;
            obj_form2.descriptions = ele.querySelector(".descriptions_project").innerText;
            obj_form2.number_of_members = ele.querySelector(".number_of_members_project").innerText;
            obj_form2.position = ele.querySelector(".position_project").innerText;
            obj_form2.responsibilities = ele.querySelector(".responsibilities_project").innerText;
            obj_form2.technology_in_use = ele.querySelector(".technology_in_use_project").innerText;
            obj_form2.container  = checkContainer(project,a.model);
            // lable
            obj_form2.client_lable = ele.querySelector(".client_project_lable").innerText;
            obj_form2.des_lable = ele.querySelector(".descriptions_project_lable").innerText;
            obj_form2.nom_lable = ele.querySelector(".number_of_members_project_lable").innerText;
            obj_form2.pos_lable = ele.querySelector(".position_project_lable").innerText;
            obj_form2.respon_lable = ele.querySelector(".responsibilities_project_lable").innerText;
            obj_form2.techuse_lable = ele.querySelector(".technology_in_use_project_lable").innerText;

            console.log(project.querySelector(".label_partCT"));
            obj_form2.name_title = project.querySelector(".label_partCT") ? project.querySelector(".label_partCT").innerText : "D·ª± √Ån";
            console.log(project.querySelector(".label_partCT"));
            
            a.project.push(obj_form2);
        })
    }
    if(workexperience || education || skill || awards || goals || certificate || language || another){
        //information ||
        let list_part_obj_form1 = [workexperience,education,skill,awards,goals,certificate,language,another];
        console.log(list_part_obj_form1);
        list_part_obj_form1.forEach(part=>{
            handleForm(part,a,checkContainer,a.model);
        })
    }
    // return a;
}
function handleForm(part,a,checkContainer,model){
    if(part){
        console.log(part);
        let classname = part.getAttribute("class").split(" ")[0];
        let label_partct = part.querySelector(".label_partCT");
        console.log(classname);
        let listwe = content_left.querySelectorAll(`section[fatherpart="${classname}"]`);
        listwe.forEach(el=>{
            let obj_form1 =  {
                time: "",
                title : "",
                descreption : "",
                content : "",
                container : "",
                name_title : ""
            }
            if(el.querySelector(".half_left_of_content_item")){
                obj_form1.time = el.querySelector(".half_left_of_content_item").innerText;
            }
            if(el.querySelector(".title_item")){
                obj_form1.title = el.querySelector(".title_item").innerText;
            }
            if(el.querySelector(".description")){
                obj_form1.descreption = el.querySelector(".description").innerText;
            }
            if(el.querySelector(".content_item")){
                obj_form1.content = el.querySelector(".content_item").innerHTML;
            }
            if(label_partct){
                obj_form1.name_title = label_partct.innerText;
            }
            obj_form1.container = checkContainer(part,model);
            console.log(obj_form1);
            a[classname].push(obj_form1);
        })
        console.log(a[classname]);
    }
}
// d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞ v√†o localstorage gi·ªëng contentYourCv 
// let testadm0 = document.querySelector("section[fatherpart='workexperience']")
// console.log(testadm0.querySelector(".timeline"));    
// //.querySelector(".timeline")
// console.log(GetAllData("workexperience"))
console.log(localStorage.getItem("status"));
if(localStorage.getItem("status") == "update"){
    btn_save_yourCV.classList.remove("hidden");
    btn_add_newCV.classList.add("hidden");
}
else{
    btn_add_newCV.classList.remove("hidden");
    btn_save_yourCV.classList.add("hidden");
}
if(is_default == false){
    console.log(is_default);
    CheckStyleCV(0);
}

// id s·∫Ω l√† id m·ªõi nh·∫•t (khi ƒëc t·∫°o m·ªõi) 
// m·ªói 3.5s l∆∞u nd Cv htai v√†o 1 
// l·∫•y ra idcv hi·ªán t·∫°i ƒëang ch·ªçn ƒë·ªÉ update call ra api cv hi·ªán t·∫°i v√† ti√™ns h√†nh th√™m id c·ªßa ph·∫ßn ƒë√≥ v√†o b·∫£ng tmp 
// [38] Khi chuy·ªÉn m·∫´u ·ªü ph·∫ßn heading CV c√°c label nh·∫≠p tt c√° nh√¢n b·ªã d√≠nh th√™m <br> 
// (s·ª≠ d·ª•ng h√†m antiEnter m·ªói ph·∫ßn chuy·ªÉn m·∫´u th√¨ g·ªçi h√†m n√†y ·ªü c√°c label v√† ph·∫ßn nh·∫≠p tt label)

async function addDatatoUpdate(contentYourCv,idcvnow){
    console.log(" ----------------------------------------- ",contentYourCv);
    if(!idcvnow){
        alert("C√≥ L·ªói X·∫£y ra vui l√≤ng ch·ªçn l·∫°i CV c·ªßa b·∫°n ƒë·ªÉ update");
        // return;
    }
    let overview = "http://localhost:5028/api/NguoiDung/overview";
    let experience = "http://localhost:5028/api/NguoiDung/experience";
    let education = "http://localhost:5028/api/NguoiDung/Education";
    let projects = "http://localhost:5028/api/NguoiDung/Projects";
    let skill = "http://localhost:5028/api/NguoiDung/Skill";
    let awards = "http://localhost:5028/api/NguoiDung/Awards";
    let goals = "http://localhost:5028/api/NguoiDung/Goals";
    let certificate = "http://localhost:5028/api/NguoiDung/Certificate";
    let language = "http://localhost:5028/api/NguoiDung/Language";
    let anotherPart = "http://localhost:5028/api/NguoiDung/AnotherPart";
    const fetchPromises = [];

    if(contentYourCv.overview.length > 0){
        console.log(contentYourCv.overview);
        contentYourCv.overview.forEach(dat=>{
            fetchPromises.push(
            fetch(overview,{
                method: "POST",
                headers: {
                    "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                },
                body: JSON.stringify({
                    idcv : idcvnow,
                    contentOverView : dat.content,
                    container : dat.container,
                    name_title : dat.name_title
                })
            })
            )
        })       
    }
    if(contentYourCv.workexperience.length > 0){
        console.log(contentYourCv.workexperience);
        contentYourCv.workexperience.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(experience,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        company_name : dat.title,
                        position: dat.descreption,
                        time: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })

            )
            console.log(
                JSON.stringify({
                    idcv : idcvnow,
                        company_name : dat.title,
                        position: dat.descreption,
                        time: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                })
            )
        })
    }
    if(contentYourCv.education.length > 0){
        console.log(contentYourCv.education);
        contentYourCv.education.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(education,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        school_name : dat.title,
                        time: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
            )
            console.log(
                JSON.stringify({
                    idcv : idcvnow,
                    school_name : dat.school_name,
                    time: dat.time,
                    content: dat.content,
                    container : dat.container,
                    name_title : dat.name_title
                })
            )
        })

    }
    if(contentYourCv.skill.length > 0){
        console.log(contentYourCv.skill);
        contentYourCv.skill.forEach((dat,index)=>{
            fetchPromises.push(
                    fetch(skill,{
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                        },
                        body: JSON.stringify({
                            idcv : idcvnow,
                            skill_name : dat.time,
                            content: dat.content,
                            container : dat.container,
                            name_title : dat.name_title
                        })
                    })
                    
                )
        })
    }
    if(contentYourCv.project.length > 0){
        console.log(contentYourCv.project);
        contentYourCv.project.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(projects,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        project_name : dat.project_name,
                        client: dat.client,
                        time: dat.time,
                        descriptions: dat.descriptions,
                        number_of_members: Number(dat.number_of_members),
                        position: dat.position,
                        responsibilities: dat.responsibilities,
                        technology_in_use: dat.technology_in_use,
                        container : dat.container,
                        name_title : dat.name_title,
                        client_lable: dat.client_lable,
                        des_lable: dat.des_lable,
                        nom_lable: dat.nom_lable,
                        pos_lable: dat.pos_lable,
                        respon_lable: dat.respon_lable,
                        techuse_lable: dat.techuse_lable
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errData => {
                            if (response.status === 400) {
                                alert(`[X] L·ªói: D·ªØ li·ªáu ph·∫ßn Project ch∆∞a ch√≠nh x√°c. Vui l√≤ng ki·ªÉm tra l·∫°i !`);
                            }
                        });
                    }
                    return response.json();
                })
            )
            console.log(JSON.stringify({
                idcv : idcvnow,
                project_name : dat.project_name,
                client: dat.client,
                time: dat.time,
                descriptions: dat.descriptions,
                number_of_members: Number(dat.number_of_members),
                position: dat.position,
                responsibilities: dat.responsibilities,
                technology_in_use: dat.technology_in_use,
                container : dat.container,
                name_title : dat.name_title,
                client_lable: dat.client_lable,
                des_lable: dat.des_lable,
                nom_lable: dat.nom_lable,
                pos_lable: dat.pos_lable,
                respon_lable: dat.respon_lable,
                techuse_lable: dat.techuse_lable
            }))
        })
    }
    if(contentYourCv.awards.length > 0){
        console.log(contentYourCv.awards);
        contentYourCv.awards.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(awards,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        award_name : dat.title,
                        time: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
            )
        })
    }
    if(contentYourCv.goals.length > 0){
        console.log(contentYourCv.goals);
        contentYourCv.goals.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(goals,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        term: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
            )
        })
    }
    if(contentYourCv.certificate.length > 0){
        console.log(contentYourCv.certificate);
        contentYourCv.certificate.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(certificate,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        time: dat.time,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
            )
        })
    }
    if(contentYourCv.language.length > 0){
        console.log(contentYourCv.language);

        contentYourCv.language.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(language,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        language_name: dat.time,
                        level: dat.title,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
            )
        })
    }
    if(contentYourCv.another.length > 0){
        console.log(contentYourCv.another);
        contentYourCv.another.forEach((dat,index)=>{
            fetchPromises.push(
                fetch(anotherPart,{
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json" // ƒê·ªãnh d·∫°ng n·ªôi dung JSON
                    },
                    body: JSON.stringify({
                        idcv : idcvnow,
                        name_part: dat.time,
                        title: dat.title,
                        content: dat.content,
                        container : dat.container,
                        name_title : dat.name_title
                    })
                })
            )
        })
    }
    Promise.all(fetchPromises);
}
function Handle_String(string,char){
    let str = string.toLowerCase();

    if(str.substring(str.length - 1) == char){
        // console.log(str.substring(0,str.length - 1));
        return str.substring(0,str.length - 1);
    }
    else{
        return str;
    }
}
async function Deletebe4Update(idcv) {
    if(!idcv){
        alert("C√≥ L·ªói x·∫£y ra vui l√≤ng ch·ªçn l·∫°i CV ƒë·ªÉ update");
        // return;
    }
    const endpoints = {
        overview: `http://localhost:5028/api/NguoiDung/Delete_Overview?idcv=${idcv}`,
        workexperience: `http://localhost:5028/api/NguoiDung/Delete_WorkExperience?idcv=${idcv}`,
        education: `http://localhost:5028/api/NguoiDung/Delete_Education?idcv=${idcv}`,
        skill: `http://localhost:5028/api/NguoiDung/Delete_Skill?idcv=${idcv}`,
        project: `http://localhost:5028/api/NguoiDung/Delete_Project?idcv=${idcv}`,
        awards: `http://localhost:5028/api/NguoiDung/Delete_Awards?idcv=${idcv}`,
        goals: `http://localhost:5028/api/NguoiDung/Delete_Goals?idcv=${idcv}`,
        certificate: `http://localhost:5028/api/NguoiDung/Delete_Cer?idcv=${idcv}`,
        language: `http://localhost:5028/api/NguoiDung/Delete_Language?idcv=${idcv}`,
        another: `http://localhost:5028/api/NguoiDung/Delete_Another?idcv=${idcv}`
    };
    let arrhandle1 = [];
    let arrhandle2 = [];
    let currentPart_available = Array.from(content_left.querySelectorAll(".part_ct")).map(ele => {
        return ele.getAttribute("class").split(" ")[0];
    });
    let url = `http://localhost:5028/api/NguoiDung/user/getDetailsCVbyID?userid=${userIdnow}&idcv=${idcv}`;
    let resp = await fetch(url);
    let data = await resp.json();

    for(let key in data){
        if(data[key].length == 0 || key == "cv" || key == "profile" || key == "information"){
            continue;
        }
        arrhandle1.push(Handle_String(key,"s"));
    }
    for(let avai of currentPart_available){
        if(avai == "title_HD" || avai == "information"){
            continue;
        }
        arrhandle2.push(Handle_String(avai,"s"));
    }
    arrhandle1.forEach(ele=>{
        if(!arrhandle2.includes(ele)){
            let hi = (ele == "award" || ele == "goal") ? ele + "s" : ele;
            console.log(ele);
            if(ele == "overview" || ele == "workexperience" || ele == "education"){
                console.log(ele);
                // document.querySelector(`.${ele}`).remove();
            }
            if (endpoints[hi]) {
                fetch(endpoints[hi], {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });
            }
        }
    })
    console.log(arrhandle1);
    console.log(arrhandle2);

    let deleteRequests = [];

    for (const e of currentPart_available) {
        if (endpoints[e]) { 
            deleteRequests.push(
                fetch(endpoints[e], {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                })
            );
        }
    }

    // Ch·ªù t·∫•t c·∫£ c√°c y√™u c·∫ßu x√≥a ho√†n th√†nh
    await Promise.all(deleteRequests)
    .then(dat=>{
        console.log(dat);
    })
    .catch(err=>{
        console.log(err);
    })
}

// setting khung chatbot 
document.addEventListener("DOMContentLoaded", function () {
    function applyChatStyles() {
        const messenger = document.querySelector("df-messenger");
        if (messenger) {
            setTimeout(() => {
                const chat = messenger.shadowRoot?.querySelector("df-messenger-chat");
                const chatWrapper = chat?.shadowRoot?.querySelector(".chat-wrapper");
                if (chatWrapper) {
                    chatWrapper.style.bottom = "10px";
                    chatWrapper.style.right = "90px";
                    console.log("CSS Applied: bottom 10px, right 90px"); // Debug
                }
            }, 300); 
        }
    }

    function setupClickListener() {
        const messenger = document.querySelector("df-messenger");
        if (messenger) {
            const widgetIcon = messenger.shadowRoot?.querySelector("button#widgetIcon");
            if (widgetIcon) {
                widgetIcon.addEventListener("click", applyChatStyles);
            } else {
                setTimeout(setupClickListener, 100);
            }
        }
    }
    setupClickListener();
});


